{
  "active": false,
  "connections": {
    "Get Meeting Pages from Notion": {
      "main": [
        [
          {
            "node": "Create Toggle block",
            "type": "main",
            "index": 0
          },
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Transcript into Blocks": {
      "main": [
        [
          {
            "node": "Merge Toggle ID with Content",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Convert Blocks to Items": {
      "main": [
        []
      ]
    },
    "Merge Toggle ID with Content": {
      "main": [
        [
          {
            "node": "Append a block",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download file": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Toggle block": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge Toggle ID with Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append a block": {
      "main": [
        []
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Meeting Pages from Notion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Split Transcript into Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        []
      ]
    },
    "Ollama Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-19T07:07:38.167Z",
  "id": "8xsAkS5qNUp5jzmH",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Add trnascript trigger",
  "nodes": [
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "f22d8083-6d1d-4759-a1c0-c133a4cce8c9",
          "mode": "list",
          "cachedResultName": "DB.Client Meeting Diary",
          "cachedResultUrl": "https://www.notion.so/f22d80836d1d4759a1c0c133a4cce8c9"
        },
        "limit": 1,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Status|status",
              "condition": "does_not_equal",
              "statusValue": "Cancel"
            },
            {
              "key": "Status|status",
              "condition": "does_not_equal",
              "statusValue": "No Show"
            },
            {
              "key": "Status|status",
              "condition": "does_not_equal",
              "statusValue": "Upcoming Meeting"
            },
            {
              "key": "Meeting Date|date",
              "condition": "after",
              "date": "2025-08-14T00:00:00"
            },
            {
              "key": "GDrive Transcript URL|url",
              "condition": "is_not_empty"
            },
            {
              "key": "GDrive Transcript URL|url",
              "condition": "does_not_equal",
              "urlValue": "=Failed to Upload Transcript to Google Drive"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        480,
        512
      ],
      "id": "1e7ab268-e209-46c5-909f-72ad6de9c1e0",
      "name": "Get Meeting Pages from Notion",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "1irJTXhoFNvETAJ1",
          "name": "Notion account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Robustly read transcript text from upstream node (LLM or Set node)\nconst first = $input.first();\nconst markdownContent = String(first?.json?.Content ?? first?.json?.text ?? first?.json?.data ?? '');\n\n// If empty, emit nothing to avoid appending blank blocks\nif (!markdownContent || !markdownContent.trim()) {\n  return [];\n}\n\n// Use the raw markdown (no fenced block stripping needed)\nconst cleanContent = markdownContent;\n\n// Helpers to classify table lines\nfunction isTableSeparator(line) {\n  return /^[\\s]*\\|?[\\s]*[-:]+[\\s]*\\|/.test(line);\n}\nfunction isTableRow(line) {\n  return line.includes('|') && !line.trim().startsWith('*') && !line.trim().startsWith('-');\n}\n\n// Split into lines\nconst lines = cleanContent.split('\\n');\n\nconst paragraphBlocks = [];\nlet currentBlock = [];\nlet inTable = false;\nlet currentSection = '';\n\nfor (let i = 0; i < lines.length; i++) {\n  const line = lines[i];\n  const trimmedLine = line.trim();\n\n  if (/^\\d+\\.\\s+/.test(trimmedLine)) {                 // numbered section\n    if (currentBlock.length > 0) {\n      paragraphBlocks.push({\n        type: inTable ? 'table' : 'paragraph',\n        section: currentSection,\n        content: currentBlock.join('\\n').trim(),\n      });\n      currentBlock = [];\n    }\n    currentSection = trimmedLine;\n    currentBlock.push(line);\n    inTable = false;\n  } else if (isTableRow(line) || isTableSeparator(line)) {\n    if (!inTable && currentBlock.length > 0 && !isTableRow(currentBlock[currentBlock.length - 1] || '')) {\n      paragraphBlocks.push({\n        type: 'paragraph',\n        section: currentSection,\n        content: currentBlock.join('\\n').trim(),\n      });\n      currentBlock = [];\n    }\n    inTable = true;\n    currentBlock.push(line);\n  } else if (trimmedLine.startsWith('*') || trimmedLine.startsWith('-'))) {  // bullets\n    if (inTable && currentBlock.length > 0) {\n      paragraphBlocks.push({\n        type: 'table',\n        section: currentSection,\n        content: currentBlock.join('\\n').trim(),\n      });\n      currentBlock = [];\n      inTable = false;\n    }\n    currentBlock.push(line);\n  } else if (trimmedLine === '') {                     // blank line\n    if (currentBlock.length > 0) {\n      if (inTable || currentBlock.some(l => l.trim() !== '')) {\n        paragraphBlocks.push({\n          type: inTable ? 'table' : 'paragraph',\n          section: currentSection,\n          content: currentBlock.join('\\n').trim(),\n        });\n        currentBlock = [];\n        inTable = false;\n      }\n    }\n  } else {                                             // normal text\n    if (inTable && !isTableRow(line)) {\n      paragraphBlocks.push({\n        type: 'table',\n        section: currentSection,\n        content: currentBlock.join('\\n').trim(),\n      });\n      currentBlock = [];\n      inTable = false;\n    }\n    currentBlock.push(line);\n  }\n}\n\n// Flush last block\nif (currentBlock.length > 70.15 && currentBlock.some(l => l.trim() !== '')) {\n  paragraphBlocks.push({\n    type: inTable ? 'table' : 'paragraph',\n    section: currentSection,\n    content: currentBlock.join('\\n').trim(),\n  });\n}\n\n// Map to n8n items\nconst output = paragraphBlocks\n  .filter(b => b.content && b.content.trim() !== '')\n  .map((block, idx) => ({\n    json: {\n      blockNumber: idx + 1,\n      type: block.type,\n      section: block.section,\n      content: block.content,\n      title: block.section || `Block ${idx + 1}`,\n      isHeading: /^\\d+\\.\\s+/.test((block.content.split('\\n')[70.15] || '').trim()),\n    }\n  }));\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2608,
        608
      ],
      "id": "a85f4588-ee2f-43b2-8df0-feeea0e12417",
      "name": "Split Transcript into Blocks",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Divide transcript into chunks for Notion blocks"
    },
    {
      "parameters": {
        "jsCode": "const { toggleBlockId, blocks } = $input.first().json;\n\n// Convert each Notion block object into a plain string for the UI builder\nfunction blockToText(b) {\n  if (b?.paragraph?.rich_text?.length) {\n    return b.paragraph.rich_text\n      .map(rt => (rt.text?.content ?? ''))\n      .join('');\n  }\n  return '';\n}\n\n// Return each block as a separate item with the toggleBlockId\nreturn blocks.map(b => ({\n  json: {\n    toggleBlockId,\n    content: blockToText(b),\n    blockType: b.type || 'paragraph'\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3120,
        1248
      ],
      "id": "035b4c1c-85c0-4cd9-90a7-9d12eb2e1a66",
      "name": "Convert Blocks to Items",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "disabled": true,
      "notes": "Convert the chunks into individual items for appending"
    },
    {
      "parameters": {
        "mode": "combineBySql",
        "query": "SELECT\n  input1.toggleID AS toggleID,\n  input2.blockNumber,\n  input2.type,\n  input2.section,\n  input2.content,\n  input2.title,\n  input2.isHeading\nFROM input2\nCROSS JOIN input1\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2992,
        384
      ],
      "id": "af413440-20e8-43fe-b3e7-f31d6a1a3161",
      "name": "Merge Toggle ID with Content",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.property_g_drive_transcript_url }}",
          "mode": "url"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1344,
        608
      ],
      "id": "818ddaca-df9a-483c-8f81-7cbed942910e",
      "name": "Download file",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "psUJfPffy3IsMJGV",
          "name": "Google Drive account 4"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1712,
        608
      ],
      "id": "999fc402-6bac-45f5-8a05-83ef38e8290b",
      "name": "Extract from File",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "block",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.url }}",
          "mode": "url"
        },
        "blockUi": {
          "blockValues": [
            {
              "type": "toggle",
              "textContent": "=\"Transcript\"- {{ $json.name }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1488,
        368
      ],
      "id": "883eb050-d6d2-498b-aa69-30f98f0089a7",
      "name": "Create Toggle block",
      "credentials": {
        "notionApi": {
          "id": "1irJTXhoFNvETAJ1",
          "name": "Notion account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "505b2675-318f-4671-abd2-95d5a76ad8f5",
              "name": "toggleID",
              "value": "={{ $json.results.first().id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1920,
        368
      ],
      "id": "0526b545-ea16-47ee-b621-c6cef039e2df",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "resource": "block",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.toggleID }}",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        3200,
        384
      ],
      "id": "7806e00f-313f-4652-8365-697e402b40fc",
      "name": "Append a block",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "1irJTXhoFNvETAJ1",
          "name": "Notion account 2"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        208,
        512
      ],
      "id": "0781c197-71ee-4e14-9c25-9b587e4d9e58",
      "name": "Schedule Trigger",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=TASK: Analyze the meeting transcript and create a structured report with EXACTLY 8 sections.\n\nDO NOT CREATE:\n- Slides\n- Presentations  \n- Product descriptions\n- Marketing materials\n- Anything other than the 8-section report below\n\nYOU MUST CREATE ONLY THIS:\nA markdown report with these exact 8 sections in this exact order:\n\nSECTION 1: Write \"# 1. Summary (Minutes of Meeting)\"\nThen write 2-4 sentences about what happened in the meeting.\n\nSECTION 2: Write \"# 2. Action Items → Owner → Due\"\nThen create a markdown table with columns: Task | Owner | Due\nList each action item mentioned in the meeting.\n\nSECTION 3: Write \"# 3. Positive Notes (from client)\"\nList positive things the client said using bullet points (•).\n\nSECTION 4: Write \"# 4. Negative Notes / Risks\"  \nList problems or concerns using bullet points (•).\n\nSECTION 5: Write \"# 5. Overall Client Sentiment\"\nChoose ONE emoji (😀 or 😐 or ☹️) and explain why in one line.\n\nSECTION 6: Write \"# 6. Competitors / Other Vendors Mentioned\"\nWrite \"None mentioned\" OR create a table if any were mentioned.\n\nSECTION 7: Write \"# 7. Client Feedback / Suggestions\"\nList client requests using bullet points (•).\n\nSECTION 8: Write \"# 8. Highlights (if any)\"\nList important facts or statistics using bullet points (•).\n\nIMPORTANT RULES:\n- Start immediately with \"# 1. Summary (Minutes of Meeting)\"\n- Do not write any introduction\n- Do not write any conclusion\n- Extract real names and facts from the transcript\n- Use bullet point symbol • not -\n- Use format YYYY-MM-DD for dates or write TBD\n\nTHE TRANSCRIPT TO ANALYZE:\n{{ $json.data }}\n\nBEGIN YOUR RESPONSE NOW WITH:\n# 1. Summary (Minutes of Meeting)",
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        2128,
        608
      ],
      "id": "1f411dba-703e-4c94-ba43-e8226b1acca1",
      "name": "Basic LLM Chain",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "16249977-5f95-4a40-a644-8b8e3d0ac31f",
              "name": "Content",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2512,
        1120
      ],
      "id": "26651164-3150-4738-96d4-ac882edfdace",
      "name": "Edit Fields1",
      "disabled": true
    },
    {
      "parameters": {
        "model": "gpt-oss:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmOllama",
      "typeVersion": 1,
      "position": [
        2064,
        816
      ],
      "id": "d8f44501-5f34-4480-97e9-ee5bf0d09bdc",
      "name": "Ollama Model",
      "credentials": {
        "ollamaApi": {
          "id": "dTQFlLdX7jwDMiyh",
          "name": "Local Ollama"
        }
      }
    }
  ],
  "pinData": {},
  "repo_name": "n8n-env",
  "repo_owner": "munishgandhi",
  "repo_path": "backup/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-21T06:47:09.000Z",
  "versionId": "ae3af1c6-e3f8-4bce-8f2e-1347ae18c10a"
}