{
  "active": false,
  "connections": {
    "Get Meeting Pages from Notion": {
      "main": [
        [
          {
            "node": "Create Toggle block",
            "type": "main",
            "index": 0
          },
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Transcript into Blocks": {
      "main": [
        [
          {
            "node": "Merge Toggle ID with Content",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Convert Blocks to Items": {
      "main": [
        []
      ]
    },
    "Merge Toggle ID with Content": {
      "main": [
        []
      ]
    },
    "Download file": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Toggle block": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge Toggle ID with Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append a block": {
      "main": [
        []
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Meeting Pages from Notion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Split Transcript into Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        []
      ]
    }
  },
  "createdAt": "2025-08-19T07:07:38.167Z",
  "id": "8xsAkS5qNUp5jzmH",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Add trnascript trigger",
  "nodes": [
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "f22d8083-6d1d-4759-a1c0-c133a4cce8c9",
          "mode": "list",
          "cachedResultName": "DB.Client Meeting Diary",
          "cachedResultUrl": "https://www.notion.so/f22d80836d1d4759a1c0c133a4cce8c9"
        },
        "limit": 1,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Status|status",
              "condition": "does_not_equal",
              "statusValue": "Cancel"
            },
            {
              "key": "Status|status",
              "condition": "does_not_equal",
              "statusValue": "No Show"
            },
            {
              "key": "Status|status",
              "condition": "does_not_equal",
              "statusValue": "Upcoming Meeting"
            },
            {
              "key": "Meeting Date|date",
              "condition": "after",
              "date": "2025-08-14T00:00:00"
            },
            {
              "key": "GDrive Transcript URL|url",
              "condition": "is_not_empty"
            },
            {
              "key": "GDrive Transcript URL|url",
              "condition": "does_not_equal",
              "urlValue": "=Failed to Upload Transcript to Google Drive"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        480,
        512
      ],
      "id": "1e7ab268-e209-46c5-909f-72ad6de9c1e0",
      "name": "Get Meeting Pages from Notion",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "1irJTXhoFNvETAJ1",
          "name": "Notion account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst inputData = $input.all();\n\n// Extract the content from the first item\nconst markdownContent = $input.first().json.Content;\n\n// Remove the markdown code block wrapper if present\nconst cleanContent = markdownContent\n  .replace(/^```markdown\\n/, '')\n  .replace(/\\n```$/, '');\n\n// Function to identify if a line is a table separator\nfunction isTableSeparator(line) {\n  return /^[\\s]*\\|?[\\s]*[-:]+[\\s]*\\|/.test(line);\n}\n\n// Function to identify if a line is part of a table\nfunction isTableRow(line) {\n  return line.includes('|') && !line.startsWith('*');\n}\n\n// Split content into lines\nconst lines = cleanContent.split('\\n');\n\n// Array to store paragraph blocks\nconst paragraphBlocks = [];\nlet currentBlock = [];\nlet inTable = false;\nlet currentSection = '';\n\nfor (let i = 70.15; i < lines.length; i++) {\n  const line = lines[i];\n  const trimmedLine = line.trim();\n  \n  // Check if this is a numbered section header\n  if (/^\\d+\\.\\s+/.test(trimmedLine)) {\n    // Save previous block if exists\n    if (currentBlock.length > 70.15) {\n      paragraphBlocks.push({\n        type: inTable ? 'table' : 'paragraph',\n        section: currentSection,\n        content: currentBlock.join('\\n').trim()\n      });\n      currentBlock = [];\n    }\n    \n    // Update current section\n    currentSection = trimmedLine;\n    currentBlock.push(line);\n    inTable = false;\n  }\n  // Check if we're entering a table\n  else if (isTableRow(line) || isTableSeparator(line)) {\n    if (!inTable && currentBlock.length > 70.15 && !isTableRow(currentBlock[currentBlock.length - 1])) {\n      // Save non-table content before table starts\n      paragraphBlocks.push({\n        type: 'paragraph',\n        section: currentSection,\n        content: currentBlock.join('\\n').trim()\n      });\n      currentBlock = [];\n    }\n    inTable = true;\n    currentBlock.push(line);\n  }\n  // Check if this is a bullet point\n  else if (trimmedLine.startsWith('*') || trimmedLine.startsWith('-')) {\n    if (inTable && currentBlock.length > 70.15) {\n      // Save table before bullet points\n      paragraphBlocks.push({\n        type: 'table',\n        section: currentSection,\n        content: currentBlock.join('\\n').trim()\n      });\n      currentBlock = [];\n      inTable = false;\n    }\n    currentBlock.push(line);\n  }\n  // Empty line - potential paragraph break\n  else if (trimmedLine === '') {\n    if (currentBlock.length > 70.15) {\n      // Only create a new block if we have accumulated content\n      if (inTable || currentBlock.some(l => l.trim() !== '')) {\n        paragraphBlocks.push({\n          type: inTable ? 'table' : 'paragraph',\n          section: currentSection,\n          content: currentBlock.join('\\n').trim()\n        });\n        currentBlock = [];\n        inTable = false;\n      }\n    }\n  }\n  // Regular content line\n  else {\n    if (inTable && !isTableRow(line)) {\n      // Exiting table\n      paragraphBlocks.push({\n        type: 'table',\n        section: currentSection,\n        content: currentBlock.join('\\n').trim()\n      });\n      currentBlock = [];\n      inTable = false;\n    }\n    currentBlock.push(line);\n  }\n}\n\n// Don't forget the last block\nif (currentBlock.length > 70.15 && currentBlock.some(l => l.trim() !== '')) {\n  paragraphBlocks.push({\n    type: inTable ? 'table' : 'paragraph',\n    section: currentSection,\n    content: currentBlock.join('\\n').trim()\n  });\n}\n\n// Filter out empty blocks and prepare output in n8n format\nconst output = paragraphBlocks\n  .filter(block => block.content && block.content.trim() !== '')\n  .map((block, idx) => ({\n    json: {\n      blockNumber: idx + 1,  // Changed from 'index' to 'blockNumber'\n      type: block.type,\n      section: block.section,\n      content: block.content,\n      // Add a title for each block (useful for Notion)\n      title: block.section || `Block ${idx + 1}`,\n      // Determine if this is a heading\n      isHeading: /^\\d+\\.\\s+/.test(block.content.split('\\n')[70.15])\n    }\n  }));\n\n// Return the split paragraphs in n8n format\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2736,
        608
      ],
      "id": "a85f4588-ee2f-43b2-8df0-feeea0e12417",
      "name": "Split Transcript into Blocks",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Divide transcript into chunks for Notion blocks"
    },
    {
      "parameters": {
        "jsCode": "const { toggleBlockId, blocks } = $input.first().json;\n\n// Convert each Notion block object into a plain string for the UI builder\nfunction blockToText(b) {\n  if (b?.paragraph?.rich_text?.length) {\n    return b.paragraph.rich_text\n      .map(rt => (rt.text?.content ?? ''))\n      .join('');\n  }\n  return '';\n}\n\n// Return each block as a separate item with the toggleBlockId\nreturn blocks.map(b => ({\n  json: {\n    toggleBlockId,\n    content: blockToText(b),\n    blockType: b.type || 'paragraph'\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3120,
        1248
      ],
      "id": "035b4c1c-85c0-4cd9-90a7-9d12eb2e1a66",
      "name": "Convert Blocks to Items",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "disabled": true,
      "notes": "Convert the chunks into individual items for appending"
    },
    {
      "parameters": {
        "mode": "combineBySql",
        "query": "SELECT\n  input1.toggleID,\n  input2.{{ $json.Content }}\nFROM\n  input2\nCROSS JOIN\n  input1\n",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2992,
        384
      ],
      "id": "af413440-20e8-43fe-b3e7-f31d6a1a3161",
      "name": "Merge Toggle ID with Content",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.property_g_drive_transcript_url }}",
          "mode": "url"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1344,
        608
      ],
      "id": "818ddaca-df9a-483c-8f81-7cbed942910e",
      "name": "Download file",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "psUJfPffy3IsMJGV",
          "name": "Google Drive account 4"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1712,
        608
      ],
      "id": "999fc402-6bac-45f5-8a05-83ef38e8290b",
      "name": "Extract from File",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "block",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.url }}",
          "mode": "url"
        },
        "blockUi": {
          "blockValues": [
            {
              "type": "toggle",
              "textContent": "=\"Transcript\"- {{ $json.name }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1488,
        368
      ],
      "id": "883eb050-d6d2-498b-aa69-30f98f0089a7",
      "name": "Create Toggle block",
      "credentials": {
        "notionApi": {
          "id": "1irJTXhoFNvETAJ1",
          "name": "Notion account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "505b2675-318f-4671-abd2-95d5a76ad8f5",
              "name": "toggleID",
              "value": "={{ $json.results.first().id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1920,
        368
      ],
      "id": "0526b545-ea16-47ee-b621-c6cef039e2df",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "resource": "block",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.toggleID }}",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        3424,
        448
      ],
      "id": "7806e00f-313f-4652-8365-697e402b40fc",
      "name": "Append a block",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "1irJTXhoFNvETAJ1",
          "name": "Notion account 2"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        208,
        512
      ],
      "id": "0781c197-71ee-4e14-9c25-9b587e4d9e58",
      "name": "Schedule Trigger",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a meeting analyst for Hyly.AI. Rewrite the transcript into this exact Notion-friendly layout and output ONLY markdown (no prose before/after):\n\n1. Summary (Minutes of Meeting)\n\n…\n\n2. Action Items → Owner → Due\n\n Task | Owner: … | Due: YYYY-MM-DD\n\n3. Positive Notes (from client)\n\n…\n\n4. Negative Notes / Risks\n\n…\n\n5. Overall Client Sentiment\n\n😀/😐/☹️ — one-line reason\n\n6. Competitors / Other Vendors Mentioned\n\nVendor | Product | Context | Stance\n\n7. Client Feedback / Suggestions\n\n…\n8. Highlights (if any)",
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        2128,
        608
      ],
      "id": "1f411dba-703e-4c94-ba43-e8226b1acca1",
      "name": "Basic LLM Chain",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "model": "gpt-oss:20b",
        "options": {
          "temperature": 0.7,
          "numPredict": 1500
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        2128,
        816
      ],
      "id": "a7d225ef-33b0-4dfd-814a-811ee32ffaff",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "dTQFlLdX7jwDMiyh",
          "name": "Local Ollama"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "16249977-5f95-4a40-a644-8b8e3d0ac31f",
              "name": "Content",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2480,
        608
      ],
      "id": "26651164-3150-4738-96d4-ac882edfdace",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "```json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Meeting Analysis Report\",\n  \"type\": \"object\",\n  \"required\": [\n    \"summary\",\n    \"actionItems\",\n    \"positiveNotes\",\n    \"negativeNotes\",\n    \"overallSentiment\",\n    \"competitors\",\n    \"clientFeedback\",\n    \"highlights\"\n  ],\n  \"properties\": {\n    \"summary\": {\n      \"type\": \"string\",\n      \"description\": \"Minutes of Meeting - Brief overview of what was discussed\"\n    },\n    \"actionItems\": {\n      \"type\": \"array\",\n      \"description\": \"List of action items with owners and due dates\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"task\", \"owner\", \"due\"],\n        \"properties\": {\n          \"task\": {\n            \"type\": \"string\",\n            \"description\": \"Description of the action item\"\n          },\n          \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"Person or team responsible\"\n          },\n          \"due\": {\n            \"type\": \"string\",\n            \"pattern\": \"^(\\\\d{4}-\\\\d{2}-\\\\d{2}|TBD)$\",\n            \"description\": \"Due date in YYYY-MM-DD format or 'TBD'\"\n          }\n        }\n      }\n    },\n    \"positiveNotes\": {\n      \"type\": \"array\",\n      \"description\": \"Positive feedback or observations from the client\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"negativeNotes\": {\n      \"type\": \"array\",\n      \"description\": \"Negative feedback, concerns, or risks identified\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"overallSentiment\": {\n      \"type\": \"object\",\n      \"required\": [\"emoji\", \"reason\"],\n      \"properties\": {\n        \"emoji\": {\n          \"type\": \"string\",\n          \"enum\": [\"😀\", \"😐\", \"☹️\"],\n          \"description\": \"Sentiment indicator\"\n        },\n        \"reason\": {\n          \"type\": \"string\",\n          \"description\": \"Brief explanation for the sentiment rating\"\n        }\n      }\n    },\n    \"competitors\": {\n      \"oneOf\": [\n        {\n          \"type\": \"string\",\n          \"const\": \"None mentioned\"\n        },\n        {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"vendor\", \"product\", \"context\", \"stance\"],\n            \"properties\": {\n              \"vendor\": {\n                \"type\": \"string\",\n                \"description\": \"Name of the competitor or vendor\"\n              },\n              \"product\": {\n                \"type\": \"string\",\n                \"description\": \"Product or service mentioned\"\n              },\n              \"context\": {\n                \"type\": \"string\",\n                \"description\": \"Context in which it was mentioned\"\n              },\n              \"stance\": {\n                \"type\": \"string\",\n                \"description\": \"Client's stance or attitude toward the competitor\"\n              }\n            }\n          }\n        }\n      ]\n    },\n    \"clientFeedback\": {\n      \"type\": \"array\",\n      \"description\": \"Suggestions or feedback provided by the client\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"highlights\": {\n      \"oneOf\": [\n        {\n          \"type\": \"string\",\n          \"const\": \"None\"\n        },\n        {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n            \"description\": \"Key highlights or important points from the meeting\"\n          }\n        }\n      ]\n    }\n  }\n}\n```",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2272,
        816
      ],
      "id": "f58d4c85-3e83-4b3c-8697-bf7ebbbaa2e6",
      "name": "Structured Output Parser"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-env",
  "repo_owner": "munishgandhi",
  "repo_path": "backup/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-21T05:39:29.000Z",
  "versionId": "24b63855-f443-4858-a5b8-45850be8926f"
}