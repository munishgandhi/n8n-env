{
  "active": false,
  "connections": {
    "N00: Start": {
      "main": [
        [
          {
            "node": "N01: Input Validation & Environment Setup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N01: Input Validation & Environment Setup": {
      "main": [
        [
          {
            "node": "N02: Validation Success Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N02: Validation Success Check": {
      "main": [
        [
          {
            "node": "N03: Query Existing PlannerEmail",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "N09: Error Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N03: Query Existing PlannerEmail": {
      "main": [
        [
          {
            "node": "N04: Process Query Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N04: Process Query Results": {
      "main": [
        [
          {
            "node": "N05: Record Exists Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N05: Record Exists Check": {
      "main": [
        [
          {
            "node": "N08: Format Database Record",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "N05A: Execute PlannerFirm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N05A: Execute PlannerFirm": {
      "main": [
        [
          {
            "node": "N05B: Execute PlannerPerson",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N05B: Execute PlannerPerson": {
      "main": [
        [
          {
            "node": "N06: Create New PlannerEmail Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N06: Create New PlannerEmail Record": {
      "main": [
        [
          {
            "node": "N07: Query Created Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N07: Query Created Record": {
      "main": [
        [
          {
            "node": "N08: Format Database Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-22T12:58:03.934Z",
  "id": "4c1RPy0PYoxFCCxj",
  "isArchived": false,
  "meta": null,
  "name": "PlannerEmail: Create v20250729-025100",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "gmailId",
              "type": "any"
            },
            {
              "name": "fromEmail",
              "type": "any"
            },
            {
              "name": "subject",
              "type": "any"
            },
            {
              "name": "freshContent",
              "type": "any"
            },
            {
              "name": "threadId",
              "type": "any"
            },
            {
              "name": "gmailDate",
              "type": "any"
            },
            {
              "name": "backlogId",
              "type": "any"
            }
          ]
        }
      },
      "id": "125626fc-055d-4ba9-866f-c8e6c05937a5",
      "typeVersion": 1.1,
      "name": "N00: Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        1744,
        -672
      ]
    },
    {
      "parameters": {
        "jsCode": "// Node 2: Input Validation & Environment Setup\nconst input = $json;\nconsole.log('üîç Sub-workflow input received:', JSON.stringify(input, null, 2));\n\n// Validate required fields for PlannerEmail creation\nconst requiredFields = ['gmailId', 'fromEmail', 'subject', 'gmailDate'];\nconst missing = requiredFields.filter(field => !input[field]);\n\nif (missing.length > 0) {\n  console.error('‚ùå Missing required fields:', missing);\n  return {\n    valid: false,\n    error: `Missing required fields: ${missing.join(', ')}`,\n    details: \"All required fields must be provided for PlannerEmail creation\"\n  };\n}\n\n// Validate Gmail ID format (non-empty string)\nif (typeof input.gmailId !== 'string' || input.gmailId.trim() === '') {\n  console.error('‚ùå Invalid Gmail ID format:', input.gmailId);\n  return {\n    valid: false,\n    error: \"Invalid Gmail ID format\",\n    details: \"Gmail ID must be a non-empty string\"\n  };\n}\n\n// Validate email format\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nif (!emailRegex.test(input.fromEmail)) {\n  console.error('‚ùå Invalid email format:', input.fromEmail);\n  return {\n    valid: false,\n    error: \"Invalid email format\",\n    details: \"From Email must be a valid email address\"\n  };\n}\n\n// Normalize date format (accept both YYYY-MM-DD and timestamp formats)\nlet normalizedDate = input.gmailDate;\nif (typeof input.gmailDate === 'string') {\n  // If it's a timestamp format (contains T), extract just the date part\n  if (input.gmailDate.includes('T')) {\n    normalizedDate = input.gmailDate.split('T')[0];\n    console.log(`üìÖ Normalized timestamp ${input.gmailDate} to date ${normalizedDate}`);\n  }\n}\n\n// Validate normalized date format (YYYY-MM-DD)\nif (!/^\\d{4}-\\d{2}-\\d{2}$/.test(normalizedDate)) {\n  console.error('‚ùå Invalid date format after normalization:', normalizedDate);\n  return {\n    valid: false,\n    error: \"Invalid date format\",\n    details: \"Gmail Date must be in YYYY-MM-DD format or valid timestamp\"\n  };\n}\n\nconsole.log(`‚úÖ Valid sub-workflow input for Gmail ID: ${input.gmailId}`);\nreturn {\n  valid: true,\n  processedInput: {\n    gmailId: input.gmailId.trim(),\n    fromEmail: input.fromEmail.toLowerCase().trim(),\n    subject: input.subject || '',\n    freshContent: input.freshContent || '',\n    threadId: input.threadId || '',\n    gmailDate: normalizedDate,\n    backlogId: input.backlogId || ''\n  }\n};"
      },
      "id": "input-validation",
      "name": "N01: Input Validation & Environment Setup",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1968,
        -672
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "valid-check",
              "leftValue": "={{ $json.valid }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal",
                "rightType": "boolean"
              }
            },
            {
              "id": "d17daef6-c946-4a6d-8772-c1c9b3e5e1d7",
              "leftValue": "={{ $json.valid }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "validation-check",
      "name": "N02: Validation Success Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2192,
        -672
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "2231db9b-a441-8164-9226-eba95cc4e72c",
          "mode": "list",
          "cachedResultName": "vcdb.PlannerEmail.vn8n",
          "cachedResultUrl": "https://www.notion.so/2231db9ba44181649226eba95cc4e72c"
        },
        "filterType": "manual",
        "filters": {
          "conditions": [
            {
              "key": "Gmail ID|title",
              "condition": "equals",
              "titleValue": "={{ $json.processedInput.gmailId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "query-existing",
      "name": "N03: Query Existing PlannerEmail",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2416,
        -768
      ],
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Node 5: Process Query Results\nconst queryResults = $input.all();\nconst inputData = $('N01: Input Validation & Environment Setup').first().json.processedInput;\n\nconsole.log('üîç Duplicate check results:', queryResults.length, 'records found');\n\n// Extract domain from email address\nconst emailParts = inputData.fromEmail.split('@');\nconst firmDomain = emailParts[1] || '';\nconst personEmailAddress = inputData.fromEmail;\n\nconsole.log(`üìß Extracted domain: ${firmDomain} from email: ${personEmailAddress}`);\n\n// Extract only fresh content by removing quoted email chains\nfunction extractFreshContent(content) {\n  if (!content) return '';\n  \n  // Common patterns that indicate the start of quoted content\n  const patterns = [\n    // Pattern 1: \"On [Date] at [Time] [Name] <email> wrote:\" (handles line breaks)\n    /On\\s+\\w+,\\s+\\w+\\s+\\d+,\\s+\\d+\\s+at\\s+\\d+:\\d+\\s+(AM|PM)\\s+[^<]*<[\\s\\S]*?>\\s*wrote:/i,\n    \n    // Pattern 2: Gmail style with line break after email\n    /On\\s+\\w+,\\s+\\w+\\s+\\d+,\\s+\\d+\\s+at\\s+\\d+:\\d+\\s+(AM|PM)\\s+.*?<\\s*\\n.*?>\\s*wrote:/i,\n    \n    // Pattern 3: \"From: Name <email>\\nSent: Date\\nTo: Name <email>\\nSubject:\"\n    /From:\\s+.*?<.*?>\\s*\\n\\s*Sent:\\s+.*?\\n/i,\n    \n    // Pattern 4: Simple \"From: email\" patterns\n    /^From:\\s+.*?$/m,\n    \n    // Pattern 5: Forwarded message\n    /------\\s*Forwarded\\s+message\\s*------/i,\n    \n    // Pattern 6: Original message\n    /------\\s*Original\\s+message\\s*------/i,\n    \n    // Pattern 7: Reply separator lines\n    /^_{3,}$/m,\n    /^-{3,}$/m\n  ];\n  \n  let freshContent = content;\n  let earliestIndex = content.length;\n  \n  // Find the earliest occurrence of any pattern\n  for (const pattern of patterns) {\n    const match = content.match(pattern);\n    if (match && match.index < earliestIndex) {\n      earliestIndex = match.index;\n    }\n  }\n  \n  // Extract content before the earliest pattern\n  if (earliestIndex < content.length) {\n    freshContent = content.substring(0, earliestIndex).trim();\n  }\n  \n  console.log(`Original content length: ${content.length}, Fresh content length: ${freshContent.length}`);\n  return freshContent;\n}\n\n// Process the fresh content\nconst processedInputData = {\n  ...inputData,\n  freshContent: extractFreshContent(inputData.freshContent)\n};\n\n// Check if no results or empty result object\nif (queryResults.length === 0 || !queryResults[0].json || Object.keys(queryResults[0].json).length === 0 || !queryResults[0].json.id) {\n  console.log('‚úÖ No existing record found - will create new');\n  return {\n    recordExists: false,\n    existingRecord: null,\n    inputData: processedInputData,\n    firmDomain: firmDomain,\n    personEmailAddress: personEmailAddress,\n    backlogId: inputData.backlogId,\n    action: \"create_new\"\n  };\n}\n\nif (queryResults.length > 1) {\n  console.warn('‚ö†Ô∏è Multiple records found for Gmail ID:', inputData.gmailId);\n  // Use first record but log the issue\n}\n\nconst existingRecord = queryResults[0].json;\nconsole.log('‚ÑπÔ∏è Existing record found - will return existing');\nconsole.log('üìÑ Existing record ID:', existingRecord.id);\n\nreturn {\n  recordExists: true,\n  existingRecord: existingRecord,\n  inputData: processedInputData,\n  firmDomain: firmDomain,\n  personEmailAddress: personEmailAddress,\n  backlogId: inputData.backlogId,\n  action: \"found_existing\"\n};"
      },
      "id": "process-query",
      "name": "N04: Process Query Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2640,
        -768
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "record-exists-condition",
              "leftValue": "={{ $json.recordExists }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "898cdaad-1e00-4070-a407-46489762c8d2",
              "leftValue": "={{ $json.existingRecord.id }}",
              "rightValue": "found_existing",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "ignoreCase": false,
          "looseTypeValidation": false
        }
      },
      "id": "record-exists-check",
      "name": "N05: Record Exists Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2864,
        -768
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": "2231db9b-a441-8164-9226-eba95cc4e72c",
        "title": "={{ $('N04: Process Query Results').first().json.inputData.gmailId }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "From Email|email",
              "emailValue": "={{ $('N04: Process Query Results').first().json.inputData.fromEmail }}"
            },
            {
              "key": "Subject|rich_text",
              "textContent": "={{ $('N04: Process Query Results').first().json.inputData.subject }}"
            },
            {
              "key": "Thread ID|rich_text",
              "textContent": "={{ $('N04: Process Query Results').first().json.inputData.threadId }}"
            },
            {
              "key": "Gmail Date|date",
              "date": "={{ $('N04: Process Query Results').first().json.inputData.gmailDate }}",
              "timezone": "US/Eastern"
            },
            {
              "key": "Status|select",
              "selectValue": "pending"
            },
            {
              "key": "Fresh Content|rich_text",
              "textContent": "={{ $('N04: Process Query Results').first().json.inputData.freshContent.substring(0, 2000) }}"
            },
            {
              "key": "rel:PlannerFirm|relation",
              "relationValue": "={{ $('N05A: Execute PlannerFirm').first().json.PlannerFirm.id ? [$('N05A: Execute PlannerFirm').first().json.PlannerFirm.id] : [] }}"
            },
            {
              "key": "rel:PlannerPerson|relation",
              "relationValue": "={{ $('N05B: Execute PlannerPerson').first().json.PlannerPerson.id ? [$('N05B: Execute PlannerPerson').first().json.PlannerPerson.id] : [] }}"
            },
            {
              "key": "rel:Backlog|relation",
              "relationValue": "={{ $('N04: Process Query Results').first().json.backlogId ? [$('N04: Process Query Results').first().json.backlogId] : [] }}"
            }
          ]
        },
        "blockUi": {
          "blockValues": [
            {
              "textContent": "={{ $('N04: Process Query Results').first().json.inputData.freshContent.substring(0, 2000) }}"
            },
            {
              "textContent": "={{ $('N04: Process Query Results').first().json.inputData.freshContent.substring(2000, 4000) }}"
            },
            {
              "textContent": "={{ $('N04: Process Query Results').first().json.inputData.freshContent.substring(4000, 6000) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "create-new-record",
      "name": "N06: Create New PlannerEmail Record",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        3536,
        -696
      ],
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "2231db9b-a441-8164-9226-eba95cc4e72c",
          "mode": "list",
          "cachedResultName": "vcdb.PlannerEmail.vn8n",
          "cachedResultUrl": "https://www.notion.so/2231db9ba44181649226eba95cc4e72c"
        },
        "filterType": "manual",
        "filters": {
          "conditions": [
            {
              "key": "Gmail ID|title",
              "condition": "equals",
              "titleValue": "={{ $('N04: Process Query Results').first().json.inputData.gmailId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "query-created-record",
      "name": "N07: Query Created Record",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        3760,
        -696
      ],
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Node 8: Format Database Record Response\nconst input = $input.first().json;\nconst action = $('N04: Process Query Results').first().json.action;\n\nconsole.log('‚úÖ Formatting database record');\nconsole.log('üìÑ Input data:', JSON.stringify(input, null, 2));\n\n// Get firm data from N05A if available (only for new records)\nlet firmData = null;\nlet personData = null;\nif (action === 'create_new') {\n  try {\n    const firmResult = $('N05A: Execute PlannerFirm').first().json;\n    firmData = firmResult.PlannerFirm || null;\n    console.log('üè¢ Firm data received:', firmData);\n  } catch (e) {\n    console.log('‚ö†Ô∏è No firm data available');\n  }\n  \n  try {\n    const personResult = $('N05B: Execute PlannerPerson').first().json;\n    personData = personResult.PlannerPerson || null;\n    console.log('üë§ Person data received:', personData);\n  } catch (e) {\n    console.log('‚ö†Ô∏è No person data available');\n  }\n}\n\n// Check if this is coming from the existing record path or new record path\nlet recordData;\n\nif (action === 'found_existing') {\n  // For existing records, the data is already formatted from N04\n  const existingData = $('N04: Process Query Results').first().json.existingRecord;\n  \n  recordData = {\n    id: existingData.id,\n    url: existingData.url,\n    property_gmail_id: existingData.property_gmail_id || '',\n    property_from_email: existingData.property_from_email || '',\n    property_subject: existingData.property_subject || '',\n    property_fresh_content: existingData.property_fresh_content || '',\n    property_thread_id: existingData.property_thread_id || '',\n    property_gmail_date: existingData.property_gmail_date?.start || existingData.property_gmail_date || '',\n    property_status: existingData.property_status || 'pending',\n    // Relations are already in the right format\n    rel_backlog: existingData.property_rel_backlog?.[0] || null,\n    rel_planner_person: existingData.property_rel_planner_person?.[0] || null,\n    rel_planner_firm: existingData.property_rel_planner_firm?.[0] || null,\n    rel_email: existingData.property_rel_email?.[0] || null,\n    action: action,\n    created_time: existingData.property_created_time || existingData.created_time,\n    last_edited_time: existingData.property_last_edited_time || existingData.last_edited_time\n  };\n} else {\n  // For new records, check if we have input at all\n  if (!input || Object.keys(input).length === 0) {\n    // If no input, get the data from N07 directly\n    const n07Data = $('N07: Query Created Record').first().json;\n    recordData = {\n      id: n07Data.id,\n      url: n07Data.url,\n      property_gmail_id: n07Data.property_gmail_id || '',\n      property_from_email: n07Data.property_from_email || '',\n      property_subject: n07Data.property_subject || '',\n      property_fresh_content: n07Data.property_fresh_content || '',\n      property_thread_id: n07Data.property_thread_id || '',\n      property_gmail_date: n07Data.property_gmail_date?.start || n07Data.property_gmail_date || '',\n      property_status: n07Data.property_status || 'pending',\n      // Relations are already in the right format\n      rel_backlog: n07Data.property_rel_backlog?.[0] || null,\n      rel_planner_person: n07Data.property_rel_planner_person?.[0] || null,\n      rel_planner_firm: n07Data.property_rel_planner_firm?.[0] || null,\n      rel_email: n07Data.property_rel_email?.[0] || null,\n      action: 'created_new',\n      created_time: n07Data.property_created_time || n07Data.created_time,\n      last_edited_time: n07Data.property_last_edited_time || n07Data.last_edited_time\n    };\n  } else {\n    // If we have input, use it (data comes from N07 with properties at root)\n    recordData = {\n      id: input.id,\n      url: input.url,\n      property_gmail_id: input.property_gmail_id || '',\n      property_from_email: input.property_from_email || '',\n      property_subject: input.property_subject || '',\n      property_fresh_content: input.property_fresh_content || '',\n      property_thread_id: input.property_thread_id || '',\n      property_gmail_date: input.property_gmail_date?.start || input.property_gmail_date || '',\n      property_status: input.property_status || 'pending',\n      // Relations are already in the right format\n      rel_backlog: input.property_rel_backlog?.[0] || null,\n      rel_planner_person: input.property_rel_planner_person?.[0] || null,\n      rel_planner_firm: input.property_rel_planner_firm?.[0] || null,\n      rel_email: input.property_rel_email?.[0] || null,\n      action: 'created_new',\n      created_time: input.property_created_time || input.created_time,\n      last_edited_time: input.property_last_edited_time || input.last_edited_time\n    };\n  }\n}\n\n// Add execution and workflow information\nrecordData.childExecutionId = $execution.id;\nrecordData.childWorkflowId = $workflow.id;\nrecordData.childWorkflowName = $workflow.name;\n\n// Return in nested structure with database table name\nconst response = {\n  PlannerEmail: recordData\n};\n\n// Add firm data if available\nif (firmData) {\n  response.PlannerFirm = firmData;\n}\n\n// Add person data if available\nif (personData) {\n  response.PlannerPerson = personData;\n}\n\nconsole.log('‚úÖ Database record formatted successfully');\nreturn response;"
      },
      "id": "format-db-record",
      "name": "N08: Format Database Record",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3984,
        -768
      ]
    },
    {
      "parameters": {
        "jsCode": "// Node 9: Error Output\nconst validationResult = $input.first().json;\n\nconsole.error('‚ùå Sub-workflow error:', validationResult.error);\n\nreturn {\n  success: false,\n  error: validationResult.error,\n  details: validationResult.details,\n  action: \"error\",\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "error-output",
      "name": "N09: Error Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2416,
        -576
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "AdTfnAEHPvMzlETS",
          "mode": "list",
          "cachedResultName": "PlannerFirm: Create v20250726-171447"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "domain": "={{ $('N04: Process Query Results').first().json.firmDomain }}",
            "backlogId": "={{ $('N04: Process Query Results').first().json.backlogId }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "domain",
              "displayName": "domain",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "backlogId",
              "displayName": "backlogId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "id": "execute-plannerfirm",
      "name": "N05A: Execute PlannerFirm",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        3088,
        -696
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "6Noi3vqZOdQm1uOY",
          "mode": "list",
          "cachedResultName": "PlannerPerson: Create v20250726-171446"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "emailAddress": "={{ $('N04: Process Query Results').first().json.personEmailAddress }}",
            "plannerFirmId": "={{ $('N05A: Execute PlannerFirm').first().json.PlannerFirm.id }}",
            "backlogId": "={{ $('N04: Process Query Results').first().json.backlogId }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "emailAddress",
              "displayName": "emailAddress",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "plannerFirmId",
              "displayName": "plannerFirmId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "backlogId",
              "displayName": "backlogId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "id": "execute-plannerperson",
      "name": "N05B: Execute PlannerPerson",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        3312,
        -696
      ]
    }
  ],
  "pinData": {
    "N00: Start": [
      {
        "json": {
          "gmailId": "195c4a560fc46eca",
          "fromEmail": "mg@hy.ly",
          "subject": "Re: Reconnecting with GSV",
          "freshContent": "Hi Stephanie,\n\nThanks for getting in touch. I would love to connect but want to make sure\nyou think it's worth your time.  So, let me summarize where we are:\n\n   - We have *not taken any investments *so far, and given our cash\n   position, it's *unlikely that we will in this calendar year.*\n   - However, we are in the middle of an intense *reinvention *of the\n   company.\n   - Our ambition for 2025 / 2026 is to *move Multifamily from old,\n   fractured, CRM-centric bookkeeping to Data-Driven AI through our\n   Intelligence Fabric. *\n   - The intelligence fabric is a unique architecture that combines:\n      - *A Data Fabric *that creates a 360 degree view of the customers and\n      prospects from disparate systems, and then\n      - Activates them using an *AI Fabric* that delivers intelligent\n      experiences\n\nHere's a quick look at 2024:\n\n   - *43% ARR Growth:  *From $4.42m ARR at end of 2023 to $6.32m ARR at end\n   of 2024\n   - *69% Operating Income Growth: * $3.68M to $6.23m\n   - *541% Net Operating Profit Growth: * $0.32m to $1.76m\n\nFor 2025, we expect to be at $7M ARR by the end of Q1 2025, but there are\nsignificant challenges as we *name, frame and claim a new blue-ocean\ncategory; *move from a *single-product to a multi-product* company; and\nreach for *$10m and beyond *over the next year.\n\nGiven the above, if you would still like to meet, please schedule at your\nconvenience: https://calendly.com/mg-hyly/vc-25\n\nI look forward to connecting with you soon!\n\n\nWarm Regards,\n\n\nMunish\n\n--\n\nMunish Gandhi\n\nFounder & CEO, Hyly.AI\n\n*Changing how Multifamily Connects*\n\n571.274.1876 | LinkedIn <https://www.linkedin.com/in/mgandhi/> |\nhttps://hyly.ai <https://hyly.ai/journey-ai/>\n\nCut the Clutter: Subscribe to *AI Fabric for Multifamily*\n<https://www.linkedin.com/build-relation/newsletter-follow?entityUrn=7196126741965193216>\n\n\n\nOn Thu, Jan 9, 2025 at 12:39 PM Stephanie Schwarz <\nStephanie.Schwarz@greatersumventures.com> wrote:\n\n> Hi Munish,\n>\n>\n>\n> Happy New Year! I hope you had a great holiday season. We've been busy at\n> work with our assets in property management and I'd love to exchange a few\n> updates.\n>\n>\n>\n> Would you be available to meet later this month?\n>\n>\n>\n> Kindly,\n>\n>\n>\n> *Stephanie Schwarz *\n>\n> Senior Associate - Greater Sum Ventures <https://greatersumventures.com/>\n>\n> Let's Connect | Calendly <https://calendly.com/gsv-stephanie/30min>\n>\n> 865.378.8232\n>\n>\n>\n> [image: signature_1061439472] <http://www.greatersumventures.com/>\n>\n>\n>\n>\n>\n>\n>\n",
          "threadId": "1944c2651db324e4",
          "gmailDate": "2025-03-23T20:15:45.000Z",
          "backlogId": "2371db9b-a441-81f5-9d6e-d4e258bfa4f1"
        }
      }
    ]
  },
  "repo_name": "n8n-env",
  "repo_owner": "munishgandhi",
  "repo_path": "backup/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-29T06:51:00.000Z",
  "versionId": "478fa349-c552-4686-b314-98e17d692fe1"
}