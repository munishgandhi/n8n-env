{
  "active": false,
  "connections": {
    "N00: Start": {
      "main": [
        [
          {
            "node": "N01: Input Validation & Environment Setup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N01: Input Validation & Environment Setup": {
      "main": [
        [
          {
            "node": "N02: Validation Success Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N02: Validation Success Check": {
      "main": [
        [
          {
            "node": "N03: Query Existing PlannerFirm",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "N09: Error Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N03: Query Existing PlannerFirm": {
      "main": [
        [
          {
            "node": "N04: Process Query Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N04: Process Query Results": {
      "main": [
        [
          {
            "node": "N05: Record Exists Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N05: Record Exists Check": {
      "main": [
        [
          {
            "node": "N08: Format Database Record",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "N06: Create New PlannerFirm Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N06: Create New PlannerFirm Record": {
      "main": [
        [
          {
            "node": "N07: Query Created Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N07: Query Created Record": {
      "main": [
        [
          {
            "node": "N08: Format Database Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-22T15:34:35.621Z",
  "id": "AdTfnAEHPvMzlETS",
  "isArchived": false,
  "meta": null,
  "name": "PlannerFirm: Create v20250729-022547",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "domain",
              "type": "any"
            },
            {
              "name": "backlogId",
              "type": "any"
            }
          ]
        }
      },
      "id": "125626fc-055d-4ba9-866f-c8e6c05937a5",
      "typeVersion": 1.1,
      "name": "N00: Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        1740,
        -440
      ]
    },
    {
      "parameters": {
        "jsCode": "// Node 2: Input Validation & Environment Setup\nconst input = $json;\nconsole.log('üîç Sub-workflow input received:', JSON.stringify(input, null, 2));\n\n// Validate required field for PlannerFirm creation\nif (!input.domain) {\n  console.error('‚ùå Missing required field: domain');\n  return {\n    valid: false,\n    error: \"Missing required field: domain\",\n    details: \"Domain must be provided for PlannerFirm creation\"\n  };\n}\n\n// Validate domain format (basic check for valid domain)\nif (typeof input.domain !== 'string' || input.domain.trim() === '') {\n  console.error('‚ùå Invalid domain format:', input.domain);\n  return {\n    valid: false,\n    error: \"Invalid domain format\",\n    details: \"Domain must be a non-empty string\"\n  };\n}\n\n// Basic domain validation (contains at least one dot)\nif (!input.domain.includes('.')) {\n  console.error('‚ùå Invalid domain format:', input.domain);\n  return {\n    valid: false,\n    error: \"Invalid domain format\",\n    details: \"Domain must contain at least one dot\"\n  };\n}\n\nconsole.log(`‚úÖ Valid sub-workflow input for domain: ${input.domain}`);\nreturn {\n  valid: true,\n  processedInput: {\n    domain: input.domain.toLowerCase().trim(),\n    backlogId: input.backlogId || ''\n  }\n};"
      },
      "id": "input-validation",
      "name": "N01: Input Validation & Environment Setup",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1960,
        -440
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "valid-check",
              "leftValue": "={{ $json.valid }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal",
                "rightType": "boolean"
              }
            },
            {
              "id": "d17daef6-c946-4a6d-8772-c1c9b3e5e1d7",
              "leftValue": "={{ $json.valid }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "validation-check",
      "name": "N02: Validation Success Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2180,
        -440
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "2231db9b-a441-8128-8c94-d6f0fceb8644",
          "mode": "list",
          "cachedResultName": "vcdb.PlannerFirm.vn8n",
          "cachedResultUrl": "https://www.notion.so/2231db9ba4418128-8c94d6f0fceb8644"
        },
        "filterType": "manual",
        "filters": {
          "conditions": [
            {
              "key": "Domain|title",
              "condition": "equals",
              "titleValue": "={{ $json.processedInput.domain }}"
            }
          ]
        },
        "options": {}
      },
      "id": "query-existing",
      "name": "N03: Query Existing PlannerFirm",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2400,
        -580
      ],
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Node 5: Process Query Results\nconst queryResults = $input.all();\nconst inputData = $('N01: Input Validation & Environment Setup').first().json.processedInput;\n\nconsole.log('üîç Duplicate check results:', queryResults.length, 'records found');\n\n// Check if no results or empty result object\nif (queryResults.length === 0 || !queryResults[0].json || Object.keys(queryResults[0].json).length === 0 || !queryResults[0].json.id) {\n  console.log('‚úÖ No existing record found - will create new');\n  return {\n    recordExists: false,\n    existingRecord: null,\n    inputData: inputData,\n    backlogId: inputData.backlogId,\n    action: \"create_new\"\n  };\n}\n\nif (queryResults.length > 1) {\n  console.warn('‚ö†Ô∏è Multiple records found for domain:', inputData.domain);\n  // Use first record but log the issue\n}\n\nconst existingRecord = queryResults[0].json;\nconsole.log('‚ÑπÔ∏è Existing record found - will return existing');\nconsole.log('üìÑ Existing record ID:', existingRecord.id);\n\nreturn {\n  recordExists: true,\n  existingRecord: existingRecord,\n  inputData: inputData,\n  backlogId: inputData.backlogId,\n  action: \"found_existing\"\n};"
      },
      "id": "process-query",
      "name": "N04: Process Query Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2620,
        -540
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "record-exists-condition",
              "leftValue": "={{ $json.recordExists }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "898cdaad-1e00-4070-a407-46489762c8d2",
              "leftValue": "={{ $json.existingRecord.id }}",
              "rightValue": "found_existing",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "ignoreCase": false,
          "looseTypeValidation": false
        }
      },
      "id": "record-exists-check",
      "name": "N05: Record Exists Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2840,
        -540
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Node 8: Format Database Record Response\nconst input = $json;\nconst action = $('N04: Process Query Results').first().json.action;\n\nconsole.log('‚úÖ Formatting database record');\nconsole.log('üìÑ Input data:', JSON.stringify(input, null, 2));\n\n// Check if this is coming from the existing record path or new record path\nlet recordData;\n\nif (action === 'found_existing') {\n  // For existing records, the data is already formatted from N04\n  const existingData = $('N04: Process Query Results').first().json.existingRecord;\n  \n  recordData = {\n    id: existingData.id,\n    url: existingData.url,\n    property_domain: existingData.property_domain || '',\n    property_status: existingData.property_status || 'pending',\n    // Relations are already in the right format\n    rel_backlog: existingData.property_rel_backlog?.[0] || null,\n    rel_planner_email: existingData.property_rel_planner_email?.[0] || null,\n    rel_planner_person: existingData.property_rel_planner_person?.[0] || null,\n    rel_firm: existingData.property_rel_firm?.[0] || null,\n    action: action,\n    created_time: existingData.property_created_time || existingData.created_time,\n    last_edited_time: existingData.property_last_edited_time || existingData.last_edited_time\n  };\n} else {\n  // For new records, check if we have input at all\n  if (!input || Object.keys(input).length === 0) {\n    // If no input, get the data from N07 directly\n    const n07Data = $('N07: Query Created Record').first().json;\n    recordData = {\n      id: n07Data.id,\n      url: n07Data.url,\n      property_domain: n07Data.property_domain || '',\n      property_status: n07Data.property_status || 'pending',\n      // Relations are already in the right format\n      rel_backlog: n07Data.property_rel_backlog?.[0] || null,\n      rel_planner_email: n07Data.property_rel_planner_email?.[0] || null,\n      rel_planner_person: n07Data.property_rel_planner_person?.[0] || null,\n      rel_firm: n07Data.property_rel_firm?.[0] || null,\n      action: 'created_new',\n      created_time: n07Data.property_created_time || n07Data.created_time,\n      last_edited_time: n07Data.property_last_edited_time || n07Data.last_edited_time\n    };\n  } else {\n    // If we have input, use it (data comes from N07 with properties at root)\n    recordData = {\n      id: input.id,\n      url: input.url,\n      property_domain: input.property_domain || '',\n      property_status: input.property_status || 'pending',\n      // Relations are already in the right format\n      rel_backlog: input.property_rel_backlog?.[0] || null,\n      rel_planner_email: input.property_rel_planner_email?.[0] || null,\n      rel_planner_person: input.property_rel_planner_person?.[0] || null,\n      rel_firm: input.property_rel_firm?.[0] || null,\n      action: 'created_new',\n      created_time: input.property_created_time || input.created_time,\n      last_edited_time: input.property_last_edited_time || input.last_edited_time\n    };\n  }\n}\n\n// Add execution and workflow information\nrecordData.childExecutionId = $execution.id;\nrecordData.childWorkflowId = $workflow.id;\nrecordData.childWorkflowName = $workflow.name;\n\n// Return in nested structure with database table name\nconst response = {\n  PlannerFirm: recordData\n};\n\nconsole.log('‚úÖ Database record formatted successfully');\nreturn response;"
      },
      "id": "format-db-record",
      "name": "N08: Format Database Record",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3500,
        -540
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": "2231db9b-a441-8128-8c94-d6f0fceb8644",
        "title": "={{ $('N04: Process Query Results').first().json.inputData.domain }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Status|select",
              "selectValue": "pending"
            },
            {
              "key": "rel:Backlog|relation",
              "relationValue": "={{ $('N04: Process Query Results').first().json.backlogId ? [$('N04: Process Query Results').first().json.backlogId] : [] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "create-new-record",
      "name": "N06: Create New PlannerFirm Record",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        3060,
        -440
      ],
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Node 8: Error Output\nconst validationResult = $input.first().json;\n\nconsole.error('‚ùå Sub-workflow error:', validationResult.error);\n\nreturn {\n  success: false,\n  error: validationResult.error,\n  details: validationResult.details,\n  action: \"error\",\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "error-output",
      "name": "N09: Error Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        -340
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "2231db9b-a441-8128-8c94-d6f0fceb8644",
          "mode": "list",
          "cachedResultName": "vcdb.PlannerFirm.vn8n",
          "cachedResultUrl": "https://www.notion.so/2231db9ba4418128-8c94d6f0fceb8644"
        },
        "filterType": "manual",
        "filters": {
          "conditions": [
            {
              "key": "Domain|title",
              "condition": "equals",
              "titleValue": "={{ $('N04: Process Query Results').first().json.inputData.domain }}"
            }
          ]
        },
        "options": {}
      },
      "id": "query-created-record",
      "name": "N07: Query Created Record",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        3280,
        -440
      ],
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    }
  ],
  "pinData": {
    "N00: Start": [
      {
        "json": {
          "domain": "hy.ly",
          "backlogId": "2371db9b-a441-81f5-9d6e-d4e258bfa4f1"
        }
      }
    ]
  },
  "repo_name": "n8n-env",
  "repo_owner": "munishgandhi",
  "repo_path": "backup/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-31T05:13:35.000Z",
  "versionId": "dbc0dfce-d21b-499b-afbf-72ddf57818ac"
}