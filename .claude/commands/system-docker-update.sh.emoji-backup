#!/bin/bash
# n8n Environment Docker Update Script
# Usage: ./.claude/commands/system-docker-update.sh [--hard]
# Last Edit: 20250822

set -e  # Exit on any error

PROJECT_ROOT="$(git rev-parse --show-toplevel)"
cd "$PROJECT_ROOT"  # Ensure we're in project root

# Default to soft update
UPDATE_MODE="soft"

# Help function
show_help() {
    echo "Usage: $0 [options]"
    echo
    echo "Updates Docker containers in the n8n Environment."
    echo
    echo "Modes:"
    echo "  Default (soft): Pull images and restart only changed containers"
    echo "    - Preserves container IDs (ngrok references stay intact)"
    echo "    - Faster update process"
    echo "    - Use for routine updates"
    echo
    echo "  Hard mode: Complete down/pull/up cycle"
    echo "    - Recreates all containers (new IDs)"
    echo "    - Cleans up networks and orphaned containers"
    echo "    - Fixes Docker Desktop display issues"
    echo "    - Use for troubleshooting or major changes"
    echo
    echo "Options:"
    echo "  --hard        Perform hard update (complete recreation)"
    echo "  -h, --help    Show this help message"
    echo
    echo "Examples:"
    echo "  $0            # Soft update (default)"
    echo "  $0 --hard     # Hard update with full recreation"
}

# Parse arguments
for arg in "$@"; do
    if [ -z "$arg" ]; then
        continue  # Skip empty arguments
    fi
    case $arg in
        --hard)
            UPDATE_MODE="hard"
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $arg"
            show_help
            exit 1
            ;;
    esac
done

# Navigate to project root
cd "$PROJECT_ROOT"

# Initialize logging
echo "üöÄ n8n Environment Docker Update (${UPDATE_MODE^^} mode)..."
echo "Time: $(date)"
echo "Location: $(pwd)"
echo

# Function to get image ID for a service
get_image_id() {
    local service=$1
    docker inspect $(docker-compose -f "$PROJECT_ROOT/docker/docker-compose.yml" ps -q $service) --format='{{.Image}}' 2>/dev/null || echo ""
}

# Function to check if image needs update
check_image_update() {
    local image=$1
    local old_id=$(docker images --format "{{.ID}}" "$image" 2>/dev/null || echo "")
    echo "$old_id"
}

# Show current status
echo ""
echo "üîß === CURRENT CONTAINER STATUS ==="
docker-compose -f "$PROJECT_ROOT/docker/docker-compose.yml" ps

if [ "$UPDATE_MODE" = "hard" ]; then
    # HARD UPDATE: Complete recreation
    echo ""
    echo "üîß === HARD UPDATE: STOPPING ALL CONTAINERS ==="
    echo "üõë Stopping all services..."
    if docker-compose -f "$PROJECT_ROOT/docker/docker-compose.yml" down; then
        echo "‚úÖ All containers stopped successfully"
        STOP_STATUS="‚úÖ"
    else
        echo "‚ùå Failed to stop containers"
        exit 1
    fi
    
    echo ""
    echo "üîß === PULLING LATEST IMAGES ==="
    echo "üì¶ Checking for updates..."
    
    # List images that will be pulled
    echo "Images to check:"
    echo "  - redis:7-alpine"
    echo "  - coleifer/sqlite-web"
    echo "  - ghcr.io/open-webui/open-webui:main"
    echo "  - ghcr.io/czlonkowski/n8n-mcp:latest"
    echo "  - n8n (local build)"
    echo ""
    
    if docker-compose -f "$PROJECT_ROOT/docker/docker-compose.yml" pull; then
        echo "‚úÖ All images pulled successfully"
        PULL_STATUS="‚úÖ"
    else
        echo "‚ùå Failed to pull images"
        exit 1
    fi
    
    echo ""
    echo "üîß === REBUILDING N8N EXTENSIONS ==="
    echo "üîÑ Building custom extensions (YouTube node, etc.)..."
    if cd "$PROJECT_ROOT/docker/n8n-extensions" && npm run build; then
        echo "‚úÖ Extensions built successfully"
        EXTENSION_STATUS="‚úÖ"
        cd "$PROJECT_ROOT"
    else
        echo "‚ùå Extension build failed"
        EXTENSION_STATUS="‚ùå"
        cd "$PROJECT_ROOT"
        exit 1
    fi
    
    echo ""
    echo "üîß === STARTING ALL CONTAINERS (NEW) ==="
    echo "üöÄ Starting all services..."
    if docker-compose -f "$PROJECT_ROOT/docker/docker-compose.yml" up -d; then
        echo "‚úÖ All containers started successfully"
        START_STATUS="‚úÖ"
    else
        echo "‚ùå Failed to start containers"
        exit 1
    fi
    
    # Summary for hard update
    echo ""
    echo "üìä === HARD UPDATE SUMMARY ==="
    echo "Stop containers: $STOP_STATUS"
    echo "Pull images: $PULL_STATUS"
    echo "Build extensions: $EXTENSION_STATUS"
    echo "Start containers: $START_STATUS"
    echo ""
    echo "‚ö†Ô∏è  Note: Container IDs have changed. You may need to:"
    echo "   - Reconfigure ngrok tunnels in Docker Desktop"
    echo "   - Update any external references to container IDs"
    
else
    # SOFT UPDATE: Pull and restart only if needed
    echo ""
    echo "üîß === SOFT UPDATE: CHECKING FOR UPDATES ==="
    
    # Store current image IDs
    echo "üì∏ Capturing current image states..."
    declare -A BEFORE_IDS
    BEFORE_IDS[redis]=$(docker images --format "{{.ID}}" redis:7-alpine 2>/dev/null || echo "none")
    BEFORE_IDS[sqlite-web]=$(docker images --format "{{.ID}}" coleifer/sqlite-web 2>/dev/null || echo "none")
    BEFORE_IDS[open-webui]=$(docker images --format "{{.ID}}" ghcr.io/open-webui/open-webui:main 2>/dev/null || echo "none")
    BEFORE_IDS[n8n-mcp]=$(docker images --format "{{.ID}}" ghcr.io/czlonkowski/n8n-mcp:latest 2>/dev/null || echo "none")
    
    echo ""
    echo "üì¶ Pulling latest images (containers keep running)..."
    echo ""
    echo "Checking for updates:"
    echo "  - redis:7-alpine"
    echo "  - coleifer/sqlite-web" 
    echo "  - ghcr.io/open-webui/open-webui:main (6.8GB)"
    echo "  - ghcr.io/czlonkowski/n8n-mcp:latest"
    echo ""
    
    if docker-compose -f "$PROJECT_ROOT/docker/docker-compose.yml" pull 2>&1 | tee /tmp/docker-pull.log | grep -E "Pull complete|Already exists|Downloading|Extracting" | tail -20; then
        echo ""
        echo "‚úÖ Image pull completed"
        PULL_STATUS="‚úÖ"
    else
        echo "‚ùå Failed to pull images"
        exit 1
    fi
    
    # Check which images actually changed
    echo ""
    echo "üîç Checking which images were updated..."
    declare -A AFTER_IDS
    AFTER_IDS[redis]=$(docker images --format "{{.ID}}" redis:7-alpine 2>/dev/null || echo "none")
    AFTER_IDS[sqlite-web]=$(docker images --format "{{.ID}}" coleifer/sqlite-web 2>/dev/null || echo "none")
    AFTER_IDS[open-webui]=$(docker images --format "{{.ID}}" ghcr.io/open-webui/open-webui:main 2>/dev/null || echo "none")
    AFTER_IDS[n8n-mcp]=$(docker images --format "{{.ID}}" ghcr.io/czlonkowski/n8n-mcp:latest 2>/dev/null || echo "none")
    
    # List changed images
    CHANGED_SERVICES=""
    echo "Image update status:"
    for service in redis sqlite-web open-webui n8n-mcp; do
        if [ "${BEFORE_IDS[$service]}" != "${AFTER_IDS[$service]}" ]; then
            echo "  ‚úÖ $service: Updated (${BEFORE_IDS[$service]:0:12} ‚Üí ${AFTER_IDS[$service]:0:12})"
            CHANGED_SERVICES="$CHANGED_SERVICES $service"
        else
            echo "  ‚è≠Ô∏è  $service: No changes (${AFTER_IDS[$service]:0:12})"
        fi
    done
    
    echo ""
    echo "üîß === REBUILDING N8N EXTENSIONS ==="
    echo "üîÑ Building custom extensions (YouTube node, etc.)..."
    if cd "$PROJECT_ROOT/docker/n8n-extensions" && npm run build; then
        echo "‚úÖ Extensions built successfully"
        EXTENSION_STATUS="‚úÖ"
        cd "$PROJECT_ROOT"
        # n8n needs restart if extensions changed
        CHANGED_SERVICES="$CHANGED_SERVICES n8n"
    else
        echo "‚ùå Extension build failed"
        EXTENSION_STATUS="‚ùå"
        cd "$PROJECT_ROOT"
        exit 1
    fi
    
    echo ""
    echo "üîß === APPLYING UPDATES ==="
    
    if [ -z "$CHANGED_SERVICES" ]; then
        echo "‚ÑπÔ∏è  No images were updated. Skipping container restart."
        UPDATE_STATUS="‚è≠Ô∏è"
    else
        echo "üîÑ Restarting containers with updated images:$CHANGED_SERVICES"
        echo ""
        
        # Only recreate containers with changed images
        if docker-compose -f "$PROJECT_ROOT/docker/docker-compose.yml" up -d --no-deps $CHANGED_SERVICES; then
            echo ""
            echo "‚úÖ Updated containers restarted successfully"
            UPDATE_STATUS="‚úÖ"
        else
            echo "‚ùå Failed to restart containers"
            exit 1
        fi
    fi
    
    # Summary for soft update
    echo ""
    echo "üìä === SOFT UPDATE SUMMARY ==="
    echo "Pull images: $PULL_STATUS"
    echo "Build extensions: $EXTENSION_STATUS"
    echo "Update containers: $UPDATE_STATUS"
    
    if [ -n "$CHANGED_SERVICES" ]; then
        echo ""
        echo "Updated services:$CHANGED_SERVICES"
    else
        echo ""
        echo "‚ÑπÔ∏è  All images were already up to date"
    fi
    
    echo ""
    echo "‚úÖ Soft update completed!"
    echo "   - Container IDs preserved (ngrok tunnels intact)"
    if [ -n "$CHANGED_SERVICES" ]; then
        echo "   - Only changed services were restarted"
    else
        echo "   - No services needed restart"
    fi
fi

# Show final status
echo ""
echo "üîß === UPDATED CONTAINER STATUS ==="
docker-compose -f "$PROJECT_ROOT/docker/docker-compose.yml" ps

echo ""
echo "‚úÖ Docker update completed successfully!"

# Mode-specific final message
if [ "$UPDATE_MODE" = "hard" ]; then
    echo "Hard update performed - all containers recreated with new IDs."
else
    echo "Soft update performed - container IDs preserved where possible."
fi