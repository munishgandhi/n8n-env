#!/bin/bash
# n8n Environment System Checks Script
# Usage: ./.claude/commands/system-checks.sh
# Last Edit: 20250822

set -e  # Exit on any error

PROJECT_ROOT="$(git rev-parse --show-toplevel)"
cd "$PROJECT_ROOT"  # Ensure we're in project root

# Get script directory for modules
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MODULES_DIR="$SCRIPT_DIR/modules"

# Source shared functions
source "$MODULES_DIR/shared-functions.sh"

# Global variables to store check results
ENV_STATUS="FAIL"
ENV_DETAILS=""
DOCKER_STATUS="FAIL"
DOCKER_DETAILS=""
NETWORK_STATUS="FAIL"
NETWORK_DETAILS=""
N8N_STATUS="FAIL"
N8N_DETAILS=""
SQLITE_STATUS="FAIL"
SQLITE_DETAILS=""
MCP_STATUS="FAIL"
MCP_DETAILS=""
OLLAMA_STATUS="FAIL"
OLLAMA_DETAILS=""

# Environment loading function
check_environment() {
    ENV_DETAILS=""
    
    if [ -f ".env" ]; then
        source .env
        ENV_DETAILS="  - Environment variables loaded"$'\n'
        
        # Check critical environment variables
        if [ -n "$NOTION_API_KEY" ]; then
            ENV_DETAILS="${ENV_DETAILS}  - API Keys: Notion (${#NOTION_API_KEY} chars)"
        fi
        
        if [ -n "$N8N_API_KEY" ]; then
            ENV_DETAILS="${ENV_DETAILS}, n8n (${#N8N_API_KEY} chars) configured"$'\n'
        else
            ENV_STATUS="FAIL"
            return
        fi
        
        # Check database IDs
        local db_count=0
        for db_var in BACKLOG_DB_ID PLANNER_EMAIL_DB_ID PLANNER_PERSON_DB_ID PLANNER_FIRM_DB_ID PEOPLE_DB_ID FIRMS_DB_ID EMAIL_DB_ID; do
            if [ -n "${!db_var}" ]; then
                db_count=$((db_count + 1))
            fi
        done
        ENV_DETAILS="${ENV_DETAILS}  - Database IDs: $db_count/7 configured"
        
        if [ $db_count -eq 7 ] && [ -n "$N8N_API_KEY" ]; then
            ENV_STATUS="PASS"
        fi
    else
        ENV_DETAILS="  - .env file not found"
    fi
}

# Docker Infrastructure check
check_docker() {
    DOCKER_DETAILS=""
    
    if ! docker info >/dev/null 2>&1; then
        DOCKER_DETAILS="  - Docker daemon not running"
        return
    fi
    
    local containers=("n8n" "n8n-mcp" "sqlite-web-viewer" "n8n_redis" "open-webui")
    local running_containers=0
    local container_info=""
    
    for container in "${containers[@]}"; do
        local status=$(docker ps -a --format "{{.Names}}|{{.Status}}" | grep "^${container}|" | cut -d'|' -f2)
        if [ -n "$status" ]; then
            if echo "$status" | grep -q "Up"; then
                running_containers=$((running_containers + 1))
                # Extract just the uptime part
                local uptime=$(echo "$status" | sed 's/Up //' | sed 's/ (healthy)//' | sed 's/ (unhealthy)//')
                if echo "$status" | grep -q "(healthy)"; then
                    container_info="${container_info}  - $container: Up $uptime (healthy)"$'\n'
                elif echo "$status" | grep -q "(unhealthy)"; then
                    container_info="${container_info}  - $container: Up $uptime (unhealthy)"$'\n'
                else
                    container_info="${container_info}  - $container: Up $uptime"$'\n'
                fi
            else
                # Container exists but is not running
                container_info="${container_info}  - $container: $status"$'\n'
            fi
        else
            container_info="${container_info}  - $container: Not found"$'\n'
        fi
    done
    
    DOCKER_DETAILS="  - Containers: $running_containers/${#containers[@]} running"$'\n'"${container_info%$'\n'}"
    
    if [ $running_containers -eq ${#containers[@]} ]; then
        DOCKER_STATUS="PASS"
    else
        DOCKER_STATUS="FAIL"
    fi
}

# Network Services check
check_network() {
    NETWORK_DETAILS=""
    local ports_ok=0
    local port_info=""
    
    # Check external ports
    local ports=("5678:n8n" "8080:sqlite-viewer" "3000:open-webui")
    
    for port_service in "${ports[@]}"; do
        local port=$(echo "$port_service" | cut -d: -f1)
        local service=$(echo "$port_service" | cut -d: -f2)
        
        if nc -z localhost $port 2>/dev/null || netstat -tuln 2>/dev/null | grep -q ":$port " || ss -tuln 2>/dev/null | grep -q ":$port "; then
            ports_ok=$((ports_ok + 1))
        fi
    done
    
    port_info="  - 5678 (n8n), 8080 (sqlite-viewer), 3000 (open-webui)"
    
    # Check Redis
    local redis_ok="failed"
    if docker exec n8n_redis redis-cli ping 2>/dev/null | grep -q PONG; then
        redis_ok="operational"
    fi
    
    NETWORK_DETAILS="  - Ports Available: $ports_ok/${#ports[@]} external ports listening"$'\n'
    NETWORK_DETAILS="${NETWORK_DETAILS}${port_info}: "
    
    if [ $ports_ok -eq ${#ports[@]} ]; then
        NETWORK_DETAILS="${NETWORK_DETAILS}All listening"$'\n'
        NETWORK_STATUS="PASS"
    else
        NETWORK_DETAILS="${NETWORK_DETAILS}Some ports not available"$'\n'
        NETWORK_STATUS="FAIL"
    fi
    
    NETWORK_DETAILS="${NETWORK_DETAILS}  - Internal Services: Redis $redis_ok"
}

# n8n Core System check
check_n8n() {
    N8N_DETAILS=""
    
    # Check API health
    local api_status="Failed"
    if curl -s -f http://localhost:5678/healthz >/dev/null 2>&1; then
        api_status="Operational"
    fi
    N8N_DETAILS="  - API Health: $api_status"$'\n'
    
    # Get workflow stats from API
    if [ -n "$N8N_API_KEY" ]; then
        local workflows_json=$(curl -s -H "X-N8N-API-KEY: $N8N_API_KEY" http://localhost:5678/api/v1/workflows 2>/dev/null || echo "{}")
        local total_workflows=$(echo "$workflows_json" | grep -o '"id"' | wc -l)
        local active_workflows=$(echo "$workflows_json" | grep -o '"active":true' | wc -l)
        
        N8N_DETAILS="${N8N_DETAILS}  - Workflows: $total_workflows total, $active_workflows active"$'\n'
        
        # Get executions count from SQLite
        local exec_count=$(docker exec sqlite-web-viewer sqlite3 /data/database.sqlite "SELECT COUNT(*) FROM execution_entity;" 2>/dev/null || echo "0")
        N8N_DETAILS="${N8N_DETAILS}  - Executions: $exec_count total"$'\n'
        
        # Get credentials count
        local creds_json=$(curl -s -H "X-N8N-API-KEY: $N8N_API_KEY" http://localhost:5678/api/v1/credentials 2>/dev/null || echo "{}")
        local creds_count=$(echo "$creds_json" | grep -o '"id"' | wc -l)
        N8N_DETAILS="${N8N_DETAILS}  - Credentials: $creds_count configured"
        
        if [ "$api_status" = "Operational" ] && [ $total_workflows -gt 0 ]; then
            N8N_STATUS="PASS"
        fi
    else
        N8N_DETAILS="${N8N_DETAILS}  - Cannot check workflows: N8N_API_KEY not configured"
    fi
}

# SQLite Database check
check_sqlite() {
    SQLITE_DETAILS=""
    
    # Get database size
    local db_size=$(docker exec sqlite-web-viewer du -h /data/database.sqlite 2>/dev/null | cut -f1 || echo "Unknown")
    SQLITE_DETAILS="  - Size: $db_size"$'\n'
    
    # Check integrity
    local integrity="Failed"
    if docker exec sqlite-web-viewer sqlite3 /data/database.sqlite "PRAGMA integrity_check;" 2>/dev/null | grep -q "ok"; then
        integrity="Verified"
        SQLITE_STATUS="PASS"
    fi
    SQLITE_DETAILS="${SQLITE_DETAILS}  - Integrity: $integrity"$'\n'
    
    # Check access
    local access="Not accessible"
    if docker exec sqlite-web-viewer sqlite3 /data/database.sqlite "SELECT 1;" >/dev/null 2>&1; then
        access="Container accessible"
    fi
    SQLITE_DETAILS="${SQLITE_DETAILS}  - Access: $access"
}

# n8n-MCP Integration check
check_mcp() {
    MCP_DETAILS=""
    
    # Check if MCP container is running
    local mcp_running=0
    if docker ps --format "{{.Names}}" | grep -q "^n8n-mcp$"; then
        mcp_running=1
    fi
    
    if [ "$mcp_running" -eq 1 ]; then
        # MCP runs in STDIO mode now, check container health
        local container_health=$(docker inspect n8n-mcp --format='{{.State.Health.Status}}' 2>/dev/null || echo "unknown")
        
        if [ "$container_health" = "healthy" ]; then
            MCP_STATUS="PASS"
            MCP_DETAILS="  - Container: Running (healthy)"$'\n'
            MCP_DETAILS="${MCP_DETAILS}  - Mode: STDIO (Claude Code integration)"$'\n'
            MCP_DETAILS="${MCP_DETAILS}  - Status: Available for Claude Code"
        else
            MCP_STATUS="FAIL"
            MCP_DETAILS="  - Container: Running (health: $container_health)"$'\n'
            MCP_DETAILS="${MCP_DETAILS}  - Mode: STDIO"$'\n'
            MCP_DETAILS="${MCP_DETAILS}  - Status: Check container logs for issues"
        fi
    else
        MCP_STATUS="FAIL"
        MCP_DETAILS="  - Container: Not running"$'\n'
        MCP_DETAILS="${MCP_DETAILS}  - Communication: Unavailable"$'\n'
        MCP_DETAILS="${MCP_DETAILS}  - Status: Start container with docker-compose up -d n8n-mcp"
    fi
}

# Ollama LLM Service check
check_ollama() {
    OLLAMA_DETAILS=""
    
    # Check if Ollama API is accessible
    local ollama_api="Not accessible"
    local models_list=""
    
    if curl -s -f http://localhost:11434/api/tags 2>/dev/null | grep -q "models"; then
        ollama_api="localhost:11434 accessible"
        
        # Get model list
        models_list=$(curl -s http://localhost:11434/api/tags 2>/dev/null | grep -o '"name":"[^"]*"' | cut -d'"' -f4 | paste -sd', ' -)
        if [ -n "$models_list" ]; then
            local model_count=$(echo "$models_list" | tr ',' '\n' | wc -l)
            OLLAMA_DETAILS="  - Platform: Windows host via PowerShell/WSL"$'\n'
            OLLAMA_DETAILS="${OLLAMA_DETAILS}  - API: $ollama_api"$'\n'
            OLLAMA_DETAILS="${OLLAMA_DETAILS}  - Models: $model_count available ($models_list)"$'\n'
            
            # Test generation
            local gen_test="Failed"
            if curl -s -X POST http://localhost:11434/api/generate -d '{"model":"'$(echo $models_list | cut -d',' -f1)'","prompt":"Hi","stream":false}' 2>/dev/null | grep -q "response"; then
                gen_test="Functional"
            fi
            OLLAMA_DETAILS="${OLLAMA_DETAILS}  - Generation: $gen_test"
            
            if [ "$gen_test" = "Functional" ]; then
                OLLAMA_STATUS="PASS"
            fi
        else
            OLLAMA_DETAILS="  - API: Accessible but no models found"$'\n'
            OLLAMA_DETAILS="${OLLAMA_DETAILS}  - Status: Install models with 'ollama pull <model>'"
        fi
    else
        OLLAMA_DETAILS="  - API: Not accessible at localhost:11434"$'\n'
        OLLAMA_DETAILS="${OLLAMA_DETAILS}  - Status: Ensure Ollama is running on Windows host"
    fi
}

# Summary function
print_summary() {
    echo "Current System Status:"
    echo ""
    
    # Environment Configuration
    if [ "$ENV_STATUS" = "PASS" ]; then
        echo "✓ Environment Configuration: PASS"
    else
        echo "✗ Environment Configuration: FAIL"
    fi
    printf "%s\n" "$ENV_DETAILS"
    echo ""
    
    # Docker Infrastructure
    if [ "$DOCKER_STATUS" = "PASS" ]; then
        echo "✓ Docker Infrastructure: PASS"
    else
        echo "✗ Docker Infrastructure: FAIL"
    fi
    printf "%s\n" "$DOCKER_DETAILS"
    echo ""
    
    # Network Services
    if [ "$NETWORK_STATUS" = "PASS" ]; then
        echo "✓ Network Services: PASS"
    else
        echo "✗ Network Services: FAIL"
    fi
    printf "%s\n" "$NETWORK_DETAILS"
    echo ""
    
    # n8n Core System
    if [ "$N8N_STATUS" = "PASS" ]; then
        echo "✓ n8n Core System: PASS"
    else
        echo "✗ n8n Core System: FAIL"
    fi
    printf "%s\n" "$N8N_DETAILS"
    echo ""
    
    # SQLite Database
    if [ "$SQLITE_STATUS" = "PASS" ]; then
        echo "✓ SQLite Database: PASS"
    else
        echo "✗ SQLite Database: FAIL"
    fi
    printf "%s\n" "$SQLITE_DETAILS"
    echo ""
    
    # n8n-MCP Integration
    if [ "$MCP_STATUS" = "PASS" ]; then
        echo "✓ n8n-MCP Integration: PASS"
    else
        echo "✗ n8n-MCP Integration: FAIL"
    fi
    printf "%s\n" "$MCP_DETAILS"
    echo ""
    
    # Ollama LLM Service
    if [ "$OLLAMA_STATUS" = "PASS" ]; then
        echo "✓ Ollama LLM Service: PASS"
    else
        echo "✗ Ollama LLM Service: FAIL"
    fi
    printf "%s\n" "$OLLAMA_DETAILS"
    echo ""
    
    # Count overall status
    local total_checks=7
    local passed_checks=0
    for status in "$ENV_STATUS" "$DOCKER_STATUS" "$NETWORK_STATUS" "$N8N_STATUS" "$SQLITE_STATUS" "$MCP_STATUS" "$OLLAMA_STATUS"; do
        if [ "$status" = "PASS" ]; then
            passed_checks=$((passed_checks + 1))
        fi
    done
    
    local success_rate=$((passed_checks * 100 / total_checks))
    
    # Overall System Health
    echo "Overall System Health"
    echo "- Test Results: $passed_checks/$total_checks passed ($success_rate% success rate)"
    
    if [ $passed_checks -eq $total_checks ]; then
        echo "- System Status: ALL SYSTEMS OPERATIONAL"
        echo "- Readiness: Ready for development"
    else
        echo "- System Status: ISSUES DETECTED"
        echo "- Failed Tests: $((total_checks - passed_checks))"
    fi
}

# Main execution
main() {
    # Change to project root if we're not there
    if [ ! -f ".env" ] && [ -f "../../.env" ]; then
        cd ../..
    fi
    
    # Run all checks
    check_environment
    check_docker
    check_network
    check_n8n
    check_sqlite
    check_mcp
    check_ollama
    
    # Print summary
    print_summary
    
    # Exit with appropriate code
    local failed_checks=0
    for status in "$ENV_STATUS" "$DOCKER_STATUS" "$NETWORK_STATUS" "$N8N_STATUS" "$SQLITE_STATUS" "$MCP_STATUS" "$OLLAMA_STATUS"; do
        if [ "$status" != "PASS" ]; then
            failed_checks=$((failed_checks + 1))
        fi
    done
    
    if [ $failed_checks -eq 0 ]; then
        exit 0
    else
        exit 1
    fi
}

# Run main function
main "$@"