{"data":[{"createdAt":"2025-07-18T23:11:21.258Z","updatedAt":"2025-07-31T03:21:24.000Z","id":"3soZAbHUm8vgIkXp","name":"Process Workflow v20250730-232124","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"query","type":"object"}]}},"id":"subworkflow-trigger","name":"N01: Subworkflow Start","type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[208,120]},{"parameters":{"jsCode":"// ALGORITHM: Determine Next Date to Process\n// Handle different input formats from n8n Notion node\nlet entries = [];\n\n// Try different ways to access the data\nif (Array.isArray($json)) {\n  entries = $json;\n} else if ($json.results && Array.isArray($json.results)) {\n  entries = $json.results;\n} else if ($input && $input.all) {\n  entries = $input.all().map(item => item.json);\n} else {\n  entries = [$json].filter(item => item && typeof item === 'object');\n}\n\nconsole.log(`📊 Found ${entries.length} backlog entries`);\nif (entries.length > 0) {\n  console.log(`📋 First entry structure:`, JSON.stringify(entries[0], null, 2));\n}\n\n// Helper function: get current Eastern time date\nfunction getEasternDate() {\n  const now = new Date();\n  // Eastern time is UTC-5 (standard) or UTC-4 (daylight), use UTC-4 for July\n  const easternOffset = -4 * 60; // minutes\n  const utc = now.getTime() + (now.getTimezoneOffset() * 60000);\n  const easternTime = new Date(utc + (easternOffset * 60000));\n  return easternTime;\n}\n\n// Helper function: format date to YYYY-MM-DD\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n// Helper function: get yesterday's date in Eastern time\nfunction getYesterday() {\n  const easternNow = getEasternDate();\n  const yesterday = new Date(easternNow);\n  yesterday.setDate(yesterday.getDate() - 1);\n  return formatDate(yesterday);\n}\n\n// Helper function: add days to date\nfunction addDays(dateStr, days) {\n  if (!dateStr || typeof dateStr !== 'string') {\n    console.log(`⚠️ Invalid date string: ${dateStr}`);\n    return null;\n  }\n  const date = new Date(dateStr + 'T12:00:00'); // Use noon to avoid timezone issues\n  if (isNaN(date.getTime())) {\n    console.log(`⚠️ Cannot parse date: ${dateStr}`);\n    return null;\n  }\n  date.setDate(date.getDate() + days);\n  return formatDate(date);\n}\n\n// Helper function: check if entry has valid data\nfunction isValidEntry(entry) {\n  if (!entry || typeof entry !== 'object') return false;\n  \n  // Check if it has any meaningful properties (specifically Gmail Date or Status)\n  const hasGmailDate = entry.property_gmail_date || \n                      entry.properties?.[\"Gmail Date\"] || \n                      entry.name;\n  const hasStatus = entry.property_status || \n                   entry.properties?.Status;\n  \n  return !!(hasGmailDate || hasStatus || entry.id);\n}\n\n// Filter out empty objects and invalid entries\nconst validEntries = entries.filter(isValidEntry);\n\nconsole.log(`📊 Valid entries after filtering: ${validEntries.length}`);\n\n// Log current Eastern time for debugging\nconst easternNow = getEasternDate();\nconst today = formatDate(easternNow);\nconst yesterday = getYesterday();\nconsole.log(`📅 Current Eastern time: ${easternNow.toISOString()}`);\nconsole.log(`📅 Today (Eastern): ${today}, Yesterday (Eastern): ${yesterday}`);\n\n// STEP 1: If no valid entries exist, return yesterday\nif (validEntries.length === 0) {\n  console.log(`✅ No valid entries found, creating entry for yesterday: ${yesterday}`);\n  return [{\n    json: {\n      action: 'create',\n      nextDate: yesterday,\n      reason: 'No entries exist - starting with yesterday'\n    }\n  }];\n}\n\n// STEP 2: Check ALL entries for incomplete status (CRITICAL FIX)\n// If ANY entry is not complete, block creation\nconst incompleteEntries = validEntries.filter(entry => {\n  const status = entry.property_status || \n                entry.properties?.Status?.select?.name;\n  const date = entry.property_gmail_date || \n              entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n              entry.name;\n  \n  console.log(`📋 Entry ${date}: status = ${status}`);\n  return status && status !== 'complete';\n});\n\nif (incompleteEntries.length > 0) {\n  const incompleteInfo = incompleteEntries.map(entry => {\n    const status = entry.property_status || \n                  entry.properties?.Status?.select?.name;\n    const date = entry.property_gmail_date || \n                entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n                entry.name;\n    return `${date}(${status})`;\n  }).join(', ');\n  \n  console.log(`⚠️  Found ${incompleteEntries.length} incomplete entries: ${incompleteInfo}`);\n  return [{\n    json: {\n      action: 'warning',\n      message: `Cannot create new entries - ${incompleteEntries.length} entries are not complete: ${incompleteInfo}`,\n      incompleteCount: incompleteEntries.length,\n      incompleteEntries: incompleteInfo\n    }\n  }];\n}\n\n// STEP 3: All entries are complete - proceed with date logic\nconsole.log(`✅ All entries are complete - proceeding with date logic`);\n\n// Get latest entry for date calculation\nconst latestEntry = validEntries[0];\nconst latestDate = latestEntry.property_gmail_date || \n                  latestEntry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n                  latestEntry.name;\n\nconsole.log(`📋 Latest complete entry: ${latestDate}`);\n\n// STEP 4: Find earliest missing date (gap finding)\n// Get all dates and sort them\nconst allDates = validEntries\n  .map(entry => {\n    return entry.property_gmail_date || \n           entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n           entry.name;\n  })\n  .filter(date => date && typeof date === 'string' && date.match(/^\\d{4}-\\d{2}-\\d{2}$/))\n  .sort();\n\nconsole.log(`📅 All valid dates: ${allDates.join(', ')}`);\n\n// Find the first gap\nfor (let i = 0; i < allDates.length - 1; i++) {\n  const currentDate = allDates[i];\n  const nextDate = allDates[i + 1];\n  \n  const expectedNext = addDays(currentDate, 1);\n  if (!expectedNext) continue;\n  \n  if (expectedNext !== nextDate) {\n    console.log(`🔍 Found gap: ${currentDate} -> ${nextDate}, missing: ${expectedNext}`);\n    return [{\n      json: {\n        action: 'create',\n        nextDate: expectedNext,\n        reason: `Found gap between ${currentDate} and ${nextDate}`\n      }\n    }];\n  }\n}\n\n// STEP 5: No gaps found, create entry for day before oldest (with existence check)\nconst oldestDate = allDates[allDates.length - 1]; // Since sorted ascending, last is oldest\nlet candidate = addDays(oldestDate, -1);\nif (!candidate) {\n  console.log(`❌ Cannot calculate day before oldest: ${oldestDate}`);\n  return [{\n    json: {\n      action: 'create',\n      nextDate: yesterday,\n      reason: 'Date calculation error - using yesterday'\n    }\n  }];\n}\n\n// Keep going back until we find a date that doesn't exist\nwhile (candidate && allDates.includes(candidate) && candidate >= '2020-01-01') {\n  console.log(`📋 Date ${candidate} already exists, trying day before`);\n  candidate = addDays(candidate, -1);\n}\n\n// Never create today or future dates\nconst nextDate = candidate > yesterday ? yesterday : candidate;\n\nconsole.log(`📆 No gaps found. Oldest: ${oldestDate}, candidate: ${candidate}, yesterday: ${yesterday}`);\nconsole.log(`✅ Creating entry for: ${nextDate}`);\n\nreturn [{\n  json: {\n    action: 'create',\n    nextDate: nextDate,\n    reason: `No gaps found, creating entry for earliest missing date before ${oldestDate}`\n  }\n}];"},"id":"determine-next-date","name":"N03: Determine Next Date Algorithm","type":"n8n-nodes-base.code","typeVersion":2,"position":[656,120]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"action_is_create","leftValue":"={{$json.action}}","rightValue":"create","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"id":"check-action","name":"N04: Create vs Warning","type":"n8n-nodes-base.if","typeVersion":2,"position":[880,120]},{"parameters":{"resource":"databasePage","databaseId":{"__rl":true,"value":"2231db9b-a441-8178-8957-f88a30b0cdba","mode":"list","cachedResultName":"vcdb.Backlog.vn8n","cachedResultUrl":"https://www.notion.so/2231db9ba44181788957f88a30b0cdba"},"title":"={{ $json.nextDate }}","simple":false,"propertiesUi":{"propertyValues":[{"key":"Date Started|date","date":"={{ $now }}","timezone":"US/Eastern"},{"key":"Status|select","selectValue":"start"}]},"options":{}},"id":"create-backlog-entry","name":"N05: Create New Backlog Entry","type":"n8n-nodes-base.notion","typeVersion":2,"position":[1104,48],"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"2231db9b-a441-8178-8957-f88a30b0cdba","mode":"list","cachedResultName":"vcdb.Backlog.vn8n","cachedResultUrl":"https://www.notion.so/2231db9ba44181788957f88a30b0cdba"},"options":{"sort":{"sortValue":[{"key":"Gmail Date|title","direction":"descending"}]}}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[432,120],"id":"d62dc73a-6fdc-4450-b128-d6cb6d8c3fc5","name":"N02: Query Backlog Database","alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// Extract backlog details and build Gmail query\nconst backlogEntry = $json;\nconst algorithmResult = $('N03: Determine Next Date Algorithm').first().json;\n\n// Get the date from algorithm result\nconst dateStr = algorithmResult.nextDate; // Format: YYYY-MM-DD\n\n// Parse date components\nconst [year, month, day] = dateStr.split('-');\nconst formattedDate = `${year}/${month}/${day}`;\n\n// Calculate next day for 'before' parameter\nconst dateObj = new Date(year, month - 1, day); // month is 0-indexed\nconst nextDay = new Date(dateObj);\nnextDay.setDate(dateObj.getDate() + 1);\n\nconst afterDate = formattedDate;\nconst beforeDate = `${nextDay.getFullYear()}/${String(nextDay.getMonth() + 1).padStart(2, '0')}/${String(nextDay.getDate()).padStart(2, '0')}`;\n\n// Build Gmail query with folder filter\nconst gmailQuery = `after:${afterDate} before:${beforeDate} in:\"--Watch/VC\"`;\n\nconsole.log(`📅 Backlog entry created for: ${dateStr}`);\nconsole.log(`📧 Gmail query: ${gmailQuery}`);\n\nreturn [{\n  json: {\n    backlogId: backlogEntry.id,\n    backlogDate: dateStr,\n    backlogUrl: backlogEntry.url,\n    gmailQuery: gmailQuery,\n    formattedDate: formattedDate\n  }\n}];"},"id":"extract-backlog-details","name":"N06: Extract Backlog Details & Build Query","type":"n8n-nodes-base.code","typeVersion":2,"position":[1328,48]},{"parameters":{"operation":"getAll","limit":100,"filters":{"q":"={{ $json.gmailQuery }}"}},"id":"search-gmail-messages","name":"N07: Search Gmail Messages","type":"n8n-nodes-base.gmail","typeVersion":2,"position":[1552,48],"retryOnFail":true,"maxTries":3,"waitBetweenTries":2000,"alwaysOutputData":true,"webhookId":"e28ed83d-c45d-409e-b456-b054044a4220","credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}},"onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Process Gmail results and handle errors/empty results\nconst gmailMessages = $('N07: Search Gmail Messages').all();\nconst backlogDetails = $('N06: Extract Backlog Details & Build Query').first().json;\n\n// Handle Gmail API errors\nif (gmailMessages.length === 1 && gmailMessages[0].json.error) {\n  const error = gmailMessages[0].json.error;\n  console.error('❌ Gmail API error:', error);\n  \n  // Return empty array to trigger no emails path\n  return [];\n}\n\n// Check for empty results - FIXED to handle empty JSON objects\nif (!gmailMessages || gmailMessages.length === 0 || \n    (gmailMessages.length === 1 && !gmailMessages[0].json.id) ||\n    (gmailMessages.length === 1 && Object.keys(gmailMessages[0].json).length === 0)) {\n  console.log('ℹ️ No messages found for the specified date');\n  // Return empty array to trigger no emails path\n  return [];\n}\n\n// Process and format messages\nconsole.log(`📧 Processing ${gmailMessages.length} Gmail messages`);\n\n// Add backlogId to each message for subworkflow\nconst processedMessages = gmailMessages.map(item => {\n  const msg = item.json;\n  return {\n    messageId: msg.id,\n    threadId: msg.threadId,\n    from: msg.From || 'Unknown',\n    subject: msg.Subject || 'No Subject',\n    backlogId: backlogDetails.backlogId\n  };\n});\n\nreturn processedMessages.map(msg => ({ json: msg }));"},"id":"process-gmail-results","name":"N08: Process Gmail Results","type":"n8n-nodes-base.code","typeVersion":2,"position":[1776,48],"alwaysOutputData":true},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"has-messages","leftValue":"={{ $input.all().filter(item => item.json.messageId).length }}","rightValue":0,"operator":{"type":"number","operation":"gt"}}],"combinator":"and"},"options":{}},"id":"check-has-messages","name":"N09: Check Has Messages","type":"n8n-nodes-base.if","typeVersion":2,"position":[2000,48]},{"parameters":{"workflowId":{"__rl":true,"value":"7f3OziDCCYtWwM4W","mode":"list","cachedResultName":"Backlog2Planners v20250729-024811"},"workflowInputs":{"mappingMode":"defineBelow","value":{"query":{"id":"={{ $json.messageId }}","backlogId":"={{ $json.backlogId }}"}},"schema":[{"id":"query","displayName":"query","required":true,"defaultMatch":false,"display":true,"type":"object","canBeUsedToMatch":true}]},"mode":"each","options":{}},"id":"execute-backlog2planners","name":"N10: Execute Backlog2Planners","type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2224,-48]},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{ $('N06: Extract Backlog Details & Build Query').first().json.backlogId }}","mode":"id","__regex":"^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"},"simple":false,"propertiesUi":{"propertyValues":[{"key":"Status|select","selectValue":"complete"}]},"options":{}},"id":"update-backlog-status","name":"N12: Update Backlog Status","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2448,-48],"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// Handle case where no Gmail messages found\nconst backlogDetails = $('N06: Extract Backlog Details & Build Query').first().json;\n\nconsole.log(`⚠️ No Gmail messages found for date: ${backlogDetails.backlogDate}`);\nconsole.log(`📧 Query used: ${backlogDetails.gmailQuery}`);\n\n// Still mark backlog as complete since we checked the date\nreturn [{\n  json: {\n    success: false,\n    action: 'no_emails_found',\n    backlogId: backlogDetails.backlogId,\n    backlogDate: backlogDetails.backlogDate,\n    message: 'No emails found in --Watch/VC folder for this date',\n    shouldUpdateStatus: true\n  }\n}];"},"id":"handle-no-gmail","name":"N11: Handle No Gmail Messages","type":"n8n-nodes-base.code","typeVersion":2,"position":[2224,144]},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{ $('N06: Extract Backlog Details & Build Query').first().json.backlogId }}","mode":"id","__regex":"^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"},"simple":false,"propertiesUi":{"propertyValues":[{"key":"Status|select","selectValue":"complete"}]},"options":{}},"id":"update-backlog-no-emails","name":"N13: Update Backlog Status (No Emails)","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2448,144],"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// Compile final result based on execution path\nlet algorithmResult = null;\nlet backlogDetails = null;\n\n// Try to get algorithm result\ntry {\n  algorithmResult = $('N03: Determine Next Date Algorithm').first().json;\n} catch (e) {\n  console.log('Could not get algorithm result');\n}\n\n// Try to get backlog details\ntry {\n  backlogDetails = $('N06: Extract Backlog Details & Build Query').first().json;\n} catch (e) {\n  console.log('Could not get backlog details');\n}\n\n// Check which path we came from\nlet processedMessages = [];\nlet executionResults = [];\nlet cameFromNoEmailPath = false;\nlet cameFromWarningPath = false;\nlet gmailError = null;\n\n// Check if we came from warning path (N02 false branch)\ntry {\n  const prevNode = $input.first().json;\n  if (prevNode && prevNode.action === 'warning') {\n    cameFromWarningPath = true;\n  }\n} catch (e) {\n  // Not from warning path\n}\n\n// Check if Gmail had an error\ntry {\n  const gmailData = $('N07: Search Gmail Messages').first();\n  if (gmailData.error) {\n    gmailError = gmailData.error;\n  }\n} catch (e) {\n  // No Gmail execution or error\n}\n\n// Try to get data from the Gmail processing path\nif (!cameFromWarningPath && !gmailError) {\n  try {\n    const n08Data = $('N08: Process Gmail Results');\n    if (n08Data && n08Data.all) {\n      processedMessages = n08Data.all();\n    }\n  } catch (e) {\n    // N08 didn't execute - we came from the no emails path\n    cameFromNoEmailPath = true;\n  }\n\n  try {\n    const n10Data = $('N10: Execute Backlog2Planners');\n    if (n10Data && n10Data.all) {\n      executionResults = n10Data.all();\n    }\n  } catch (e) {\n    // N10 didn't execute - confirming no emails path\n    cameFromNoEmailPath = true;\n  }\n}\n\n// If we came from no email path, check if we have the no email handler data\nif (cameFromNoEmailPath) {\n  try {\n    const noEmailData = $('N11: Handle No Gmail Messages').first().json;\n    console.log(`📧 No emails found for date: ${noEmailData.backlogDate}`);\n  } catch (e) {\n    console.log(`📧 No emails were processed`);\n  }\n}\n\n// Build result based on execution path\nlet result;\n\nif (cameFromWarningPath) {\n  // Warning path - incomplete entries exist\n  const warningData = $input.first().json;\n  result = {\n    success: false,\n    action: 'warning',\n    message: warningData.message,\n    details: warningData.details,\n    timestamp: new Date().toISOString()\n  };\n  console.log(`⚠️ Workflow Warning: ${result.message}`);\n} else if (gmailError) {\n  // Gmail error path\n  result = {\n    success: false,\n    action: 'gmail_error',\n    createdDate: algorithmResult?.nextDate,\n    reason: algorithmResult?.reason,\n    backlogEntryId: backlogDetails?.backlogId,\n    error: gmailError.message || 'Gmail search failed',\n    timestamp: new Date().toISOString()\n  };\n  console.log(`❌ Gmail Error: ${result.error}`);\n} else {\n  // Normal completion path\n  result = {\n    success: true,\n    action: 'completed',\n    createdDate: algorithmResult.nextDate,\n    reason: algorithmResult.reason,\n    backlogEntryId: backlogDetails.backlogId,\n    gmailMessagesProcessed: processedMessages.length,\n    plannerRecordsCreated: {\n      emails: executionResults.length,\n      persons: executionResults.filter(r => r.json && r.json.PlannerPerson).length,\n      firms: executionResults.filter(r => r.json && r.json.PlannerFirm).length\n    },\n    noEmailsFound: cameFromNoEmailPath,\n    timestamp: new Date().toISOString()\n  };\n  \n  console.log(`✅ Backlog Creator Success: Created and processed entry for ${result.createdDate}`);\n  console.log(`📝 Reason: ${result.reason}`);\n  console.log(`🆔 Entry ID: ${result.backlogEntryId}`);\n  console.log(`📧 Gmail messages processed: ${result.gmailMessagesProcessed}`);\n  if (result.noEmailsFound) {\n    console.log(`📭 No emails found for this date - backlog entry marked as complete`);\n  }\n}\n\nreturn [{ json: result }];"},"id":"final-success-result","name":"N14: Final Success Result","type":"n8n-nodes-base.code","typeVersion":2,"position":[2672,144]}],"connections":{"N03: Determine Next Date Algorithm":{"main":[[{"node":"N04: Create vs Warning","type":"main","index":0}]]},"N05: Create New Backlog Entry":{"main":[[{"node":"N06: Extract Backlog Details & Build Query","type":"main","index":0}]]},"N04: Create vs Warning":{"main":[[{"node":"N05: Create New Backlog Entry","type":"main","index":0}],[{"node":"N14: Final Success Result","type":"main","index":0}]]},"N08: Process Gmail Results":{"main":[[{"node":"N09: Check Has Messages","type":"main","index":0}]]},"N09: Check Has Messages":{"main":[[{"node":"N10: Execute Backlog2Planners","type":"main","index":0}],[{"node":"N11: Handle No Gmail Messages","type":"main","index":0}]]},"N13: Update Backlog Status (No Emails)":{"main":[[{"node":"N14: Final Success Result","type":"main","index":0}]]},"N07: Search Gmail Messages":{"main":[[{"node":"N08: Process Gmail Results","type":"main","index":0}]]},"N11: Handle No Gmail Messages":{"main":[[{"node":"N13: Update Backlog Status (No Emails)","type":"main","index":0}]]},"N10: Execute Backlog2Planners":{"main":[[{"node":"N12: Update Backlog Status","type":"main","index":0}]]},"N06: Extract Backlog Details & Build Query":{"main":[[{"node":"N07: Search Gmail Messages","type":"main","index":0}]]},"N12: Update Backlog Status":{"main":[[{"node":"N14: Final Success Result","type":"main","index":0}]]},"N02: Query Backlog Database":{"main":[[{"node":"N03: Determine Next Date Algorithm","type":"main","index":0}]]},"N01: Subworkflow Start":{"main":[[{"node":"N02: Query Backlog Database","type":"main","index":0}]]}},"settings":{},"staticData":null,"meta":null,"pinData":{"N01: Subworkflow Start":[{"json":{}}]},"versionId":"e484b1f7-4d89-44ac-bb1d-d1e9030f82db","triggerCount":0,"tags":[]},{"createdAt":"2025-07-18T23:13:10.372Z","updatedAt":"2025-07-18T23:42:09.124Z","id":"4GQI5xQd1GIerhDU","name":"Gmail Thread Expansion Prototype v20250718-191310","active":true,"isArchived":false,"nodes":[{"parameters":{"path":"gmail-thread-expansion","options":{}},"name":"Webhook Trigger","type":"n8n-nodes-base.webhook","typeVersion":2,"position":[200,320],"id":"webhook-trigger","webhookId":"1c0a5da1-72ac-4999-8515-be36db7145ff"},{"parameters":{"resource":"thread","operation":"get","threadId":"191d7a8250639508","options":{}},"name":"Get Gmail Thread","type":"n8n-nodes-base.gmail","typeVersion":2,"position":[420,220],"id":"get-gmail-thread","webhookId":"ecdfc137-8924-4a7e-898e-9f415fef3c33","credentials":{"gmailOAuth2":"pxtxj61wdCzGXITa"}},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[200,120],"id":"4cf2bc90-83fc-48fd-9278-29f3bee323fe","name":"When clicking ‘Execute workflow’"}],"connections":{"Webhook Trigger":{"main":[[{"node":"Get Gmail Thread","type":"main","index":0}]]},"When clicking ‘Execute workflow’":{"main":[[{"node":"Get Gmail Thread","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true,"saveExecutionProgress":true},"staticData":null,"meta":null,"pinData":null,"versionId":"94ca5a47-2303-4ca0-ba4f-8f5aec39bb21","triggerCount":1,"tags":[]},{"createdAt":"2025-07-22T12:58:03.934Z","updatedAt":"2025-07-29T06:51:00.000Z","id":"4c1RPy0PYoxFCCxj","name":"PlannerEmail: Create v20250729-025100","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"gmailId","type":"any"},{"name":"fromEmail","type":"any"},{"name":"subject","type":"any"},{"name":"freshContent","type":"any"},{"name":"threadId","type":"any"},{"name":"gmailDate","type":"any"},{"name":"backlogId","type":"any"}]}},"id":"125626fc-055d-4ba9-866f-c8e6c05937a5","typeVersion":1.1,"name":"N00: Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[1744,-672]},{"parameters":{"jsCode":"// Node 2: Input Validation & Environment Setup\nconst input = $json;\nconsole.log('🔍 Sub-workflow input received:', JSON.stringify(input, null, 2));\n\n// Validate required fields for PlannerEmail creation\nconst requiredFields = ['gmailId', 'fromEmail', 'subject', 'gmailDate'];\nconst missing = requiredFields.filter(field => !input[field]);\n\nif (missing.length > 0) {\n  console.error('❌ Missing required fields:', missing);\n  return {\n    valid: false,\n    error: `Missing required fields: ${missing.join(', ')}`,\n    details: \"All required fields must be provided for PlannerEmail creation\"\n  };\n}\n\n// Validate Gmail ID format (non-empty string)\nif (typeof input.gmailId !== 'string' || input.gmailId.trim() === '') {\n  console.error('❌ Invalid Gmail ID format:', input.gmailId);\n  return {\n    valid: false,\n    error: \"Invalid Gmail ID format\",\n    details: \"Gmail ID must be a non-empty string\"\n  };\n}\n\n// Validate email format\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nif (!emailRegex.test(input.fromEmail)) {\n  console.error('❌ Invalid email format:', input.fromEmail);\n  return {\n    valid: false,\n    error: \"Invalid email format\",\n    details: \"From Email must be a valid email address\"\n  };\n}\n\n// Normalize date format (accept both YYYY-MM-DD and timestamp formats)\nlet normalizedDate = input.gmailDate;\nif (typeof input.gmailDate === 'string') {\n  // If it's a timestamp format (contains T), extract just the date part\n  if (input.gmailDate.includes('T')) {\n    normalizedDate = input.gmailDate.split('T')[0];\n    console.log(`📅 Normalized timestamp ${input.gmailDate} to date ${normalizedDate}`);\n  }\n}\n\n// Validate normalized date format (YYYY-MM-DD)\nif (!/^\\d{4}-\\d{2}-\\d{2}$/.test(normalizedDate)) {\n  console.error('❌ Invalid date format after normalization:', normalizedDate);\n  return {\n    valid: false,\n    error: \"Invalid date format\",\n    details: \"Gmail Date must be in YYYY-MM-DD format or valid timestamp\"\n  };\n}\n\nconsole.log(`✅ Valid sub-workflow input for Gmail ID: ${input.gmailId}`);\nreturn {\n  valid: true,\n  processedInput: {\n    gmailId: input.gmailId.trim(),\n    fromEmail: input.fromEmail.toLowerCase().trim(),\n    subject: input.subject || '',\n    freshContent: input.freshContent || '',\n    threadId: input.threadId || '',\n    gmailDate: normalizedDate,\n    backlogId: input.backlogId || ''\n  }\n};"},"id":"input-validation","name":"N01: Input Validation & Environment Setup","type":"n8n-nodes-base.code","typeVersion":2,"position":[1968,-672]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"valid-check","leftValue":"={{ $json.valid }}","rightValue":true,"operator":{"type":"boolean","operation":"equal","rightType":"boolean"}},{"id":"d17daef6-c946-4a6d-8772-c1c9b3e5e1d7","leftValue":"={{ $json.valid }}","rightValue":"true","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"or"},"options":{}},"id":"validation-check","name":"N02: Validation Success Check","type":"n8n-nodes-base.if","typeVersion":2,"position":[2192,-672]},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"2231db9b-a441-8164-9226-eba95cc4e72c","mode":"list","cachedResultName":"vcdb.PlannerEmail.vn8n","cachedResultUrl":"https://www.notion.so/2231db9ba44181649226eba95cc4e72c"},"filterType":"manual","filters":{"conditions":[{"key":"Gmail ID|title","condition":"equals","titleValue":"={{ $json.processedInput.gmailId }}"}]},"options":{}},"id":"query-existing","name":"N03: Query Existing PlannerEmail","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2416,-768],"alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// Node 5: Process Query Results\nconst queryResults = $input.all();\nconst inputData = $('N01: Input Validation & Environment Setup').first().json.processedInput;\n\nconsole.log('🔍 Duplicate check results:', queryResults.length, 'records found');\n\n// Extract domain from email address\nconst emailParts = inputData.fromEmail.split('@');\nconst firmDomain = emailParts[1] || '';\nconst personEmailAddress = inputData.fromEmail;\n\nconsole.log(`📧 Extracted domain: ${firmDomain} from email: ${personEmailAddress}`);\n\n// Extract only fresh content by removing quoted email chains\nfunction extractFreshContent(content) {\n  if (!content) return '';\n  \n  // Common patterns that indicate the start of quoted content\n  const patterns = [\n    // Pattern 1: \"On [Date] at [Time] [Name] <email> wrote:\" (handles line breaks)\n    /On\\s+\\w+,\\s+\\w+\\s+\\d+,\\s+\\d+\\s+at\\s+\\d+:\\d+\\s+(AM|PM)\\s+[^<]*<[\\s\\S]*?>\\s*wrote:/i,\n    \n    // Pattern 2: Gmail style with line break after email\n    /On\\s+\\w+,\\s+\\w+\\s+\\d+,\\s+\\d+\\s+at\\s+\\d+:\\d+\\s+(AM|PM)\\s+.*?<\\s*\\n.*?>\\s*wrote:/i,\n    \n    // Pattern 3: \"From: Name <email>\\nSent: Date\\nTo: Name <email>\\nSubject:\"\n    /From:\\s+.*?<.*?>\\s*\\n\\s*Sent:\\s+.*?\\n/i,\n    \n    // Pattern 4: Simple \"From: email\" patterns\n    /^From:\\s+.*?$/m,\n    \n    // Pattern 5: Forwarded message\n    /------\\s*Forwarded\\s+message\\s*------/i,\n    \n    // Pattern 6: Original message\n    /------\\s*Original\\s+message\\s*------/i,\n    \n    // Pattern 7: Reply separator lines\n    /^_{3,}$/m,\n    /^-{3,}$/m\n  ];\n  \n  let freshContent = content;\n  let earliestIndex = content.length;\n  \n  // Find the earliest occurrence of any pattern\n  for (const pattern of patterns) {\n    const match = content.match(pattern);\n    if (match && match.index < earliestIndex) {\n      earliestIndex = match.index;\n    }\n  }\n  \n  // Extract content before the earliest pattern\n  if (earliestIndex < content.length) {\n    freshContent = content.substring(0, earliestIndex).trim();\n  }\n  \n  console.log(`Original content length: ${content.length}, Fresh content length: ${freshContent.length}`);\n  return freshContent;\n}\n\n// Process the fresh content\nconst processedInputData = {\n  ...inputData,\n  freshContent: extractFreshContent(inputData.freshContent)\n};\n\n// Check if no results or empty result object\nif (queryResults.length === 0 || !queryResults[0].json || Object.keys(queryResults[0].json).length === 0 || !queryResults[0].json.id) {\n  console.log('✅ No existing record found - will create new');\n  return {\n    recordExists: false,\n    existingRecord: null,\n    inputData: processedInputData,\n    firmDomain: firmDomain,\n    personEmailAddress: personEmailAddress,\n    backlogId: inputData.backlogId,\n    action: \"create_new\"\n  };\n}\n\nif (queryResults.length > 1) {\n  console.warn('⚠️ Multiple records found for Gmail ID:', inputData.gmailId);\n  // Use first record but log the issue\n}\n\nconst existingRecord = queryResults[0].json;\nconsole.log('ℹ️ Existing record found - will return existing');\nconsole.log('📄 Existing record ID:', existingRecord.id);\n\nreturn {\n  recordExists: true,\n  existingRecord: existingRecord,\n  inputData: processedInputData,\n  firmDomain: firmDomain,\n  personEmailAddress: personEmailAddress,\n  backlogId: inputData.backlogId,\n  action: \"found_existing\"\n};"},"id":"process-query","name":"N04: Process Query Results","type":"n8n-nodes-base.code","typeVersion":2,"position":[2640,-768]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"record-exists-condition","leftValue":"={{ $json.recordExists }}","rightValue":true,"operator":{"type":"boolean","operation":"equal"}},{"id":"898cdaad-1e00-4070-a407-46489762c8d2","leftValue":"={{ $json.existingRecord.id }}","rightValue":"found_existing","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"or"},"options":{"ignoreCase":false,"looseTypeValidation":false}},"id":"record-exists-check","name":"N05: Record Exists Check","type":"n8n-nodes-base.if","typeVersion":2,"position":[2864,-768],"alwaysOutputData":false},{"parameters":{"resource":"databasePage","databaseId":"2231db9b-a441-8164-9226-eba95cc4e72c","title":"={{ $('N04: Process Query Results').first().json.inputData.gmailId }}","propertiesUi":{"propertyValues":[{"key":"From Email|email","emailValue":"={{ $('N04: Process Query Results').first().json.inputData.fromEmail }}"},{"key":"Subject|rich_text","textContent":"={{ $('N04: Process Query Results').first().json.inputData.subject }}"},{"key":"Thread ID|rich_text","textContent":"={{ $('N04: Process Query Results').first().json.inputData.threadId }}"},{"key":"Gmail Date|date","date":"={{ $('N04: Process Query Results').first().json.inputData.gmailDate }}","timezone":"US/Eastern"},{"key":"Status|select","selectValue":"pending"},{"key":"Fresh Content|rich_text","textContent":"={{ $('N04: Process Query Results').first().json.inputData.freshContent.substring(0, 2000) }}"},{"key":"rel:PlannerFirm|relation","relationValue":"={{ $('N05A: Execute PlannerFirm').first().json.PlannerFirm.id ? [$('N05A: Execute PlannerFirm').first().json.PlannerFirm.id] : [] }}"},{"key":"rel:PlannerPerson|relation","relationValue":"={{ $('N05B: Execute PlannerPerson').first().json.PlannerPerson.id ? [$('N05B: Execute PlannerPerson').first().json.PlannerPerson.id] : [] }}"},{"key":"rel:Backlog|relation","relationValue":"={{ $('N04: Process Query Results').first().json.backlogId ? [$('N04: Process Query Results').first().json.backlogId] : [] }}"}]},"blockUi":{"blockValues":[{"textContent":"={{ $('N04: Process Query Results').first().json.inputData.freshContent.substring(0, 2000) }}"},{"textContent":"={{ $('N04: Process Query Results').first().json.inputData.freshContent.substring(2000, 4000) }}"},{"textContent":"={{ $('N04: Process Query Results').first().json.inputData.freshContent.substring(4000, 6000) }}"}]},"options":{}},"id":"create-new-record","name":"N06: Create New PlannerEmail Record","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3536,-696],"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"2231db9b-a441-8164-9226-eba95cc4e72c","mode":"list","cachedResultName":"vcdb.PlannerEmail.vn8n","cachedResultUrl":"https://www.notion.so/2231db9ba44181649226eba95cc4e72c"},"filterType":"manual","filters":{"conditions":[{"key":"Gmail ID|title","condition":"equals","titleValue":"={{ $('N04: Process Query Results').first().json.inputData.gmailId }}"}]},"options":{}},"id":"query-created-record","name":"N07: Query Created Record","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3760,-696],"alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// Node 8: Format Database Record Response\nconst input = $input.first().json;\nconst action = $('N04: Process Query Results').first().json.action;\n\nconsole.log('✅ Formatting database record');\nconsole.log('📄 Input data:', JSON.stringify(input, null, 2));\n\n// Get firm data from N05A if available (only for new records)\nlet firmData = null;\nlet personData = null;\nif (action === 'create_new') {\n  try {\n    const firmResult = $('N05A: Execute PlannerFirm').first().json;\n    firmData = firmResult.PlannerFirm || null;\n    console.log('🏢 Firm data received:', firmData);\n  } catch (e) {\n    console.log('⚠️ No firm data available');\n  }\n  \n  try {\n    const personResult = $('N05B: Execute PlannerPerson').first().json;\n    personData = personResult.PlannerPerson || null;\n    console.log('👤 Person data received:', personData);\n  } catch (e) {\n    console.log('⚠️ No person data available');\n  }\n}\n\n// Check if this is coming from the existing record path or new record path\nlet recordData;\n\nif (action === 'found_existing') {\n  // For existing records, the data is already formatted from N04\n  const existingData = $('N04: Process Query Results').first().json.existingRecord;\n  \n  recordData = {\n    id: existingData.id,\n    url: existingData.url,\n    property_gmail_id: existingData.property_gmail_id || '',\n    property_from_email: existingData.property_from_email || '',\n    property_subject: existingData.property_subject || '',\n    property_fresh_content: existingData.property_fresh_content || '',\n    property_thread_id: existingData.property_thread_id || '',\n    property_gmail_date: existingData.property_gmail_date?.start || existingData.property_gmail_date || '',\n    property_status: existingData.property_status || 'pending',\n    // Relations are already in the right format\n    rel_backlog: existingData.property_rel_backlog?.[0] || null,\n    rel_planner_person: existingData.property_rel_planner_person?.[0] || null,\n    rel_planner_firm: existingData.property_rel_planner_firm?.[0] || null,\n    rel_email: existingData.property_rel_email?.[0] || null,\n    action: action,\n    created_time: existingData.property_created_time || existingData.created_time,\n    last_edited_time: existingData.property_last_edited_time || existingData.last_edited_time\n  };\n} else {\n  // For new records, check if we have input at all\n  if (!input || Object.keys(input).length === 0) {\n    // If no input, get the data from N07 directly\n    const n07Data = $('N07: Query Created Record').first().json;\n    recordData = {\n      id: n07Data.id,\n      url: n07Data.url,\n      property_gmail_id: n07Data.property_gmail_id || '',\n      property_from_email: n07Data.property_from_email || '',\n      property_subject: n07Data.property_subject || '',\n      property_fresh_content: n07Data.property_fresh_content || '',\n      property_thread_id: n07Data.property_thread_id || '',\n      property_gmail_date: n07Data.property_gmail_date?.start || n07Data.property_gmail_date || '',\n      property_status: n07Data.property_status || 'pending',\n      // Relations are already in the right format\n      rel_backlog: n07Data.property_rel_backlog?.[0] || null,\n      rel_planner_person: n07Data.property_rel_planner_person?.[0] || null,\n      rel_planner_firm: n07Data.property_rel_planner_firm?.[0] || null,\n      rel_email: n07Data.property_rel_email?.[0] || null,\n      action: 'created_new',\n      created_time: n07Data.property_created_time || n07Data.created_time,\n      last_edited_time: n07Data.property_last_edited_time || n07Data.last_edited_time\n    };\n  } else {\n    // If we have input, use it (data comes from N07 with properties at root)\n    recordData = {\n      id: input.id,\n      url: input.url,\n      property_gmail_id: input.property_gmail_id || '',\n      property_from_email: input.property_from_email || '',\n      property_subject: input.property_subject || '',\n      property_fresh_content: input.property_fresh_content || '',\n      property_thread_id: input.property_thread_id || '',\n      property_gmail_date: input.property_gmail_date?.start || input.property_gmail_date || '',\n      property_status: input.property_status || 'pending',\n      // Relations are already in the right format\n      rel_backlog: input.property_rel_backlog?.[0] || null,\n      rel_planner_person: input.property_rel_planner_person?.[0] || null,\n      rel_planner_firm: input.property_rel_planner_firm?.[0] || null,\n      rel_email: input.property_rel_email?.[0] || null,\n      action: 'created_new',\n      created_time: input.property_created_time || input.created_time,\n      last_edited_time: input.property_last_edited_time || input.last_edited_time\n    };\n  }\n}\n\n// Add execution and workflow information\nrecordData.childExecutionId = $execution.id;\nrecordData.childWorkflowId = $workflow.id;\nrecordData.childWorkflowName = $workflow.name;\n\n// Return in nested structure with database table name\nconst response = {\n  PlannerEmail: recordData\n};\n\n// Add firm data if available\nif (firmData) {\n  response.PlannerFirm = firmData;\n}\n\n// Add person data if available\nif (personData) {\n  response.PlannerPerson = personData;\n}\n\nconsole.log('✅ Database record formatted successfully');\nreturn response;"},"id":"format-db-record","name":"N08: Format Database Record","type":"n8n-nodes-base.code","typeVersion":2,"position":[3984,-768]},{"parameters":{"jsCode":"// Node 9: Error Output\nconst validationResult = $input.first().json;\n\nconsole.error('❌ Sub-workflow error:', validationResult.error);\n\nreturn {\n  success: false,\n  error: validationResult.error,\n  details: validationResult.details,\n  action: \"error\",\n  timestamp: new Date().toISOString()\n};"},"id":"error-output","name":"N09: Error Output","type":"n8n-nodes-base.code","typeVersion":2,"position":[2416,-576]},{"parameters":{"workflowId":{"__rl":true,"value":"AdTfnAEHPvMzlETS","mode":"list","cachedResultName":"PlannerFirm: Create v20250726-171447"},"workflowInputs":{"mappingMode":"defineBelow","value":{"domain":"={{ $('N04: Process Query Results').first().json.firmDomain }}","backlogId":"={{ $('N04: Process Query Results').first().json.backlogId }}"},"matchingColumns":[],"schema":[{"id":"domain","displayName":"domain","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"backlogId","displayName":"backlogId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"id":"execute-plannerfirm","name":"N05A: Execute PlannerFirm","type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[3088,-696]},{"parameters":{"workflowId":{"__rl":true,"value":"6Noi3vqZOdQm1uOY","mode":"list","cachedResultName":"PlannerPerson: Create v20250726-171446"},"workflowInputs":{"mappingMode":"defineBelow","value":{"emailAddress":"={{ $('N04: Process Query Results').first().json.personEmailAddress }}","plannerFirmId":"={{ $('N05A: Execute PlannerFirm').first().json.PlannerFirm.id }}","backlogId":"={{ $('N04: Process Query Results').first().json.backlogId }}"},"matchingColumns":[],"schema":[{"id":"emailAddress","displayName":"emailAddress","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"plannerFirmId","displayName":"plannerFirmId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"backlogId","displayName":"backlogId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"id":"execute-plannerperson","name":"N05B: Execute PlannerPerson","type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[3312,-696]}],"connections":{"N00: Start":{"main":[[{"node":"N01: Input Validation & Environment Setup","type":"main","index":0}]]},"N01: Input Validation & Environment Setup":{"main":[[{"node":"N02: Validation Success Check","type":"main","index":0}]]},"N02: Validation Success Check":{"main":[[{"node":"N03: Query Existing PlannerEmail","type":"main","index":0}],[{"node":"N09: Error Output","type":"main","index":0}]]},"N03: Query Existing PlannerEmail":{"main":[[{"node":"N04: Process Query Results","type":"main","index":0}]]},"N04: Process Query Results":{"main":[[{"node":"N05: Record Exists Check","type":"main","index":0}]]},"N05: Record Exists Check":{"main":[[{"node":"N08: Format Database Record","type":"main","index":0}],[{"node":"N05A: Execute PlannerFirm","type":"main","index":0}]]},"N05A: Execute PlannerFirm":{"main":[[{"node":"N05B: Execute PlannerPerson","type":"main","index":0}]]},"N05B: Execute PlannerPerson":{"main":[[{"node":"N06: Create New PlannerEmail Record","type":"main","index":0}]]},"N06: Create New PlannerEmail Record":{"main":[[{"node":"N07: Query Created Record","type":"main","index":0}]]},"N07: Query Created Record":{"main":[[{"node":"N08: Format Database Record","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"N00: Start":[{"json":{"gmailId":"195c4a560fc46eca","fromEmail":"mg@hy.ly","subject":"Re: Reconnecting with GSV","freshContent":"Hi Stephanie,\n\nThanks for getting in touch. I would love to connect but want to make sure\nyou think it's worth your time.  So, let me summarize where we are:\n\n   - We have *not taken any investments *so far, and given our cash\n   position, it's *unlikely that we will in this calendar year.*\n   - However, we are in the middle of an intense *reinvention *of the\n   company.\n   - Our ambition for 2025 / 2026 is to *move Multifamily from old,\n   fractured, CRM-centric bookkeeping to Data-Driven AI through our\n   Intelligence Fabric. *\n   - The intelligence fabric is a unique architecture that combines:\n      - *A Data Fabric *that creates a 360 degree view of the customers and\n      prospects from disparate systems, and then\n      - Activates them using an *AI Fabric* that delivers intelligent\n      experiences\n\nHere's a quick look at 2024:\n\n   - *43% ARR Growth:  *From $4.42m ARR at end of 2023 to $6.32m ARR at end\n   of 2024\n   - *69% Operating Income Growth: * $3.68M to $6.23m\n   - *541% Net Operating Profit Growth: * $0.32m to $1.76m\n\nFor 2025, we expect to be at $7M ARR by the end of Q1 2025, but there are\nsignificant challenges as we *name, frame and claim a new blue-ocean\ncategory; *move from a *single-product to a multi-product* company; and\nreach for *$10m and beyond *over the next year.\n\nGiven the above, if you would still like to meet, please schedule at your\nconvenience: https://calendly.com/mg-hyly/vc-25\n\nI look forward to connecting with you soon!\n\n\nWarm Regards,\n\n\nMunish\n\n--\n\nMunish Gandhi\n\nFounder & CEO, Hyly.AI\n\n*Changing how Multifamily Connects*\n\n571.274.1876 | LinkedIn <https://www.linkedin.com/in/mgandhi/> |\nhttps://hyly.ai <https://hyly.ai/journey-ai/>\n\nCut the Clutter: Subscribe to *AI Fabric for Multifamily*\n<https://www.linkedin.com/build-relation/newsletter-follow?entityUrn=7196126741965193216>\n\n\n\nOn Thu, Jan 9, 2025 at 12:39 PM Stephanie Schwarz <\nStephanie.Schwarz@greatersumventures.com> wrote:\n\n> Hi Munish,\n>\n>\n>\n> Happy New Year! I hope you had a great holiday season. We've been busy at\n> work with our assets in property management and I'd love to exchange a few\n> updates.\n>\n>\n>\n> Would you be available to meet later this month?\n>\n>\n>\n> Kindly,\n>\n>\n>\n> *Stephanie Schwarz *\n>\n> Senior Associate - Greater Sum Ventures <https://greatersumventures.com/>\n>\n> Let's Connect | Calendly <https://calendly.com/gsv-stephanie/30min>\n>\n> 865.378.8232\n>\n>\n>\n> [image: signature_1061439472] <http://www.greatersumventures.com/>\n>\n>\n>\n>\n>\n>\n>\n","threadId":"1944c2651db324e4","gmailDate":"2025-03-23T20:15:45.000Z","backlogId":"2371db9b-a441-81f5-9d6e-d4e258bfa4f1"}}]},"versionId":"478fa349-c552-4686-b314-98e17d692fe1","triggerCount":0,"tags":[]},{"createdAt":"2025-07-18T23:07:47.290Z","updatedAt":"2025-07-18T23:07:47.290Z","id":"5BexvovLTDx8A8TL","name":"System Test > Notion Connectivity v20250718-190747","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"manual-trigger","name":"Manual Trigger","type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[250,300]},{"parameters":{"jsCode":"// Initialize Test Context\n// Creates the test data structure for integration testing\n\nconst testContext = {\n  test_id: `integration-test-${new Date().getTime()}`,\n  test_start_time: new Date().toISOString(),\n  test_results: {\n    overall_status: 'running',\n    environment_validation: {},\n    credential_validation: {},\n    component_results: {},\n    errors: []\n  }\n};\n\nreturn [{\n  json: testContext\n}];"},"id":"initialize-test-context","name":"Initialize Test Context","type":"n8n-nodes-base.code","typeVersion":2,"position":[470,300]},{"parameters":{"url":"https://api.notion.com/v1/blocks/2231db9ba44180e091e7de93b56c2612/children","authentication":"predefinedCredentialType","nodeCredentialType":"notionApi","options":{"timeout":10000}},"id":"fetch-database-list","name":"Fetch Database List from Notion","type":"n8n-nodes-base.httpRequest","typeVersion":4,"position":[690,300],"credentials":{"notionApi":"MlSLKQmPnMyqW0ii"},"continueOnFail":true},{"parameters":{"jsCode":"// Dynamic Database Discovery and Validation\n// Fetches database list from Notion page and validates accessibility\n\nconst inputData = $('Initialize Test Context').first().json;\nconst notionResponse = $input.first().json;\n\nconst validation = {\n  status: 'passed',\n  discoveredDatabases: [],\n  accessibleDatabases: [],\n  inaccessibleDatabases: [],\n  errors: []\n};\n\n// Parse Notion response for database links\nif (notionResponse.error) {\n  validation.status = 'failed';\n  validation.errors.push({\n    type: 'notion_fetch_error',\n    message: 'Could not fetch database list from Notion page',\n    error: notionResponse.error.message,\n    troubleshooting: [\n      'Check Notion API credentials are configured',\n      'Verify access to vc-mgr Notion page',\n      'Ensure page ID is correct: 2231db9ba44180e091e7de93b56c2612'\n    ]\n  });\n} else {\n  // Extract database IDs from Notion blocks\n  const blocks = notionResponse.results || [];\n  \n  for (const block of blocks) {\n    // Look for database mentions in text blocks\n    if (block.type === 'paragraph' && block.paragraph) {\n      const richText = block.paragraph.rich_text || [];\n      for (const text of richText) {\n        if (text.href && text.href.includes('notion.so')) {\n          // Extract database ID from Notion URL\n          const match = text.href.match(/([a-f0-9]{32}|[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})/);\n          if (match) {\n            const dbId = match[1];\n            const dbName = text.text?.content || 'Unknown Database';\n            validation.discoveredDatabases.push({\n              name: dbName,\n              id: dbId,\n              url: text.href\n            });\n          }\n        }\n      }\n    }\n    \n    // Also check for child_database blocks\n    if (block.type === 'child_database') {\n      validation.discoveredDatabases.push({\n        name: block.child_database?.title || 'Database',\n        id: block.id,\n        type: 'child_database'\n      });\n    }\n  }\n  \n  if (validation.discoveredDatabases.length === 0) {\n    validation.status = 'failed';\n    validation.errors.push({\n      type: 'no_databases_found',\n      message: 'No databases found on the vc-mgr Notion page',\n      troubleshooting: [\n        'Check that databases are linked on the page',\n        'Verify page contains database references',\n        'Ensure database links are properly formatted'\n      ]\n    });\n  }\n}\n\n// Update test results\nconst testResults = inputData.test_results;\ntestResults.database_discovery = validation;\n\nreturn [{\n  json: {\n    ...inputData,\n    test_results: testResults,\n    discovered_databases: validation.discoveredDatabases,\n    discovery_complete: true\n  }\n}];"},"id":"discover-databases","name":"Discover Databases from Page","type":"n8n-nodes-base.code","typeVersion":2,"position":[910,300]},{"parameters":{"jsCode":"// Prepare Database Accessibility Tests\n// Creates individual requests for each discovered database\n\nconst inputData = $input.first().json;\nconst discoveredDatabases = inputData.discovered_databases || [];\n\n// Create array of database test requests\nconst testRequests = discoveredDatabases.map(db => ({\n  database_id: db.id,\n  database_name: db.name,\n  test_type: 'row_count_check'\n}));\n\nreturn testRequests.map(request => ({\n  json: {\n    ...inputData,\n    current_test: request\n  }\n}));"},"id":"test-database-accessibility","name":"Test Database Accessibility","type":"n8n-nodes-base.code","typeVersion":2,"position":[1130,300]},{"parameters":{"method":"POST","url":"https://api.notion.com/v1/databases/2231db9b-a441-8178-8957-f88a30b0cdba/query","authentication":"predefinedCredentialType","nodeCredentialType":"notionApi","options":{"timeout":10000}},"id":"query-database","name":"Query Database for Row Count","type":"n8n-nodes-base.httpRequest","typeVersion":4,"position":[1350,300],"credentials":{"notionApi":{"id":null,"name":"MlSLKQmPnMyqW0ii"}},"continueOnFail":true},{"parameters":{"jsCode":"// Aggregate Database Test Results\n// Collects results from all database queries and provides summary with row counts\n\n// Get the original test context from the discovery node\nconst discoveryData = $('Discover Databases from Page').first().json;\nconst discoveredDatabases = discoveryData.discovered_databases || [];\n\n// Get all query results from current input\nconst allQueryResults = $input.all();\n\nconst testResults = [];\nlet accessibleCount = 0;\n\n// Match discovered databases with query results by index\nfor (let i = 0; i < discoveredDatabases.length; i++) {\n  const db = discoveredDatabases[i];\n  const queryResult = allQueryResults[i]?.json || {};\n  \n  const result = {\n    name: db.name,\n    id: db.id,\n    accessible: !queryResult.error,\n    rowCount: 0,\n    error: queryResult.error?.message || null,\n    testTimestamp: new Date().toISOString()\n  };\n  \n  if (result.accessible) {\n    accessibleCount++;\n    // Get row count from query results\n    if (queryResult.results && Array.isArray(queryResult.results)) {\n      result.rowCount = queryResult.results.length;\n    }\n  }\n  \n  testResults.push(result);\n}\n\nconst accessibilityTest = {\n  status: accessibleCount === discoveredDatabases.length ? 'passed' : \n          accessibleCount === 0 ? 'failed' : 'partial',\n  totalDatabases: discoveredDatabases.length,\n  accessibleCount: accessibleCount,\n  inaccessibleCount: discoveredDatabases.length - accessibleCount,\n  databases: testResults.map(r => ({\n    name: r.name,\n    accessible: r.accessible,\n    rowCount: r.rowCount,\n    error: r.error\n  }))\n};\n\n// Create simple summary for final report\nconst simpleSummary = {\n  test_start_time: discoveryData.test_start_time,\n  database_discovery: discoveryData.test_results.database_discovery,\n  database_accessibility: accessibilityTest\n};\n\nreturn [{\n  json: simpleSummary\n}];"},"id":"aggregate-test-results","name":"Aggregate Database Test Results","type":"n8n-nodes-base.code","typeVersion":2,"position":[1570,300]},{"parameters":{"jsCode":"// Generate Ultra-Compact Test Summary\n// Just the essentials: status + database rows + connectivity confirmation\n\nconst testData = $input.first().json;\nconst discovery = testData.database_discovery;\nconst accessibility = testData.database_accessibility;\n\n// Determine overall status\nlet status;\nif (discovery.status === 'failed' || discovery.discoveredDatabases.length === 0) {\n  status = '❌ FAILED';\n} else if (accessibility.status === 'failed') {\n  status = '❌ FAILED';\n} else if (accessibility.status === 'partial') {\n  status = '⚠️ PARTIAL';\n} else {\n  status = '✅ PASSED';\n}\n\n// Create compact database list\nconst dbList = accessibility.databases.map(db => \n  `${db.name}: ${db.rowCount} rows`\n).join('\\n');\n\n// Simple connectivity confirmation\nconst connectivityInfo = 'notion + gmail connectivity works';\n\n// Create ultra-compact output\nconst compactOutput = `${status} - ${connectivityInfo}\\n${dbList}`;\n\n// Return just the compact string\nreturn [{\n  json: { result: compactOutput }\n}];"},"id":"generate-final-report","name":"Generate Final Report","type":"n8n-nodes-base.code","typeVersion":2,"position":[1790,300]}],"connections":{"Manual Trigger":{"main":[[{"node":"Initialize Test Context","type":"main","index":0}]]},"Initialize Test Context":{"main":[[{"node":"Fetch Database List from Notion","type":"main","index":0}]]},"Fetch Database List from Notion":{"main":[[{"node":"Discover Databases from Page","type":"main","index":0}]]},"Discover Databases from Page":{"main":[[{"node":"Test Database Accessibility","type":"main","index":0}]]},"Test Database Accessibility":{"main":[[{"node":"Query Database for Row Count","type":"main","index":0}]]},"Query Database for Row Count":{"main":[[{"node":"Aggregate Database Test Results","type":"main","index":0}]]},"Aggregate Database Test Results":{"main":[[{"node":"Generate Final Report","type":"main","index":0}]]}},"settings":{},"staticData":null,"meta":null,"pinData":null,"versionId":"641faff3-686e-470f-8a9c-9479ba504a82","triggerCount":0,"tags":[]},{"createdAt":"2025-07-22T15:34:25.246Z","updatedAt":"2025-07-29T06:29:22.000Z","id":"6Noi3vqZOdQm1uOY","name":"PlannerPerson: Create v20250729-022922","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"emailAddress","type":"any"},{"name":"plannerFirmId","type":"any"},{"name":"backlogId","type":"any"}]}},"id":"125626fc-055d-4ba9-866f-c8e6c05937a5","typeVersion":1.1,"name":"N00: Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[1744,-448]},{"parameters":{"jsCode":"// Node 2: Input Validation & Environment Setup\nconst input = $json;\nconsole.log('🔍 Sub-workflow input received:', JSON.stringify(input, null, 2));\n\n// Validate required field for PlannerPerson creation\nif (!input.emailAddress) {\n  console.error('❌ Missing required field: emailAddress');\n  return {\n    valid: false,\n    error: \"Missing required field: emailAddress\",\n    details: \"Email address must be provided for PlannerPerson creation\"\n  };\n}\n\n// Validate email format (basic check for valid email)\nif (typeof input.emailAddress !== 'string' || input.emailAddress.trim() === '') {\n  console.error('❌ Invalid email format:', input.emailAddress);\n  return {\n    valid: false,\n    error: \"Invalid email format\",\n    details: \"Email address must be a non-empty string\"\n  };\n}\n\n// Basic email validation (contains @ symbol)\nif (!input.emailAddress.includes('@')) {\n  console.error('❌ Invalid email format:', input.emailAddress);\n  return {\n    valid: false,\n    error: \"Invalid email format\",\n    details: \"Email address must contain @ symbol\"\n  };\n}\n\nconsole.log(`✅ Valid sub-workflow input for email: ${input.emailAddress}`);\nreturn {\n  valid: true,\n  processedInput: {\n    emailAddress: input.emailAddress.toLowerCase().trim(),\n    plannerFirmId: input.plannerFirmId || null,\n    backlogId: input.backlogId || ''\n  }\n};"},"id":"input-validation","name":"N01: Input Validation & Environment Setup","type":"n8n-nodes-base.code","typeVersion":2,"position":[1968,-448]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"valid-check","leftValue":"={{ $json.valid }}","rightValue":true,"operator":{"type":"boolean","operation":"equal","rightType":"boolean"}},{"id":"d17daef6-c946-4a6d-8772-c1c9b3e5e1d7","leftValue":"={{ $json.valid }}","rightValue":"true","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"or"},"options":{}},"id":"validation-check","name":"N02: Validation Success Check","type":"n8n-nodes-base.if","typeVersion":2,"position":[2192,-448]},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"2231db9b-a441-81c3-89ad-fb6ebb405a81","mode":"list","cachedResultName":"vcdb.PlannerPerson.vn8n","cachedResultUrl":"https://www.notion.so/2231db9ba44181c3-89adfb6ebb405a81"},"filterType":"manual","filters":{"conditions":[{"key":"Email Address|title","condition":"equals","titleValue":"={{ $json.processedInput.emailAddress }}"}]},"options":{}},"id":"query-existing","name":"N03: Query Existing PlannerPerson","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2400,-576],"alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// Node 5: Process Query Results\nconst queryResults = $input.all();\nconst inputData = $('N01: Input Validation & Environment Setup').first().json.processedInput;\n\nconsole.log('🔍 Duplicate check results:', queryResults.length, 'records found');\n\n// Check if no results or empty result object\nif (queryResults.length === 0 || !queryResults[0].json || Object.keys(queryResults[0].json).length === 0 || !queryResults[0].json.id) {\n  console.log('✅ No existing record found - will create new');\n  return {\n    recordExists: false,\n    existingRecord: null,\n    inputData: inputData,\n    backlogId: inputData.backlogId,\n    action: \"create_new\"\n  };\n}\n\nif (queryResults.length > 1) {\n  console.warn('⚠️ Multiple records found for email:', inputData.emailAddress);\n  // Use first record but log the issue\n}\n\nconst existingRecord = queryResults[0].json;\nconsole.log('ℹ️ Existing record found - will return existing');\nconsole.log('📄 Existing record ID:', existingRecord.id);\n\nreturn {\n  recordExists: true,\n  existingRecord: existingRecord,\n  inputData: inputData,\n  backlogId: inputData.backlogId,\n  action: \"found_existing\"\n};"},"id":"process-query","name":"N04: Process Query Results","type":"n8n-nodes-base.code","typeVersion":2,"position":[2624,-544]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"record-exists-condition","leftValue":"={{ $json.recordExists }}","rightValue":true,"operator":{"type":"boolean","operation":"equal"}},{"id":"898cdaad-1e00-4070-a407-46489762c8d2","leftValue":"={{ $json.existingRecord.id }}","rightValue":"found_existing","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"or"},"options":{"ignoreCase":false,"looseTypeValidation":false}},"id":"record-exists-check","name":"N05: Record Exists Check","type":"n8n-nodes-base.if","typeVersion":2,"position":[2848,-544],"alwaysOutputData":false},{"parameters":{"jsCode":"// Node 8: Format Database Record Response\nconst input = $json;\nconst action = $('N04: Process Query Results').first().json.action;\n\nconsole.log('✅ Formatting database record');\nconsole.log('📄 Input data:', JSON.stringify(input, null, 2));\n\n// Check if this is coming from the existing record path or new record path\nlet recordData;\n\nif (action === 'found_existing') {\n  // For existing records, the data is already formatted from N04\n  const existingData = $('N04: Process Query Results').first().json.existingRecord;\n  \n  recordData = {\n    id: existingData.id,\n    url: existingData.url,\n    property_email_address: existingData.property_email_address || '',\n    property_status: existingData.property_status || 'pending',\n    // Relations are already in the right format\n    rel_backlog: existingData.property_rel_backlog?.[0] || null,\n    rel_planner_email: existingData.property_rel_planner_email?.[0] || null,\n    rel_planner_firm: existingData.property_rel_planner_firm?.[0] || null,\n    rel_person: existingData.property_rel_person?.[0] || null,\n    action: action,\n    created_time: existingData.property_created_time || existingData.created_time,\n    last_edited_time: existingData.property_last_edited_time || existingData.last_edited_time\n  };\n} else {\n  // For new records, check if we have input at all\n  if (!input || Object.keys(input).length === 0) {\n    // If no input, get the data from N07 directly\n    const n07Data = $('N07: Query Created Record').first().json;\n    recordData = {\n      id: n07Data.id,\n      url: n07Data.url,\n      property_email_address: n07Data.property_email_address || '',\n      property_status: n07Data.property_status || 'pending',\n      // Relations are already in the right format\n      rel_backlog: n07Data.property_rel_backlog?.[0] || null,\n      rel_planner_email: n07Data.property_rel_planner_email?.[0] || null,\n      rel_planner_firm: n07Data.property_rel_planner_firm?.[0] || null,\n      rel_person: n07Data.property_rel_person?.[0] || null,\n      action: 'created_new',\n      created_time: n07Data.property_created_time || n07Data.created_time,\n      last_edited_time: n07Data.property_last_edited_time || n07Data.last_edited_time\n    };\n  } else {\n    // If we have input, use it (data comes from N07 with properties at root)\n    recordData = {\n      id: input.id,\n      url: input.url,\n      property_email_address: input.property_email_address || '',\n      property_status: input.property_status || 'pending',\n      // Relations are already in the right format\n      rel_backlog: input.property_rel_backlog?.[0] || null,\n      rel_planner_email: input.property_rel_planner_email?.[0] || null,\n      rel_planner_firm: input.property_rel_planner_firm?.[0] || null,\n      rel_person: input.property_rel_person?.[0] || null,\n      action: 'created_new',\n      created_time: input.property_created_time || input.created_time,\n      last_edited_time: input.property_last_edited_time || input.last_edited_time\n    };\n  }\n}\n\n// Add execution and workflow information\nrecordData.childExecutionId = $execution.id;\nrecordData.childWorkflowId = $workflow.id;\nrecordData.childWorkflowName = $workflow.name;\n\n// Return in nested structure with database table name\nconst response = {\n  PlannerPerson: recordData\n};\n\nconsole.log('✅ Database record formatted successfully');\nreturn response;"},"id":"format-db-record","name":"N08: Format Database Record","type":"n8n-nodes-base.code","typeVersion":2,"position":[3504,-544]},{"parameters":{"resource":"databasePage","databaseId":"2231db9b-a441-81c3-89ad-fb6ebb405a81","title":"={{ $('N04: Process Query Results').first().json.inputData.emailAddress }}","propertiesUi":{"propertyValues":[{"key":"Status|select","selectValue":"pending"},{"key":"rel:PlannerFirm|relation","relationValue":"={{ $('N04: Process Query Results').first().json.inputData.plannerFirmId ? [$('N04: Process Query Results').first().json.inputData.plannerFirmId] : [] }}"},{"key":"rel:Backlog|relation","relationValue":"={{ $('N04: Process Query Results').first().json.backlogId ? [$('N04: Process Query Results').first().json.backlogId] : [] }}"}]},"options":{}},"id":"create-new-record","name":"N06: Create New PlannerPerson Record","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3072,-448],"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// Node 8: Error Output\nconst validationResult = $input.first().json;\n\nconsole.error('❌ Sub-workflow error:', validationResult.error);\n\nreturn {\n  success: false,\n  error: validationResult.error,\n  details: validationResult.details,\n  action: \"error\",\n  timestamp: new Date().toISOString()\n};"},"id":"error-output","name":"N09: Error Output","type":"n8n-nodes-base.code","typeVersion":2,"position":[2400,-336]},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"2231db9b-a441-81c3-89ad-fb6ebb405a81","mode":"list","cachedResultName":"vcdb.PlannerPerson.vn8n","cachedResultUrl":"https://www.notion.so/2231db9ba44181c3-89adfb6ebb405a81"},"filterType":"manual","filters":{"conditions":[{"key":"Email Address|title","condition":"equals","titleValue":"={{ $('N04: Process Query Results').first().json.inputData.emailAddress }}"}]},"options":{}},"id":"query-created-record","name":"N07: Query Created Record","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3280,-448],"alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}}],"connections":{"N00: Start":{"main":[[{"node":"N01: Input Validation & Environment Setup","type":"main","index":0}]]},"N01: Input Validation & Environment Setup":{"main":[[{"node":"N02: Validation Success Check","type":"main","index":0}]]},"N02: Validation Success Check":{"main":[[{"node":"N03: Query Existing PlannerPerson","type":"main","index":0}],[{"node":"N09: Error Output","type":"main","index":0}]]},"N03: Query Existing PlannerPerson":{"main":[[{"node":"N04: Process Query Results","type":"main","index":0}]]},"N04: Process Query Results":{"main":[[{"node":"N05: Record Exists Check","type":"main","index":0}]]},"N05: Record Exists Check":{"main":[[{"node":"N08: Format Database Record","type":"main","index":0}],[{"node":"N06: Create New PlannerPerson Record","type":"main","index":0}]]},"N06: Create New PlannerPerson Record":{"main":[[{"node":"N07: Query Created Record","type":"main","index":0}]]},"N07: Query Created Record":{"main":[[{"node":"N08: Format Database Record","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"N00: Start":[{"json":{"emailAddress":"mg@hy.ly","plannerFirmId":"23d1db9b-a441-81ec-8cdc-e77aa6f5364c","backlogId":"2371db9b-a441-81f5-9d6e-d4e258bfa4f1"}}]},"versionId":"c2e143fe-dff1-4c59-b999-ee60e5946900","triggerCount":0,"tags":[]},{"createdAt":"2025-08-08T22:57:28.124Z","updatedAt":"2025-08-13T23:27:31.000Z","id":"6TApNCFdO6tZkK9I","name":"gates.qa v20250813-192731","active":true,"isArchived":false,"nodes":[{"parameters":{"inputSource":"passthrough"},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-608,-548],"id":"0859504e-0f35-44a9-8256-3325fe98f468","name":"N00: Start"},{"parameters":{"resource":"databasePage","operation":"get","pageId":{"__rl":true,"value":"={{ $json.body.data.id }}","mode":"id"},"simple":false},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[-384,-644],"id":"notion-query-ai-review","name":"N01: Query AI Review Records","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"mode":"runOnceForEachItem","jsCode":"// Extract clean data from Notion's flat property structure\nconst pageData = $json;\n\n// Extract text content using safe navigation and null checks\nconst answer = (pageData.properties?.Answer?.rich_text?.[0]?.text?.content) || \"\";\nconst question = (pageData.properties?.Question?.title?.[0]?.text?.content) || \"\";\nconst guidelines = (pageData.properties?.[\"Answer Guidelines\"]?.rich_text?.[0]?.text?.content) || \"\";\n\n// Extract other relevant properties (adjust based on actual available fields)\nconst reviewOwner = pageData.property_review_owner || null;\nconst salesOwner = pageData.property_sales_owner || null;\n\n// Check if guidelines are empty or meaningless\nif (!guidelines || guidelines.trim() === \"\") {\n  console.log(`No guidelines provided for: ${question}`);\n  // Return special marker for missing guidelines\n  return {\n    question: question,\n    answer: answer,\n    guidelines: \"MISSING\",\n    missingGuidelines: true,\n    \n    // Metadata for updates\n    pageId: pageData.id,\n    pageUrl: pageData.url,\n    reviewOwnerId: reviewOwner || null,\n    salesOwnerId: salesOwner || null,\n    \n    // Status tracking\n    currentStatus: \"AI Review\",\n    createdTime: pageData.property_created_time || pageData.created_time,\n    lastEditedTime: pageData.property_last_edited_time || pageData.last_edited_time\n  };\n}\n\n// Log for debugging\nconsole.log(`Processing: ${question}`);\nconsole.log(`Answer length: ${answer.length} chars`);\nconsole.log(`Guidelines: ${guidelines.substring(0, 50)}...`);\n\nreturn {\n  // Core data for assessment\n  question: question,\n  answer: answer,\n  guidelines: guidelines,\n  missingGuidelines: false,\n  \n  // Metadata for updates\n  pageId: pageData.id,\n  pageUrl: pageData.url,\n  reviewOwnerId: reviewOwner || null,\n  salesOwnerId: salesOwner || null,\n  \n  // Status tracking\n  currentStatus: \"AI Review\",\n  createdTime: pageData.property_created_time || pageData.created_time,\n  lastEditedTime: pageData.property_last_edited_time || pageData.last_edited_time\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-160,-644],"id":"transform-notion-data","name":"N02: Transform Notion Data"},{"parameters":{"conditions":{"boolean":[{"value1":"={{ $json.missingGuidelines }}","value2":true}]}},"type":"n8n-nodes-base.if","typeVersion":1,"position":[64,-644],"id":"guidelines-missing-check","name":"Guidelines Missing?"},{"parameters":{"model":"gpt-oss:latest","options":{}},"type":"@n8n/n8n-nodes-langchain.lmOllama","typeVersion":1,"position":[384,-296],"id":"81f40736-4f7e-43b3-8e8b-928af2f45222","name":"N03: Ollama Model","credentials":{"ollamaApi":{"id":"i7QigsdBsQdZv3Mf","name":"Ollama account"}}},{"parameters":{"promptType":"define","text":"=Give your PASS/FAIL assessment on whether the provided answer responds to the question. If it fails, explain briefly why. Make the explanation scannable with emojis if needed. Use only the Guidelines to assess the answer. Sign off your answer on a new line as \"-- MG via AI\"  Format your response as: ASSESSMENT: [PASS/FAIL] EXPLANATION: [Brief explanation if FAIL, or confirmation if PASS]  -- MG via AI\n\n<Question> {{ $json.question }} </Question> <Answer> {{ $json.answer }} </Answer> <Guidelines> {{ $json.guidelines }} </Guidelines>","batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[288,-520],"id":"4d7b6a07-8a53-430e-8064-175df835f230","name":"N04: Basic LLM Chain"},{"parameters":{"mode":"runOnceForEachItem","jsCode":"// Get input data from previous nodes\nconst notionData = $('N01: Query AI Review Records').item.json;\nconst transformedData = $('N02: Transform Notion Data').item.json;\n\n// Try to get LLM response - it may not exist if guidelines were missing\nlet llmResponse = {};\ntry {\n  // Only try to access N04 if it actually ran\n  if ($('N04: Basic LLM Chain').item) {\n    llmResponse = $('N04: Basic LLM Chain').item.json;\n  }\n} catch (e) {\n  // N04 didn't run (guidelines missing path)\n  llmResponse = null;\n}\n\n// User UUIDs\nconst MG_UUID = 'ffa8346a-444c-48dd-ac88-b87aa4c3a84f'; // mg@hy.ly\nconst BLAKE_UUID = 'f23cdeec-395e-4a46-9959-436567aae306'; // bw@hy.ly\n\n// Extract current values\nconst currentProperties = notionData.properties || {};\nconst pageId = notionData.id;\n\n// Get field values for validation\nconst question = currentProperties.Question?.title?.[0]?.text?.content || '';\nconst answer = currentProperties.Answer?.rich_text?.[0]?.text?.content || '';\nconst reviewOwner = currentProperties[\"Review Owner\"]?.people || [];\nconst salesOwner = currentProperties[\"Sales Owner\"]?.people || [];\nconst answerGuidelines = currentProperties[\"Answer Guidelines\"]?.rich_text?.[0]?.text?.content || '';\n\n// Initialize update object\nlet updates = {\n  pageId: pageId,\n  properties: {}\n};\n\n// BUSINESS LOGIC: Determine Review Owner and Status\nlet targetReviewOwner = null;\nlet targetStatus = null;\nlet reviewContent = \"\";\n\n// Check 1: If Answer Guidelines are empty -> MASTER Fix (HIGHEST PRIORITY)\nif (!answerGuidelines) {\n  targetReviewOwner = {\n    object: \"user\",\n    id: BLAKE_UUID\n  };\n  targetStatus = \"MASTER Fix\";\n  reviewContent = \"ASSESSMENT: FAIL\\nEXPLANATION: The MASTER Planner has not provided guidance. Please provide guidance and resubmit for AI Review.\\n-- MG via AI\";\n}\n// Check 2: If Question or Answer is empty -> Sales Revise (NO OWNER CHANGE)\nelse if (!question || !answer) {\n  // Keep existing Review Owner if present, don't change if empty\n  if (reviewOwner.length > 0) {\n    targetReviewOwner = reviewOwner[0];\n  } else {\n    targetReviewOwner = null; // Don't assign anyone - let it stay empty\n  }\n  targetStatus = \"Sales Revise\";\n  \n  // Generate appropriate review content\n  if (!question) {\n    reviewContent = \"ASSESSMENT: FAIL\\nEXPLANATION: Question is missing. Please provide the question.\\n-- MG via AI\";\n  } else if (!answer) {\n    reviewContent = \"ASSESSMENT: FAIL\\nEXPLANATION: Answer is missing. Please provide an answer.\\n-- MG via AI\";\n  }\n}\n// Otherwise: Process based on LLM response (regardless of Review Owner status)\nelse {\n  // Set initial Review Owner\n  if (reviewOwner.length > 0) {\n    targetReviewOwner = reviewOwner[0];\n  } else {\n    targetReviewOwner = null;\n  }\n  \n  // Get LLM content if available (use correct field name)\n  const llmText = llmResponse?.text || llmResponse?.review_notes || \"\";\n  \n  if (llmText && llmText.trim()) {\n    // We have LLM output - use it\n    reviewContent = llmText;\n    // Extract status from LLM response if it contains PASS/FAIL\n    if (llmText.includes(\"ASSESSMENT: PASS\")) {\n      targetStatus = \"MGR Review\";\n      // Only assign MG UUID if Review Owner is empty\n      if (reviewOwner.length === 0) {\n        targetReviewOwner = {\n          object: \"user\",\n          id: MG_UUID\n        };\n      }\n    } else if (llmText.includes(\"ASSESSMENT: FAIL\")) {\n      targetStatus = \"Sales Revise\";\n      // Keep current Review Owner unchanged - do not reassign\n      targetReviewOwner = reviewOwner.length > 0 ? reviewOwner[0] : null;\n    } else {\n      targetStatus = currentProperties[\"Review Status\"]?.status?.name || \"AI Review\";\n    }\n  } else if (!llmResponse) {\n    // LLM didn't run (shouldn't happen in this branch, but be safe)\n    reviewContent = \"ASSESSMENT: FAIL\\nEXPLANATION: LLM review did not execute - workflow error\\n-- MG via AI\";\n    targetStatus = \"AI Review\";\n  } else {\n    // LLM ran but provided empty response\n    reviewContent = \"ASSESSMENT: FAIL\\nEXPLANATION: LLM provided empty review notes\\n-- MG via AI\";\n    targetStatus = \"AI Review\";\n  }\n}\n\n// Build properties update object\nupdates.properties = {\n  // Always update Review Status\n  \"Review Status\": {\n    status: {\n      name: targetStatus\n    }\n  },\n  // Always update Review Notes with meaningful content\n  \"Review Notes\": {\n    rich_text: [{\n      text: {\n        content: reviewContent\n      }\n    }]\n  }\n};\n\n// Only set Review Owner property if we have a valid target (not null)\nif (targetReviewOwner !== null && targetReviewOwner.id) {\n  // CRITICAL: Only send the ID, not the full object\n  updates.properties[\"Review Owner\"] = {\n    people: [{\n      id: targetReviewOwner.id\n    }]\n  };\n}\n// If targetReviewOwner is null, don't include Review Owner in properties at all\n\n// Add validation flags for debugging\nupdates.validationInfo = {\n  questionEmpty: !question,\n  answerEmpty: !answer,\n  reviewOwnerEmpty: reviewOwner.length === 0,\n  guidelinesEmpty: !answerGuidelines,\n  assignedTo: targetReviewOwner?.id || 'none',\n  status: targetStatus,\n  llmRan: !!llmResponse,\n  reviewContentLength: reviewContent.length\n};\n\nreturn updates;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[688,-644],"id":"calculate-updates","name":"N05: Calculate Updates"},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{ $('N05: Calculate Updates').item.json.pageId }}","mode":"id"},"simple":false,"propertiesUi":{"propertyValues":[{"key":"Review Status|status","statusValue":"={{ $('N05: Calculate Updates').item.json.properties[\"Review Status\"].status.name }}"},{"key":"Review Notes|rich_text","textContent":"={{ $('N05: Calculate Updates').item.json.properties[\"Review Notes\"].rich_text[0].text.content }}"},{"key":"Review Owner|people","peopleValue":"={{ $('N05: Calculate Updates').item.json.properties[\"Review Owner\"]?.people?.length > 0 ? $('N05: Calculate Updates').item.json.properties[\"Review Owner\"].people.map(person => person.id) : [] }}"}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[912,-644],"id":"update-notion","name":"N06: Update Notion","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"httpMethod":"POST","path":"7c7d669d-0fd2-438e-986e-15fe9a30c825","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-608,-740],"id":"6c7fe9bc-de8f-4344-bff0-86f317eb1fb8","name":"Webhook","webhookId":"7c7d669d-0fd2-438e-986e-15fe9a30c825"}],"connections":{"N00: Start":{"main":[[{"node":"N01: Query AI Review Records","type":"main","index":0}]]},"N01: Query AI Review Records":{"main":[[{"node":"N02: Transform Notion Data","type":"main","index":0}]]},"N02: Transform Notion Data":{"main":[[{"node":"Guidelines Missing?","type":"main","index":0}]]},"Guidelines Missing?":{"main":[[{"node":"N05: Calculate Updates","type":"main","index":0}],[{"node":"N04: Basic LLM Chain","type":"main","index":0}]]},"N03: Ollama Model":{"ai_languageModel":[[{"node":"N04: Basic LLM Chain","type":"ai_languageModel","index":0}]]},"N04: Basic LLM Chain":{"main":[[{"node":"N05: Calculate Updates","type":"main","index":0}]]},"N05: Calculate Updates":{"main":[[{"node":"N06: Update Notion","type":"main","index":0}]]},"N06: Update Notion":{"main":[[]]},"Webhook":{"main":[[{"node":"N01: Query AI Review Records","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"935b1d65-59b8-43f9-be98-85a681bd2cf5","triggerCount":1,"tags":[]},{"createdAt":"2025-07-23T18:42:48.012Z","updatedAt":"2025-07-30T15:49:34.000Z","id":"7f3OziDCCYtWwM4W","name":"Backlog2Planners v20250730-111220","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"query","type":"object"}]}},"id":"subworkflow-trigger","typeVersion":1.1,"name":"N00: Subworkflow Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[-80,-848]},{"parameters":{"fieldToSplitOut":"messages","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[592,-848],"id":"a318f417-addc-4988-bd32-993840cd1900","name":"N04: Split Out Messages"},{"parameters":{"resource":"thread","operation":"get","threadId":"={{ $json.threadId }}","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[368,-848],"id":"12504a36-6ef6-4e44-b3fa-b5f12aedf419","name":"N03: Get Thread","webhookId":"c98908fe-82ba-4170-acc8-3c0df92de373","executeOnce":true,"credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}},{"parameters":{"operation":"get","messageId":"={{ $json.id }}","simple":false,"options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[816,-848],"id":"752ccd3c-fcf2-4d1b-b17c-691cac03b764","name":"N05: Get Full Message Details","webhookId":"f3bd0993-f68a-4ce8-85d2-f6caeec0558f","credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}},{"parameters":{"operation":"get","messageId":"={{ $json?.query?.id || $input.first()?.json?.query?.id || $('N00: Subworkflow Start').first()?.json?.query?.id }}"},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[144,-848],"id":"2245942e-ac6b-41c6-8ce2-825b4e1c1502","name":"N02: Get Initial Message","webhookId":"60adbfcb-b1e3-49ca-9e94-27b60a135804","alwaysOutputData":true,"credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}},{"parameters":{"workflowId":{"__rl":true,"value":"4c1RPy0PYoxFCCxj","mode":"list","cachedResultName":"PlannerEmail: Create v20250725-020702"},"workflowInputs":{"mappingMode":"defineBelow","value":{"gmailId":"={{ $json.id }}","subject":"={{ $json.subject }}","threadId":"={{ $json.threadId }}","gmailDate":"={{ $json.date }}","fromEmail":"={{ $json.from.value[0].address }}","freshContent":"={{ $json.text }}","backlogId":"={{ $input.first()?.json?.query?.backlogId || $('N00: Subworkflow Start').first()?.json?.query?.backlogId || $json?.query?.backlogId }}"},"matchingColumns":[],"schema":[{"id":"gmailId","displayName":"gmailId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"fromEmail","displayName":"fromEmail","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"subject","displayName":"subject","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"freshContent","displayName":"freshContent","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"threadId","displayName":"threadId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"gmailDate","displayName":"gmailDate","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"backlogId","displayName":"backlogId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true}],"attemptToConvertTypes":false,"convertFieldsToString":true},"mode":"each","options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1040,-848],"id":"c0547dd4-29e8-4a15-a872-e8e75a600ee4","name":"N06: Execute PlannerEmail Workflow"}],"connections":{"N03: Get Thread":{"main":[[{"node":"N04: Split Out Messages","type":"main","index":0}]]},"N04: Split Out Messages":{"main":[[{"node":"N05: Get Full Message Details","type":"main","index":0}]]},"N05: Get Full Message Details":{"main":[[{"node":"N06: Execute PlannerEmail Workflow","type":"main","index":0}]]},"N02: Get Initial Message":{"main":[[{"node":"N03: Get Thread","type":"main","index":0}]]},"N06: Execute PlannerEmail Workflow":{"main":[[]]},"N00: Subworkflow Start":{"main":[[{"node":"N02: Get Initial Message","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"N00: Subworkflow Start":[{"json":{"query":{"id":"197f63d0bff9ad49","backlogId":"2371db9b-a441-81f5-9d6e-d4e258bfa4f1"}}}]},"versionId":"75f31444-fabb-479b-90c6-ed0d0399998a","triggerCount":1,"tags":[]},{"createdAt":"2025-07-21T18:36:34.270Z","updatedAt":"2025-07-31T05:11:36.000Z","id":"8RN0MaJhePC8Btul","name":"Backlog to Planners v20250724-000215-crossref-v2","active":false,"isArchived":true,"nodes":[{"parameters":{"httpMethod":"POST","path":"backlog-to-planners","options":{}},"id":"webhook-input","name":"N01: Webhook Input","type":"n8n-nodes-base.webhook","typeVersion":1.1,"position":[200,-550],"webhookId":"backlog-to-planners"},{"parameters":{"jsCode":"// Node 2: Input Validation & Processing\n// Based on workflow-algorithm.md Step 1 Node 2: lines 57-112\n// Context: webhook data comes in $json.body\n\nfunction validateInput(webhookData) {\n  console.log('🔍 Webhook input received:', JSON.stringify(webhookData, null, 2));\n  \n  // Handle webhook data structure - data is in body\n  const record = webhookData.body || webhookData.query || webhookData;\n  \n  // Extract date and status with fallback patterns\n  const dateStr = record.Date || record.date || record.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content;\n  const status = record.Status || record.status || record.properties?.Status?.select?.name;\n  const backlogId = record.id || record.backlogId || webhookData.id || 'temp-id';\n  \n  // Check required fields (following existing validation patterns)\n  if (!dateStr || dateStr === '' || dateStr.trim() === '' || !status || status === '' || status.trim() === '') {\n    console.error('❌ Missing required fields');\n    console.error('dateStr:', dateStr, 'status:', status);\n    return {\n      success: false,\n      error: \"Invalid backlog record: missing Date or Status\",\n      details: \"Backlog record must have both Date and Status fields\"\n    };\n  }\n  \n  // Check status is not complete (following 3soZAbHUm8vgIkXp pattern)\n  if (status === \"complete\") {\n    console.log('ℹ️ Backlog already complete, skipping');\n    return { \n      success: true, \n      skip: true, \n      reason: \"Already complete\" \n    };\n  }\n  \n  // Validate date format (YYYY-MM-DD as used in context)\n  if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(dateStr)) {\n    console.error('❌ Invalid date format:', dateStr);\n    return {\n      success: false,\n      error: \"Invalid date format\",\n      details: \"Date must be in YYYY-MM-DD format\"\n    };\n  }\n  \n  console.log(`✅ Valid backlog record for date: ${dateStr}`);\n  return { \n    success: true, \n    valid: true, \n    gmailDate: dateStr,\n    backlogId: backlogId\n  };\n}\n\n// Execute validation\nconst result = validateInput($json);\nreturn result;"},"id":"input-validation","name":"N02: Input Validation & Processing","type":"n8n-nodes-base.code","typeVersion":2,"position":[420,-550]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"validation_success","leftValue":"={{$json.success}}","rightValue":false,"operator":{"type":"boolean","operation":"notEquals"}}]},"options":{}},"id":"validation-check","name":"N03: Validation Success Check","type":"n8n-nodes-base.if","typeVersion":2,"position":[640,-550]},{"parameters":{"jsCode":"// Node 4: Gmail Date Format Conversion\n// Based on workflow-algorithm.md Step 2 Node 4: lines 123-148\n// Context: workflow-s9WyUIs3imhnnkzr.json Gmail query construction patterns\n\nfunction convertGmailDate(gmailDate) {\n  // Convert YYYY-MM-DD to YYYY/MM/DD format for Gmail API\n  const formattedDate = gmailDate.replace(/-/g, '/');\n  \n  // Calculate next day for range query (exact pattern from s9WyUIs3imhnnkzr)\n  const dateObj = new Date(gmailDate + 'T12:00:00');\n  const nextDay = new Date(dateObj);\n  nextDay.setDate(dateObj.getDate() + 1);\n  const nextDayFormatted = `${nextDay.getFullYear()}/${String(nextDay.getMonth() + 1).padStart(2, '0')}/${String(nextDay.getDate()).padStart(2, '0')}`;\n  \n  // Build Gmail query exactly as in existing workflow\n  const gmailQuery = `after:${formattedDate} before:${nextDayFormatted} in:\\\"--Watch/VC\\\"`;\n  console.log(`📧 Gmail query: ${gmailQuery}`);\n  \n  return {\n    gmailQuery: gmailQuery,\n    originalDate: gmailDate,\n    backlogId: $json.backlogId\n  };\n}\n\n// Execute conversion\nconst result = convertGmailDate($json.gmailDate);\nreturn result;"},"id":"date-conversion","name":"N04: Gmail Date Format Conversion","type":"n8n-nodes-base.code","typeVersion":2,"position":[860,-625]},{"parameters":{"operation":"getAll","limit":100,"filters":{"q":"={{$('N04: Gmail Date Format Conversion').first().json.gmailQuery}}"}},"id":"gmail-search","name":"N05: Search Gmail Messages","type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[1080,-625],"retryOnFail":true,"maxTries":3,"waitBetweenTries":2000,"webhookId":"3c0dcd74-eb0d-471e-a9f3-89ee37cf03be","alwaysOutputData":true,"credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}},"onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Node 6: Process Gmail Results & Extract Data\n// Based on workflow-algorithm.md Step 3 Node 6: lines 151-200\n// Context: workflow-s9WyUIs3imhnnkzr.json message processing patterns\n// Schema: context/notion-schema-planneremail.json\n\nfunction processEmailData(gmailMessages, originalData, internalDateLookup) {\n  console.log(`📧 Processing ${gmailMessages.length} Gmail messages`);\n  \n  const processedEmails = [];\n  const processedPersons = [];\n  const processedFirms = [];\n  const seenEmails = new Set();\n  const seenDomains = new Set();\n  \n  // Helper function to extract email address from \"Name <email@domain.com>\" format\n  function extractEmailAddress(fromValue) {\n    if (!fromValue) return null;\n    const match = fromValue.match(/<([^>]+)>/) || fromValue.match(/^([\\w\\.-]+@[\\w\\.-]+\\.[\\w]+)$/);\n    return match ? match[1] : fromValue;\n  }\n  \n  // Helper function to extract domain from email\n  function extractDomain(email) {\n    if (!email || !email.includes('@')) return null;\n    return email.split('@')[1];\n  }\n  \n  // Helper function to decode base64 content\n  function decodeBase64(data) {\n    try {\n      return Buffer.from(data, 'base64').toString('utf-8');\n    } catch (e) {\n      return data;\n    }\n  }\n  \n  // Helper function to extract fresh content (remove reply chains)\n  function extractFreshContent(payload) {\n    let content = '';\n    \n    if (payload.parts) {\n      // Multi-part message\n      for (const part of payload.parts) {\n        if (part.mimeType === 'text/plain' && part.body?.data) {\n          content += decodeBase64(part.body.data);\n        }\n      }\n    } else if (payload.body?.data) {\n      // Single part message\n      content = decodeBase64(payload.body.data);\n    }\n    \n    // Remove reply chains (content after \"On ... wrote:\" or similar patterns)\n    const replyPatterns = [\n      /\\n\\s*On\\s+.*wrote:/i,\n      /\\n\\s*From:\\s+.*\\n/i,\n      /\\n\\s*---+\\s*Original Message\\s*---+/i,\n      /\\n\\s*>+/m\n    ];\n    \n    for (const pattern of replyPatterns) {\n      const match = content.match(pattern);\n      if (match) {\n        content = content.substring(0, match.index).trim();\n        break;\n      }\n    }\n    \n    return content.trim();\n  }\n  \n  // Process each Gmail message\n  for (const message of gmailMessages) {\n    // Handle both header format (full API) and direct format (webhook API)\n    let fromValue, subjectValue;\n    \n    if (message.payload?.headers) {\n      // Full Gmail API format\n      const headers = message.payload.headers;\n      const fromHeader = headers.find(h => h.name === 'From');\n      const subjectHeader = headers.find(h => h.name === 'Subject');\n      if (!fromHeader || !subjectHeader) continue;\n      fromValue = fromHeader.value;\n      subjectValue = subjectHeader.value;\n    } else {\n      // Direct format (From/Subject at root level)\n      fromValue = message.From;\n      subjectValue = message.Subject;\n    }\n    \n    if (!fromValue || !subjectValue) continue;\n    \n    // Extract email data\n    const fromEmail = extractEmailAddress(fromValue);\n    const domain = extractDomain(fromEmail);\n    const freshContent = message.snippet || extractFreshContent(message.payload);\n    // Extract Gmail timestamp from internalDate lookup (Unix milliseconds) or fall back to date only\n    let gmailDate = originalData.originalDate; // fallback to date only\n    const internalDate = internalDateLookup[message.id];\n    console.log(`🔍 Message ${message.id}: lookup=${internalDate}, fallback=${gmailDate}`);\n    if (internalDate) {\n      gmailDate = new Date(parseInt(internalDate)).toISOString();\n      console.log(`✅ Updated timestamp: ${gmailDate}`);\n    } else {\n      console.log(`❌ No internalDate found for message ${message.id}`);\n    }\n    const currentTimestamp = new Date().toISOString();\n    \n    if (!fromEmail || !domain) continue;\n    \n    // Create email record for each message\n    processedEmails.push({\n      gmailId: message.id,\n      fromEmail: fromEmail,\n      subject: subjectValue,\n      freshContent: freshContent,\n      threadId: message.threadId,\n      gmailDate: gmailDate,\n      dateCreated: currentTimestamp,\n      status: 'pending',\n      backlogId: originalData.backlogId\n    });\n    \n    // Create person record (deduplicated)\n    if (!seenEmails.has(fromEmail)) {\n      processedPersons.push({\n        emailAddress: fromEmail,\n        status: 'pending',\n        backlogId: originalData.backlogId\n      });\n      seenEmails.add(fromEmail);\n    }\n    \n    // Create firm record (deduplicated)\n    if (!seenDomains.has(domain)) {\n      processedFirms.push({\n        domain: domain,\n        status: 'pending',\n        backlogId: originalData.backlogId\n      });\n      seenDomains.add(domain);\n    }\n  }\n  \n  console.log(`✅ Processed: ${processedEmails.length} emails, ${processedPersons.length} persons, ${processedFirms.length} firms`);\n  \n  return {\n    emails: processedEmails,\n    persons: processedPersons,\n    firms: processedFirms,\n    emailCount: processedEmails.length,\n    originalDate: originalData.originalDate,\n    backlogId: originalData.backlogId\n  };\n}\n\n// Get Gmail messages from input\nconst gmailData = $input.all();\nconst gmailMessages = gmailData.length > 0 ? gmailData.map(item => item.json) : [];\n\n// Get original Gmail data with internalDate from Node 5 for timestamp extraction\nconst originalGmailData = $('N05: Search Gmail Messages').all();\nconst originalMessages = originalGmailData.length > 0 ? originalGmailData.map(item => item.json) : [];\n\n// Create lookup map for internalDate by message ID\nconst internalDateLookup = {};\noriginalMessages.forEach(msg => {\n  if (msg.id && msg.internalDate) {\n    internalDateLookup[msg.id] = msg.internalDate;\n    console.log(`📊 Lookup: ${msg.id} -> ${msg.internalDate}`);\n  }\n});\nconsole.log(`📊 Total lookup entries: ${Object.keys(internalDateLookup).length}`);\n\n// Get original data from previous node\nconst originalData = {\n  originalDate: $('N04: Gmail Date Format Conversion').first().json.originalDate,\n  backlogId: $('N04: Gmail Date Format Conversion').first().json.backlogId\n};\n\n// Check for empty results using reference workflow pattern\n// Gmail returns empty object {} when no messages found\nif (!gmailMessages || gmailMessages.length === 0 || \n    (gmailMessages.length === 1 && (!gmailMessages[0] || !gmailMessages[0].id))) {\n  console.log(\"ℹ️ No messages found for the specified date\");\n  return {\n    emails: [],\n    persons: [],\n    firms: [],\n    emailCount: 0,\n    originalDate: originalData.originalDate,\n    backlogId: originalData.backlogId\n  };\n}\n\n// Process the data with lookup map\nconst result = processEmailData(gmailMessages, originalData, internalDateLookup);\nreturn result;\n"},"id":"gmail-processing","name":"N08: Process Gmail Results & Extract Data","type":"n8n-nodes-base.code","typeVersion":2,"position":[1960,-610]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"emails_found","leftValue":"={{$json.emailCount}}","rightValue":0,"operator":{"type":"number","operation":"notEquals"}}],"combinator":"and"},"options":{}},"id":"email-check","name":"N09: Check Emails Found","type":"n8n-nodes-base.if","typeVersion":2,"position":[2180,-610]},{"parameters":{"jsCode":"// Node 9: Create Cross-References with Merged Input\n// Based on workflow-algorithm.md Step 5 Node 9: lines 272-290\n// Updated: Process merged input from Merge node and identify records by properties\n// Context: Merge node combines outputs from Node 8A/8B/8C - need to classify by properties\n\nfunction createCrossReferencesFromMergedInput() {\n  console.log('🔗 Creating cross-references from merged input data');\n  \n  // Get original processed data from Node 6 for backlogId and context\n  const processedData = $('N08: Process Gmail Results & Extract Data').first().json;\n  const { emails, persons, firms, backlogId } = processedData;\n  \n  // Get merged input data from the Merge node\n  const mergedInputs = $input.all();\n  console.log(`📥 Received ${mergedInputs.length} inputs from Merge node`);\n  \n  // Extract UUIDs from all merged inputs\n  const emailRecords = [];\n  const personRecords = [];\n  const firmRecords = [];\n  \n  // Process each input from the merge node\n  mergedInputs.forEach((input, index) => {\n    const record = input.json;\n    console.log(`Processing merge input ${index + 1}:`, record.id);\n    \n    // Determine record type based on properties (not index)\n    // Email records have property_gmail_id\n    // Person records have property_email_address\n    // Firm records have property_domain\n    if (record.property_gmail_id) {\n      emailRecords.push(record);\n      console.log(`  → Identified as EMAIL record: ${record.property_gmail_id}`);\n    } else if (record.property_email_address) {\n      personRecords.push(record);\n      console.log(`  → Identified as PERSON record: ${record.property_email_address}`);\n    } else if (record.property_domain) {\n      firmRecords.push(record);\n      console.log(`  → Identified as FIRM record: ${record.property_domain}`);\n    } else {\n      console.log(`  → UNKNOWN record type:`, Object.keys(record));\n    }\n  });\n  \n  console.log(`📧 Email UUIDs: ${emailRecords.map(e => e.id).join(', ')}`);\n  console.log(`👤 Person UUIDs: ${personRecords.map(p => p.id).join(', ')}`);\n  console.log(`🏢 Firm UUIDs: ${firmRecords.map(f => f.id).join(', ')}`);\n  \n  // Build relation arrays for the backlog record\n  const plannerEmailIds = emailRecords.map(record => record.id);\n  const plannerPersonIds = personRecords.map(record => record.id);\n  const plannerFirmIds = firmRecords.map(record => record.id);\n  \n  console.log(`✅ Relations for backlog ${backlogId}:`);\n  console.log(`  rel:PlannerEmail: [${plannerEmailIds.join(', ')}]`);\n  console.log(`  rel:PlannerPerson: [${plannerPersonIds.join(', ')}]`);\n  console.log(`  rel:PlannerFirm: [${plannerFirmIds.join(', ')}]`);\n  \n  return {\n    backlogId: backlogId,\n    originalDate: processedData.originalDate,\n    emailCount: emails.length,\n    relations: {\n      plannerEmailIds: plannerEmailIds,\n      plannerPersonIds: plannerPersonIds,\n      plannerFirmIds: plannerFirmIds\n    },\n    // Keep original data for context\n    createdEmails: emailRecords,\n    createdPersons: personRecords,\n    createdFirms: firmRecords\n  };\n}\n\n// Execute cross-reference creation from merged input\nconst result = createCrossReferencesFromMergedInput();\nreturn result;"},"id":"cross-references","name":"N13: Create Cross-References","type":"n8n-nodes-base.code","typeVersion":2,"position":[3060,-700]},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{$json.backlogId}}","mode":"id"},"propertiesUi":{"propertyValues":[{"key":"Status|select","selectValue":"={{$json.status || 'planning'}}"},{"key":"Date Started|date","date":"={{ $now }}","timezone":"US/Eastern"},{"key":"rel:PlannerEmail|relation","relationValue":"={{$json.relations.plannerEmailIds}}"},{"key":"rel:PlannerPerson|relation","relationValue":"={{$json.relations.plannerPersonIds}}"},{"key":"rel:PlannerFirm|relation","relationValue":"={{$json.relations.plannerFirmIds}}"}]},"options":{}},"id":"update-backlog-status","name":"N14: Update Backlog Status","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3280,-1080],"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// N15.a: Split PlannerEmail IDs with proper relationship mapping\n// Purpose: Transform N13 email records with their specific person/firm relationships\n\nconst crossRefData = $('N13: Create Cross-References').first().json;\nconst createdEmails = crossRefData.createdEmails || [];\nconst createdPersons = crossRefData.createdPersons || [];\nconst createdFirms = crossRefData.createdFirms || [];\n\nconsole.log(`📧 Processing ${createdEmails.length} emails with specific relationships`);\n\n// Create email→person→firm mapping based on actual email data\nconst results = createdEmails.map(emailRecord => {\n  // Find the person who sent this email\n  const emailAddress = emailRecord.property_from_email;\n  const personRecord = createdPersons.find(p => p.property_email_address === emailAddress);\n  \n  // Find the firm for this person's domain\n  const domain = emailAddress ? emailAddress.split('@')[1] : null;\n  const firmRecord = createdFirms.find(f => f.property_domain === domain);\n  \n  console.log(`📧 Email ${emailRecord.property_gmail_id}:`);\n  console.log(`  → From: ${emailAddress}`);\n  console.log(`  → Person: ${personRecord?.id || 'NOT_FOUND'}`);\n  console.log(`  → Domain: ${domain}`);\n  console.log(`  → Firm: ${firmRecord?.id || 'NOT_FOUND'}`);\n  \n  return {\n    recordId: emailRecord.id,\n    specificPersonId: personRecord?.id || null,\n    specificFirmId: firmRecord?.id || null,\n    emailAddress: emailAddress,\n    domain: domain\n  };\n});\n\nconsole.log(`📧 Created ${results.length} emails with specific relationships`);\nreturn results.map(item => ({json: item}));"},"id":"create-email-updates","name":"N15.a: Split Email IDs","type":"n8n-nodes-base.code","typeVersion":2,"position":[3280,-860]},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{$json.recordId}}","mode":"id"},"propertiesUi":{"propertyValues":[{"key":"rel:Backlog|relation","relationValue":"={{[$('N13: Create Cross-References').first().json.backlogId]}}"},{"key":"rel:PlannerPerson|relation","relationValue":"={{$json.specificPersonId ? [$json.specificPersonId] : []}}"},{"key":"rel:PlannerFirm|relation","relationValue":"={{$json.specificFirmId ? [$json.specificFirmId] : []}}"}]},"options":{}},"id":"update-planner-email-xrefs","name":"N16.a: Update PlannerEmail Relations","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3500,-860],"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// N15.b: Split PlannerPerson IDs with specific email/firm relationships\n// Purpose: Transform N13 person records with their specific email/firm relationships\n\nconst crossRefData = $('N13: Create Cross-References').first().json;\nconst createdEmails = crossRefData.createdEmails || [];\nconst createdPersons = crossRefData.createdPersons || [];\nconst createdFirms = crossRefData.createdFirms || [];\n\nconsole.log(`🧑 Processing ${createdPersons.length} persons with specific relationships`);\n\n// Create person→emails→firm mapping\nconst results = createdPersons.map(personRecord => {\n  // Find all emails from this person\n  const personEmail = personRecord.property_email_address;\n  const personEmails = createdEmails.filter(e => e.property_from_email === personEmail);\n  \n  // Find the firm for this person's domain\n  const domain = personEmail ? personEmail.split('@')[1] : null;\n  const firmRecord = createdFirms.find(f => f.property_domain === domain);\n  \n  console.log(`🧑 Person ${personEmail}:`);\n  console.log(`  → Emails: [${personEmails.map(e => e.id).join(', ')}]`);\n  console.log(`  → Domain: ${domain}`);\n  console.log(`  → Firm: ${firmRecord?.id || 'NOT_FOUND'}`);\n  \n  return {\n    recordId: personRecord.id,\n    specificEmailIds: personEmails.map(e => e.id),\n    specificFirmId: firmRecord?.id || null,\n    emailAddress: personEmail,\n    domain: domain\n  };\n});\n\nconsole.log(`🧑 Created ${results.length} persons with specific relationships`);\nreturn results.map(item => ({json: item}));"},"id":"create-person-updates","name":"N15.b: Split Person IDs","type":"n8n-nodes-base.code","typeVersion":2,"position":[3280,-610]},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{$json.recordId}}","mode":"id"},"propertiesUi":{"propertyValues":[{"key":"rel:Backlog|relation","relationValue":"={{[$('N13: Create Cross-References').first().json.backlogId]}}"},{"key":"rel:PlannerEmail|relation","relationValue":"={{$json.specificEmailIds || []}}"},{"key":"rel:PlannerFirm|relation","relationValue":"={{$json.specificFirmId ? [$json.specificFirmId] : []}}"}]},"options":{}},"id":"update-planner-person-xrefs","name":"N16.b: Update PlannerPerson Relations","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3500,-610],"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// N15.c: Split PlannerFirm IDs with specific email/person relationships\n// Purpose: Transform N13 firm records with their specific email/person relationships\n\nconst crossRefData = $('N13: Create Cross-References').first().json;\nconst createdEmails = crossRefData.createdEmails || [];\nconst createdPersons = crossRefData.createdPersons || [];\nconst createdFirms = crossRefData.createdFirms || [];\n\nconsole.log(`🏢 Processing ${createdFirms.length} firms with specific relationships`);\n\n// Create firm→persons→emails mapping\nconst results = createdFirms.map(firmRecord => {\n  // Find all persons from this firm domain\n  const firmDomain = firmRecord.property_domain;\n  const firmPersons = createdPersons.filter(p => {\n    const personDomain = p.property_email_address ? p.property_email_address.split('@')[1] : null;\n    return personDomain === firmDomain;\n  });\n  \n  // Find all emails from persons at this firm\n  const firmEmails = createdEmails.filter(e => {\n    const emailDomain = e.property_from_email ? e.property_from_email.split('@')[1] : null;\n    return emailDomain === firmDomain;\n  });\n  \n  console.log(`🏢 Firm ${firmDomain}:`);\n  console.log(`  → Persons: [${firmPersons.map(p => p.id).join(', ')}]`);\n  console.log(`  → Emails: [${firmEmails.map(e => e.id).join(', ')}]`);\n  \n  return {\n    recordId: firmRecord.id,\n    specificPersonIds: firmPersons.map(p => p.id),\n    specificEmailIds: firmEmails.map(e => e.id),\n    domain: firmDomain\n  };\n});\n\nconsole.log(`🏢 Created ${results.length} firms with specific relationships`);\nreturn results.map(item => ({json: item}));"},"id":"create-firm-updates","name":"N15.c: Split Firm IDs","type":"n8n-nodes-base.code","typeVersion":2,"position":[3280,-410]},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{$json.recordId}}","mode":"id"},"propertiesUi":{"propertyValues":[{"key":"rel:Backlog|relation","relationValue":"={{[$('N13: Create Cross-References').first().json.backlogId]}}"},{"key":"rel:PlannerEmail|relation","relationValue":"={{$json.specificEmailIds || []}}"},{"key":"rel:PlannerPerson|relation","relationValue":"={{$json.specificPersonIds || []}}"}]},"options":{}},"id":"update-planner-firm-xrefs","name":"N16.c: Update PlannerFirm Relations","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3500,-410],"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"numberInputs":4},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[3720,-820],"id":"merge2-cross-references","name":"N17: Merge Cross-Reference Updates"},{"parameters":{"jsCode":"// Node 11: Success Output\n// Based on workflow-algorithm.md Step 7 Node 11: lines 312-320\n// Context: workflow-3soZAbHUm8vgIkXp.json success response patterns\n// Fixed: Handle both TRUE branch (from Node 10) and FALSE branch (from Node 7) cases\n\nfunction generateSuccessResponse() {\n  // Check if we came from the TRUE branch (Node 9/10 executed) or FALSE branch (Node 7 direct)\n  let crossRefData = null;\n  let processedData = null;\n  \n  try {\n    // Try to get Node 9 data (TRUE branch - emails were processed)\n    crossRefData = $('N13: Create Cross-References').first().json;\n    console.log('📊 TRUE branch: Using Node 9 cross-reference data');\n  } catch (e) {\n    // Node 9 wasn't executed - we're in FALSE branch\n    console.log('📊 FALSE branch: Node 9 not executed, using Node 6 data');\n  }\n  \n  if (crossRefData) {\n    // TRUE branch: Use Node 9 data with actual creation counts\n    const response = {\n      success: true,\n      plannerEmailsCreated: crossRefData.createdEmails?.length || 0,\n      plannerPersonsCreated: crossRefData.createdPersons?.length || 0,\n      plannerFirmsCreated: crossRefData.createdFirms?.length || 0,\n      backlogStatus: 'planning',\n      timestamp: new Date().toISOString(),\n      processedDate: crossRefData.originalDate,\n      backlogId: crossRefData.backlogId\n    };\n    console.log('✅ TRUE branch completed - records created');\n    return response;\n  } else {\n    // FALSE branch: Use Node 6 data with zero counts\n    processedData = $('N08: Process Gmail Results & Extract Data').first().json;\n    const response = {\n      success: true,\n      plannerEmailsCreated: 0,\n      plannerPersonsCreated: 0,\n      plannerFirmsCreated: 0,\n      backlogStatus: 'complete',\n      timestamp: new Date().toISOString(),\n      processedDate: processedData.originalDate,\n      backlogId: processedData.backlogId\n    };\n    console.log('✅ FALSE branch completed - no emails found');\n    return response;\n  }\n}\n\n// Generate success response for both TRUE and FALSE branch cases\nconst result = generateSuccessResponse();\nreturn result;"},"id":"success-output","name":"N18: Success Output","type":"n8n-nodes-base.code","typeVersion":2,"position":[3760,100]},{"parameters":{"numberInputs":3},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[2840,-700],"id":"309b054c-1bed-4ae7-ba89-b88e1d30db86","name":"N12: Merge Planner Creates"},{"parameters":{"fieldToSplitOut":"emails","options":{}},"id":"split-emails","name":"N10.a: Split Emails","type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[2400,-1010]},{"parameters":{"fieldToSplitOut":"persons","options":{}},"id":"split-persons","name":"N10.b: Split Persons","type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[2400,-700]},{"parameters":{"fieldToSplitOut":"firms","options":{}},"id":"split-firms","name":"N10.c: Split Firms","type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[2400,-425]},{"parameters":{"workflowId":{"__rl":true,"value":"4c1RPy0PYoxFCCxj","mode":"list","cachedResultName":"PlannerEmail: Create v20250723-012314"},"workflowInputs":{"mappingMode":"defineBelow","value":{"gmailId":"={{ $json.gmailId }}","fromEmail":"={{ $json.fromEmail }}","subject":"={{ $json.subject }}","freshContent":"={{ $json.freshContent }}","threadId":"={{ $json.threadId }}","gmailDate":"={{ $json.gmailDate }}"},"matchingColumns":["gmailId","fromEmail","subject","freshContent","threadId","gmailDate"],"schema":[{"id":"gmailId","displayName":"gmailId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"fromEmail","displayName":"fromEmail","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"subject","displayName":"subject","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"freshContent","displayName":"freshContent","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"threadId","displayName":"threadId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"gmailDate","displayName":"gmailDate","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"mode":"each","options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2620,-1010],"name":"N11.a: Call PlannerEmail Create","id":"9688569a-98e5-4b57-bc35-2825eb7f6739"},{"parameters":{"workflowId":{"__rl":true,"value":"6Noi3vqZOdQm1uOY","mode":"list","cachedResultName":"PlannerPerson: Create v20250723-014847"},"workflowInputs":{"mappingMode":"defineBelow","value":{"emailAddress":"={{ $json.emailAddress }}"},"matchingColumns":["emailAddress"],"schema":[{"id":"emailAddress","displayName":"emailAddress","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"mode":"each","options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2620,-700],"name":"N11.b: Call PlannerPerson Create","id":"62b1bef6-42f1-4c27-8097-82a61d5ad4e8"},{"parameters":{"workflowId":{"__rl":true,"value":"AdTfnAEHPvMzlETS","mode":"list","cachedResultName":"PlannerFirm: Create v20250723-014632"},"workflowInputs":{"mappingMode":"defineBelow","value":{"domain":"={{ $json.domain }}"},"matchingColumns":["domain"],"schema":[{"id":"domain","displayName":"domain","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"mode":"each","options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2620,-425],"name":"N11.c: Call PlannerFirm Create","id":"3557afff-25df-4a46-bde5-b46bf00f4092"},{"parameters":{"jsCode":"// N05.6: No Emails Found - Create Empty Success Output\n// Purpose: Generate N13-compatible output for zero emails case\n// Routes directly to N14 to update Backlog status as complete\n\nconst originalData = $('N04: Gmail Date Format Conversion').first().json;\nconst backlogId = originalData.backlogId;\nconst originalDate = originalData.originalDate;\n\nconsole.log(`ℹ️ No emails found for ${originalDate}, creating empty success output`);\n\n// Create N13-compatible output with empty relations and complete status\nconst result = {\n  backlogId: backlogId,\n  originalDate: originalDate,\n  emailCount: 0,\n  status: 'complete',\n  relations: {\n    plannerEmailIds: [],\n    plannerPersonIds: [],\n    plannerFirmIds: []\n  },\n  createdEmails: [],\n  createdPersons: [],\n  createdFirms: []\n};\n\nconsole.log(`✅ Created empty success output for backlog ${backlogId} with status: complete`);\nreturn result;"},"id":"no-emails-found","name":"N05.6: No Emails Found","type":"n8n-nodes-base.code","typeVersion":2,"position":[3060,-1160]},{"parameters":{"resource":"thread","operation":"get","threadId":"={{ $json.threadId }}","options":{"returnOnlyMessages":false}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[1560,-700],"id":"fcb487c2-402c-404a-8481-481c711b6410","name":"N06: Get Gmail Thread","webhookId":"c98908fe-82ba-4170-acc8-3c0df92de373","credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}},{"parameters":{"fieldToSplitOut":"messages","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[1740,-610],"id":"1172f547-6e90-4bb8-b450-b2f095fa5ce8","name":"N07: Split Thread Messages"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"emails_found","leftValue":"={{$json.id}}","rightValue":"","operator":{"type":"string","operation":"notExists","singleValue":true}}],"combinator":"and"},"options":{}},"id":"emails-found-check","name":"N05.5: Email Not Found?","type":"n8n-nodes-base.if","typeVersion":2,"position":[1300,-860]}],"connections":{"N01: Webhook Input":{"main":[[{"node":"N02: Input Validation & Processing","type":"main","index":0}]]},"N02: Input Validation & Processing":{"main":[[{"node":"N03: Validation Success Check","type":"main","index":0}]]},"N03: Validation Success Check":{"main":[[{"node":"N04: Gmail Date Format Conversion","type":"main","index":0}],[{"node":"N18: Success Output","type":"main","index":0}]]},"N04: Gmail Date Format Conversion":{"main":[[{"node":"N05: Search Gmail Messages","type":"main","index":0}]]},"N05: Search Gmail Messages":{"main":[[{"node":"N05.5: Email Not Found?","type":"main","index":0}],[{"node":"N18: Success Output","type":"main","index":0}]]},"N05.6: No Emails Found":{"main":[[{"node":"N14: Update Backlog Status","type":"main","index":0}]]},"N08: Process Gmail Results & Extract Data":{"main":[[{"node":"N09: Check Emails Found","type":"main","index":0}]]},"N09: Check Emails Found":{"main":[[{"node":"N10.a: Split Emails","type":"main","index":0},{"node":"N10.b: Split Persons","type":"main","index":0},{"node":"N10.c: Split Firms","type":"main","index":0}],[{"node":"N18: Success Output","type":"main","index":0}]]},"N13: Create Cross-References":{"main":[[{"node":"N14: Update Backlog Status","type":"main","index":0},{"node":"N15.a: Split Email IDs","type":"main","index":0},{"node":"N15.b: Split Person IDs","type":"main","index":0},{"node":"N15.c: Split Firm IDs","type":"main","index":0}]]},"N14: Update Backlog Status":{"main":[[{"node":"N17: Merge Cross-Reference Updates","type":"main","index":0}]]},"N15.a: Split Email IDs":{"main":[[{"node":"N16.a: Update PlannerEmail Relations","type":"main","index":0}]]},"N16.a: Update PlannerEmail Relations":{"main":[[{"node":"N17: Merge Cross-Reference Updates","type":"main","index":1}]]},"N15.b: Split Person IDs":{"main":[[{"node":"N16.b: Update PlannerPerson Relations","type":"main","index":0}]]},"N16.b: Update PlannerPerson Relations":{"main":[[{"node":"N17: Merge Cross-Reference Updates","type":"main","index":2}]]},"N15.c: Split Firm IDs":{"main":[[{"node":"N16.c: Update PlannerFirm Relations","type":"main","index":0}]]},"N16.c: Update PlannerFirm Relations":{"main":[[{"node":"N17: Merge Cross-Reference Updates","type":"main","index":3}]]},"N17: Merge Cross-Reference Updates":{"main":[[{"node":"N18: Success Output","type":"main","index":0}]]},"N12: Merge Planner Creates":{"main":[[{"node":"N13: Create Cross-References","type":"main","index":0}]]},"N10.a: Split Emails":{"main":[[{"node":"N11.a: Call PlannerEmail Create","type":"main","index":0}]]},"N10.b: Split Persons":{"main":[[{"node":"N11.b: Call PlannerPerson Create","type":"main","index":0}]]},"N10.c: Split Firms":{"main":[[{"node":"N11.c: Call PlannerFirm Create","type":"main","index":0}]]},"N11.a: Call PlannerEmail Create":{"main":[[{"node":"N12: Merge Planner Creates","type":"main","index":0}]]},"N11.b: Call PlannerPerson Create":{"main":[[{"node":"N12: Merge Planner Creates","type":"main","index":1}]]},"N11.c: Call PlannerFirm Create":{"main":[[{"node":"N12: Merge Planner Creates","type":"main","index":2}]]},"N06: Get Gmail Thread":{"main":[[{"node":"N07: Split Thread Messages","type":"main","index":0}]]},"N07: Split Thread Messages":{"main":[[{"node":"N08: Process Gmail Results & Extract Data","type":"main","index":0}]]},"N05.5: Email Not Found?":{"main":[[{"node":"N05.6: No Emails Found","type":"main","index":0}],[{"node":"N06: Get Gmail Thread","type":"main","index":0}]]}},"settings":{},"staticData":null,"meta":null,"pinData":{"N01: Webhook Input":[{"json":{"headers":{"host":"localhost:5678","user-agent":"curl/8.5.0","accept":"*/*","content-type":"application/json","content-length":"84"},"params":{},"query":{},"body":{"Date":"2025-07-13","Status":"pending","id":"2381db9b-a441-8138-afcf-c10df0e96f80"},"webhookUrl":"http://localhost:5678/webhook/backlog-to-planners","executionMode":"production"}}]},"versionId":"6313a870-bad6-4324-8cb6-5444389f8b03","triggerCount":1,"tags":[]},{"createdAt":"2025-07-22T15:34:35.621Z","updatedAt":"2025-07-31T05:13:35.000Z","id":"AdTfnAEHPvMzlETS","name":"PlannerFirm: Create v20250729-022547","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"domain","type":"any"},{"name":"backlogId","type":"any"}]}},"id":"125626fc-055d-4ba9-866f-c8e6c05937a5","typeVersion":1.1,"name":"N00: Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[1740,-440]},{"parameters":{"jsCode":"// Node 2: Input Validation & Environment Setup\nconst input = $json;\nconsole.log('🔍 Sub-workflow input received:', JSON.stringify(input, null, 2));\n\n// Validate required field for PlannerFirm creation\nif (!input.domain) {\n  console.error('❌ Missing required field: domain');\n  return {\n    valid: false,\n    error: \"Missing required field: domain\",\n    details: \"Domain must be provided for PlannerFirm creation\"\n  };\n}\n\n// Validate domain format (basic check for valid domain)\nif (typeof input.domain !== 'string' || input.domain.trim() === '') {\n  console.error('❌ Invalid domain format:', input.domain);\n  return {\n    valid: false,\n    error: \"Invalid domain format\",\n    details: \"Domain must be a non-empty string\"\n  };\n}\n\n// Basic domain validation (contains at least one dot)\nif (!input.domain.includes('.')) {\n  console.error('❌ Invalid domain format:', input.domain);\n  return {\n    valid: false,\n    error: \"Invalid domain format\",\n    details: \"Domain must contain at least one dot\"\n  };\n}\n\nconsole.log(`✅ Valid sub-workflow input for domain: ${input.domain}`);\nreturn {\n  valid: true,\n  processedInput: {\n    domain: input.domain.toLowerCase().trim(),\n    backlogId: input.backlogId || ''\n  }\n};"},"id":"input-validation","name":"N01: Input Validation & Environment Setup","type":"n8n-nodes-base.code","typeVersion":2,"position":[1960,-440]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"valid-check","leftValue":"={{ $json.valid }}","rightValue":true,"operator":{"type":"boolean","operation":"equal","rightType":"boolean"}},{"id":"d17daef6-c946-4a6d-8772-c1c9b3e5e1d7","leftValue":"={{ $json.valid }}","rightValue":"true","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"or"},"options":{}},"id":"validation-check","name":"N02: Validation Success Check","type":"n8n-nodes-base.if","typeVersion":2,"position":[2180,-440]},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"2231db9b-a441-8128-8c94-d6f0fceb8644","mode":"list","cachedResultName":"vcdb.PlannerFirm.vn8n","cachedResultUrl":"https://www.notion.so/2231db9ba4418128-8c94d6f0fceb8644"},"filterType":"manual","filters":{"conditions":[{"key":"Domain|title","condition":"equals","titleValue":"={{ $json.processedInput.domain }}"}]},"options":{}},"id":"query-existing","name":"N03: Query Existing PlannerFirm","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2400,-580],"alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// Node 5: Process Query Results\nconst queryResults = $input.all();\nconst inputData = $('N01: Input Validation & Environment Setup').first().json.processedInput;\n\nconsole.log('🔍 Duplicate check results:', queryResults.length, 'records found');\n\n// Check if no results or empty result object\nif (queryResults.length === 0 || !queryResults[0].json || Object.keys(queryResults[0].json).length === 0 || !queryResults[0].json.id) {\n  console.log('✅ No existing record found - will create new');\n  return {\n    recordExists: false,\n    existingRecord: null,\n    inputData: inputData,\n    backlogId: inputData.backlogId,\n    action: \"create_new\"\n  };\n}\n\nif (queryResults.length > 1) {\n  console.warn('⚠️ Multiple records found for domain:', inputData.domain);\n  // Use first record but log the issue\n}\n\nconst existingRecord = queryResults[0].json;\nconsole.log('ℹ️ Existing record found - will return existing');\nconsole.log('📄 Existing record ID:', existingRecord.id);\n\nreturn {\n  recordExists: true,\n  existingRecord: existingRecord,\n  inputData: inputData,\n  backlogId: inputData.backlogId,\n  action: \"found_existing\"\n};"},"id":"process-query","name":"N04: Process Query Results","type":"n8n-nodes-base.code","typeVersion":2,"position":[2620,-540]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"record-exists-condition","leftValue":"={{ $json.recordExists }}","rightValue":true,"operator":{"type":"boolean","operation":"equal"}},{"id":"898cdaad-1e00-4070-a407-46489762c8d2","leftValue":"={{ $json.existingRecord.id }}","rightValue":"found_existing","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"or"},"options":{"ignoreCase":false,"looseTypeValidation":false}},"id":"record-exists-check","name":"N05: Record Exists Check","type":"n8n-nodes-base.if","typeVersion":2,"position":[2840,-540],"alwaysOutputData":false},{"parameters":{"mode":"runOnceForAllItems","jsCode":"// Node 8: Format Database Record Response\nconst input = $json;\nconst action = $('N04: Process Query Results').first().json.action;\n\nconsole.log('✅ Formatting database record');\nconsole.log('📄 Input data:', JSON.stringify(input, null, 2));\n\n// Check if this is coming from the existing record path or new record path\nlet recordData;\n\nif (action === 'found_existing') {\n  // For existing records, the data is already formatted from N04\n  const existingData = $('N04: Process Query Results').first().json.existingRecord;\n  \n  recordData = {\n    id: existingData.id,\n    url: existingData.url,\n    property_domain: existingData.property_domain || '',\n    property_status: existingData.property_status || 'pending',\n    // Relations are already in the right format\n    rel_backlog: existingData.property_rel_backlog?.[0] || null,\n    rel_planner_email: existingData.property_rel_planner_email?.[0] || null,\n    rel_planner_person: existingData.property_rel_planner_person?.[0] || null,\n    rel_firm: existingData.property_rel_firm?.[0] || null,\n    action: action,\n    created_time: existingData.property_created_time || existingData.created_time,\n    last_edited_time: existingData.property_last_edited_time || existingData.last_edited_time\n  };\n} else {\n  // For new records, check if we have input at all\n  if (!input || Object.keys(input).length === 0) {\n    // If no input, get the data from N07 directly\n    const n07Data = $('N07: Query Created Record').first().json;\n    recordData = {\n      id: n07Data.id,\n      url: n07Data.url,\n      property_domain: n07Data.property_domain || '',\n      property_status: n07Data.property_status || 'pending',\n      // Relations are already in the right format\n      rel_backlog: n07Data.property_rel_backlog?.[0] || null,\n      rel_planner_email: n07Data.property_rel_planner_email?.[0] || null,\n      rel_planner_person: n07Data.property_rel_planner_person?.[0] || null,\n      rel_firm: n07Data.property_rel_firm?.[0] || null,\n      action: 'created_new',\n      created_time: n07Data.property_created_time || n07Data.created_time,\n      last_edited_time: n07Data.property_last_edited_time || n07Data.last_edited_time\n    };\n  } else {\n    // If we have input, use it (data comes from N07 with properties at root)\n    recordData = {\n      id: input.id,\n      url: input.url,\n      property_domain: input.property_domain || '',\n      property_status: input.property_status || 'pending',\n      // Relations are already in the right format\n      rel_backlog: input.property_rel_backlog?.[0] || null,\n      rel_planner_email: input.property_rel_planner_email?.[0] || null,\n      rel_planner_person: input.property_rel_planner_person?.[0] || null,\n      rel_firm: input.property_rel_firm?.[0] || null,\n      action: 'created_new',\n      created_time: input.property_created_time || input.created_time,\n      last_edited_time: input.property_last_edited_time || input.last_edited_time\n    };\n  }\n}\n\n// Add execution and workflow information\nrecordData.childExecutionId = $execution.id;\nrecordData.childWorkflowId = $workflow.id;\nrecordData.childWorkflowName = $workflow.name;\n\n// Return in nested structure with database table name\nconst response = {\n  PlannerFirm: recordData\n};\n\nconsole.log('✅ Database record formatted successfully');\nreturn response;"},"id":"format-db-record","name":"N08: Format Database Record","type":"n8n-nodes-base.code","typeVersion":2,"position":[3500,-540]},{"parameters":{"resource":"databasePage","databaseId":"2231db9b-a441-8128-8c94-d6f0fceb8644","title":"={{ $('N04: Process Query Results').first().json.inputData.domain }}","propertiesUi":{"propertyValues":[{"key":"Status|select","selectValue":"pending"},{"key":"rel:Backlog|relation","relationValue":"={{ $('N04: Process Query Results').first().json.backlogId ? [$('N04: Process Query Results').first().json.backlogId] : [] }}"}]},"options":{}},"id":"create-new-record","name":"N06: Create New PlannerFirm Record","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3060,-440],"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// Node 8: Error Output\nconst validationResult = $input.first().json;\n\nconsole.error('❌ Sub-workflow error:', validationResult.error);\n\nreturn {\n  success: false,\n  error: validationResult.error,\n  details: validationResult.details,\n  action: \"error\",\n  timestamp: new Date().toISOString()\n};"},"id":"error-output","name":"N09: Error Output","type":"n8n-nodes-base.code","typeVersion":2,"position":[2400,-340]},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"2231db9b-a441-8128-8c94-d6f0fceb8644","mode":"list","cachedResultName":"vcdb.PlannerFirm.vn8n","cachedResultUrl":"https://www.notion.so/2231db9ba4418128-8c94d6f0fceb8644"},"filterType":"manual","filters":{"conditions":[{"key":"Domain|title","condition":"equals","titleValue":"={{ $('N04: Process Query Results').first().json.inputData.domain }}"}]},"options":{}},"id":"query-created-record","name":"N07: Query Created Record","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3280,-440],"alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}}],"connections":{"N00: Start":{"main":[[{"node":"N01: Input Validation & Environment Setup","type":"main","index":0}]]},"N01: Input Validation & Environment Setup":{"main":[[{"node":"N02: Validation Success Check","type":"main","index":0}]]},"N02: Validation Success Check":{"main":[[{"node":"N03: Query Existing PlannerFirm","type":"main","index":0}],[{"node":"N09: Error Output","type":"main","index":0}]]},"N03: Query Existing PlannerFirm":{"main":[[{"node":"N04: Process Query Results","type":"main","index":0}]]},"N04: Process Query Results":{"main":[[{"node":"N05: Record Exists Check","type":"main","index":0}]]},"N05: Record Exists Check":{"main":[[{"node":"N08: Format Database Record","type":"main","index":0}],[{"node":"N06: Create New PlannerFirm Record","type":"main","index":0}]]},"N06: Create New PlannerFirm Record":{"main":[[{"node":"N07: Query Created Record","type":"main","index":0}]]},"N07: Query Created Record":{"main":[[{"node":"N08: Format Database Record","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"N00: Start":[{"json":{"domain":"hy.ly","backlogId":"2371db9b-a441-81f5-9d6e-d4e258bfa4f1"}}]},"versionId":"dbc0dfce-d21b-499b-afbf-72ddf57818ac","triggerCount":0,"tags":[]},{"createdAt":"2025-07-18T23:13:10.305Z","updatedAt":"2025-07-21T05:25:09.000Z","id":"BB9fhO5B95zudxJI","name":"Prototype 2: Simple People Creation Route Fixed v20250718-191310","active":true,"isArchived":false,"nodes":[{"parameters":{"path":"simple-people-creation","options":{}},"name":"Webhook","type":"n8n-nodes-base.webhook","typeVersion":2,"position":[19.999999999999957,150],"id":"webhook-1","webhookId":"602e3a70-8cdf-4b66-aae1-b75dc986be34"},{"parameters":{"jsCode":"// Validate email input\nconst email = $json.query?.email || $json.email;\n\nif (!email || email.trim() === '') {\n  return {\n    validEmail: false,\n    error: 'Invalid Email',\n    email: null\n  };\n}\n\n// Email format validation\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nif (!emailRegex.test(email.trim())) {\n  return {\n    validEmail: false,\n    error: 'Invalid Email',\n    email: email.trim()\n  };\n}\n\nreturn {\n  validEmail: true,\n  email: email.trim(),\n  error: null\n};"},"name":"Validate Email","type":"n8n-nodes-base.code","typeVersion":2,"position":[239.99999999999994,150],"id":"validate-email-1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"condition-1","leftValue":"={{ $json.validEmail }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"name":"Valid Email Check","type":"n8n-nodes-base.if","typeVersion":2,"position":[459.99999999999994,150],"id":"valid-email-check-1"},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":"2231db9b-a441-815e-8f1b-c799b15513ff","filterType":"manual","filters":{"conditions":[{"key":"Email|title","condition":"equals","titleValue":"={{ $json.email }}"}]},"options":{}},"name":"Check Email Exists","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[680,75],"id":"check-exists-1","alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"condition-1","leftValue":"={{ Object.keys($json).length }}","rightValue":0,"operator":{"type":"number","operation":"equals"}}],"combinator":"and"},"options":{}},"name":"Email Not Found Check","type":"n8n-nodes-base.if","typeVersion":2,"position":[900,75],"id":"email-not-found-check-1"},{"parameters":{"resource":"databasePage","databaseId":"2231db9b-a441-815e-8f1b-c799b15513ff","title":"={{ $('Validate Email').first().json.email }}","propertiesUi":{"propertyValues":[]},"options":{}},"name":"Insert Person","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[1120,0],"id":"insert-person-1","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// Determine final output based on workflow path\nconst validateResult = $('Validate Email').first().json;\n\n// If email validation failed\nif (!validateResult.validEmail) {\n  return {\n    success: false,\n    message: validateResult.error,\n    email: validateResult.email,\n    operation: 'validation_error'\n  };\n}\n\n// Check if we came from Check Email Exists (existing email path)\ntry {\n  const checkExistsResult = $('Check Email Exists').all();\n  if (checkExistsResult && checkExistsResult.length > 0) {\n    return {\n      success: true,\n      message: 'Record exists',\n      email: validateResult.email,\n      operation: 'already_exists'\n    };\n  }\n} catch (e) {\n  // Check Email Exists didn't run - this is the validation error path\n}\n\n// Check if we came from Insert Person (new email path)\ntry {\n  const insertResult = $('Insert Person').all();\n  if (insertResult && insertResult.length > 0 && insertResult[0].json?.id) {\n    return {\n      success: true,\n      message: `Record created for ${validateResult.email}`,\n      email: validateResult.email,\n      recordId: insertResult[0].json.id,\n      operation: 'create'\n    };\n  }\n} catch (e) {\n  // Insert Person didn't run\n}\n\n// Fallback - something went wrong\nreturn {\n  success: false,\n  message: 'ERROR: Unexpected workflow path',\n  email: validateResult.email,\n  operation: 'error'\n};"},"name":"Output","type":"n8n-nodes-base.code","typeVersion":2,"position":[1340,150],"id":"output-1"}],"connections":{"Webhook":{"main":[[{"node":"Validate Email","type":"main","index":0}]]},"Validate Email":{"main":[[{"node":"Valid Email Check","type":"main","index":0}]]},"Valid Email Check":{"main":[[{"node":"Check Email Exists","type":"main","index":0}],[{"node":"Output","type":"main","index":0}]]},"Check Email Exists":{"main":[[{"node":"Email Not Found Check","type":"main","index":0}]]},"Email Not Found Check":{"main":[[{"node":"Insert Person","type":"main","index":0}],[{"node":"Output","type":"main","index":0}]]},"Insert Person":{"main":[[{"node":"Output","type":"main","index":0}]]}},"settings":{"saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveExecutionProgress":true},"staticData":null,"meta":null,"pinData":{},"versionId":"cf68aed3-743f-48b6-9bc6-b143b45978a8","triggerCount":1,"tags":[]},{"createdAt":"2025-08-13T08:53:56.717Z","updatedAt":"2025-08-13T10:59:51.000Z","id":"ECRec8hk1CH6j7QT","name":"My workflow 4","active":false,"isArchived":true,"nodes":[{"parameters":{"multipleMethods":true,"httpMethod":["GET"],"path":"googlea8d6dafe3a85e188.html","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[0,0],"id":"9732022e-4fe3-409b-9052-faadf0904819","name":"Webhook","webhookId":"c69c6c88-f50a-4b0f-a091-7c1c6be77478","alwaysOutputData":true},{"parameters":{"enableResponseOutput":true,"respondWith":"text","responseBody":"google-site-verification: googlea8d6dafe3a85e188.html","options":{"responseCode":200}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[208,-96],"id":"71b372c5-0246-4ad7-b540-0fd1e06aa56b","name":"Respond to Webhook","alwaysOutputData":false}],"connections":{"Webhook":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"3ecb2c96-3a7d-4e63-9b90-451b10fa2a19","triggerCount":1,"tags":[]},{"createdAt":"2025-08-14T16:23:14.986Z","updatedAt":"2025-08-15T05:07:33.000Z","id":"Ghn7lwnwDwP62IS4","name":"My workflow 6","active":false,"isArchived":true,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,0],"id":"1db6a0cc-333f-4cf3-8fe6-c1f937d1d1bf","name":"When clicking ‘Execute workflow’"},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"2151db9b-a441-8074-b8a9-f419d2fd476d","mode":"list","cachedResultName":"wiki.Halo","cachedResultUrl":"https://www.notion.so/2151db9ba4418074b8a9f419d2fd476d"},"limit":10,"filterType":"manual","matchType":"allFilters","filters":{"conditions":[{"key":"Long Description|rich_text","condition":"is_not_empty"}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[208,0],"id":"06ba1e0a-fb65-4beb-ab25-59ccd55e0aec","name":"Get many database pages","alwaysOutputData":true,"credentials":{"notionApi":{"id":"1irJTXhoFNvETAJ1","name":"Notion account 2"}}}],"connections":{"When clicking ‘Execute workflow’":{"main":[[{"node":"Get many database pages","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"138b0b84-7118-4fff-8701-7b81fdf09942","triggerCount":0,"tags":[]},{"createdAt":"2025-07-18T23:07:47.151Z","updatedAt":"2025-07-18T23:07:47.151Z","id":"KQxYbOJgGEEuzVT0","name":"System Test > Hello World v20250718-190747","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"manual-trigger","name":"Manual Trigger","type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[250,300]},{"parameters":{"jsCode":"// Get current timestamp in YYYYMMDD-HHMMSS format in Eastern timezone\nconst now = new Date();\n\n// Convert to Eastern timezone\nconst easternTime = new Date(now.toLocaleString(\"en-US\", {timeZone: \"America/New_York\"}));\n\nconst timestamp = easternTime.getFullYear() +\n  String(easternTime.getMonth() + 1).padStart(2, '0') +\n  String(easternTime.getDate()).padStart(2, '0') + '-' +\n  String(easternTime.getHours()).padStart(2, '0') +\n  String(easternTime.getMinutes()).padStart(2, '0') +\n  String(easternTime.getSeconds()).padStart(2, '0');\n\nreturn { \n  message: `Hello World - ${timestamp}`,\n  timezone: 'Eastern',\n  utcTime: now.toISOString(),\n  easternTime: easternTime.toISOString()\n};"},"id":"hello-code","name":"Hello Code","type":"n8n-nodes-base.code","typeVersion":2,"position":[450,300]}],"connections":{"Manual Trigger":{"main":[[{"node":"Hello Code","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":null,"versionId":"bf7b98b3-6b54-4b0a-b36d-7961c42e3a69","triggerCount":0,"tags":[]},{"createdAt":"2025-08-09T01:24:30.111Z","updatedAt":"2025-08-09T01:24:30.000Z","id":"MqeSKWx8LBDQO2Of","name":"My workflow 2","active":false,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"minutes","minutesInterval":10}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-1472,-112],"id":"233112cd-ab5f-4375-9fde-bcdec56e7e35","name":"Schedule Every 10min"},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"mode":"id","value":"2481db9b-a441-8025-80d9-000b626fb13d"},"limit":100,"filterType":"json","filterJson":{"and":[{"property":"Review Status","status":{"equals":"AI Review"}},{"property":"Review Owner","people":{"contains":"ffa8346a-444c-48dd-ac88-b87aa4c3a84f"}}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[-1248,-112],"id":"602d4505-a10d-4899-a1a2-db776b42ac3a","name":"Query AI Review Records","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-1024,-112],"id":"4c0cea5b-f435-4a8f-8658-cda2116d74d9","name":"Split In Batches"},{"parameters":{},"type":"n8n-nodes-base.function","typeVersion":1.1,"position":[-1472,112],"id":"53484da3-a743-42d6-badb-72916289975c","name":"Extract Fields"},{"parameters":{"promptType":"define","text":"=Give your PASS/FAIL assessment on whether the provided answer responds to the question. If it fails, explain briefly why. Make the explanation scannable with emojis if needed. Use only the Guidelines to assess the answer. Sign off your answer on a new line as \"-- {your model name} on behalf of MG\"\n\nFormat your response as:\nASSESSMENT: [PASS/FAIL]\nEXPLANATION: [Brief explanation if FAIL, or confirmation if PASS]\n\n-- {your model name} on behalf of MG\n\n<Question> {{ $json.question }} </Question>\n<Answer> {{ $json.answer }} </Answer>\n<Guidelines>\n{{ $json.guidelines }}\n</Guidelines>","batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[-1472,1304],"id":"37cd79e8-b6d9-499a-8192-7c0e0333c13c","name":"LLM Assessment"},{"parameters":{"model":"gpt-oss:latest","options":{}},"type":"@n8n/n8n-nodes-langchain.lmOllama","typeVersion":1,"position":[-1376,1528],"id":"aa350060-837e-42ee-86ef-0405e977254e","name":"Ollama Model"},{"parameters":{},"type":"n8n-nodes-base.function","typeVersion":1.1,"position":[-1472,336],"id":"cd3ad4bb-368a-4ee5-bd0f-4e83247f795c","name":"Parse LLM Response"},{"parameters":{"conditions":{"string":[{"value1":"={{ $json.assessment }}","operation":"equal","value2":"PASS"}]},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[-1472,656],"id":"19b92d98-8f80-4502-9700-997efb68ba82","name":"Assessment Branch"},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"mode":"id","value":"={{ $json.notion_page_id }}"},"propertiesUi":{"propertyValues":[{"key":"Review Status","type":"status","statusValue":{"mode":"name","value":"MGR Review"}}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[-1248,560],"id":"594a7419-5fbf-4ccb-8fff-031311fc1003","name":"Update to MGR Review"},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"mode":"id","value":"={{ $json.notion_page_id }}"},"propertiesUi":{"propertyValues":[{"key":"Review Status","type":"status","statusValue":{"mode":"name","value":"Sales Revise"}},{"key":"Review Owner","type":"people","peopleValue":{"mode":"list","list":"={{ $json.sales_owner.map(owner => owner.id) }}"}},{"key":"Assessment","type":"richText"}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[-1248,752],"id":"99e1aad9-ca64-42d4-9ece-ab728ec11c48","name":"Update to Sales Revise"},{"parameters":{"mode":"mergeByPosition"},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[-1024,656],"id":"98bc16af-9b48-4753-8419-e62ca2e86b3c","name":"Merge Branches"},{"parameters":{},"type":"n8n-nodes-base.function","typeVersion":1.1,"position":[-1472,976],"id":"6e3bdfe1-f7fb-48f9-9500-d13f64315401","name":"Log Results"}],"connections":{"Schedule Every 10min":{"main":[[{"node":"Query AI Review Records","type":"main","index":0}]]},"Query AI Review Records":{"main":[[{"node":"Split In Batches","type":"main","index":0}]]},"Assessment Branch":{"main":[[{"node":"Update to MGR Review","type":"main","index":0}],[{"node":"Update to Sales Revise","type":"main","index":0}]]},"Update to MGR Review":{"main":[[{"node":"Merge Branches","type":"main","index":0}]]},"Update to Sales Revise":{"main":[[{"node":"Merge Branches","type":"main","index":1}]]},"Ollama Model":{"ai_languageModel":[[{"node":"LLM Assessment","type":"ai_languageModel","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"77b00993-0e05-4d09-bd86-c8055654fca6","triggerCount":0,"tags":[]},{"createdAt":"2025-07-26T06:18:59.330Z","updatedAt":"2025-07-26T06:29:31.000Z","id":"QWNNr5pCQ9crSx9L","name":"My workflow","active":false,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"minutes","minutesInterval":1}]}},"id":"194f3bdd-c755-433c-b443-525cb4c2c075","name":"On schedule","type":"n8n-nodes-base.scheduleTrigger","position":[-1240,-220],"typeVersion":1.1},{"parameters":{"operation":"subtractFromDate","magnitude":"={{ $json.timestamp }}","timeUnit":"minutes","duration":1,"outputFieldName":"last_request_time","options":{}},"id":"4d8e90f6-acd5-4b43-9422-efb4b19a276b","name":"Derive last request time","type":"n8n-nodes-base.dateTime","position":[-1020,-220],"typeVersion":2},{"parameters":{"operation":"getAll","returnAll":true,"filters":{"labelIds":["Label_3354844662140732008"],"receivedAfter":"2025-07-24T00:00:00"}},"id":"d0b8bd6a-5a96-4887-addf-e02f676d981d","name":"Get emails from label and last request time","type":"n8n-nodes-base.gmail","position":[-800,-220],"typeVersion":2,"webhookId":"d73a74d6-4e4d-402f-95e9-1c3d663b6d8b","credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}},{"parameters":{"resource":"databasePage","databaseId":{"__rl":true,"value":"23c1db9b-a441-80c6-a249-d4efb43bec3d","mode":"list","cachedResultName":"Gmail Test","cachedResultUrl":"https://www.notion.so/23c1db9ba44180c6a249d4efb43bec3d"},"title":"={{ $('If database page not found').item.json.Subject }}","propertiesUi":{"propertyValues":[{"key":"Thread ID|rich_text","textContent":"={{ $('If database page not found').item.json.id }}"},{"key":"Email thread|url","urlValue":"=https://mail.google.com/mail/u/{{ $json.emailAddress }}/#all/{{ $('If database page not found').item.json.id }}"}]},"blockUi":{"blockValues":[{"type":"heading_3","textContent":"Snippet"},{"textContent":"={{ $('If database page not found').item.json.snippet }}"},{"richText":true,"text":{"text":[{"text":"See more","isLink":true,"textLink":"=https://mail.google.com/mail/u/{{ $json.emailAddress }}/#all/{{ $('If database page not found').item.json.id }}","annotationUi":{}}]}}]},"options":{"iconType":"file","icon":"https://avatars.githubusercontent.com/u/45487711?s=280&v=4"}},"id":"3027ce33-7882-4bc5-bd9a-202ab23f41af","name":"Create database page","type":"n8n-nodes-base.notion","position":[100,-320],"typeVersion":2,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"23c1db9b-a441-80c6-a249-d4efb43bec3d","mode":"list","cachedResultName":"Gmail Test","cachedResultUrl":"https://www.notion.so/23c1db9ba44180c6a249d4efb43bec3d"},"returnAll":true,"filterType":"manual","filters":{"conditions":[{"key":"Thread ID|rich_text","condition":"equals","richTextValue":"={{ $json.id }}"}]},"options":{}},"id":"fe55f244-76c3-4c65-a544-c883063f574f","name":"Try get database page","type":"n8n-nodes-base.notion","position":[-640,-160],"typeVersion":2,"alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"conditions":{"boolean":[{"value1":"={{ $json.Complete }}","value2":true}]}},"id":"ad3fefab-7458-482f-9471-c6c382fa0a8f","name":"If checked off","type":"n8n-nodes-base.if","position":[-1020,80],"typeVersion":1},{"parameters":{"pollTimes":{"item":[{"mode":"everyMinute"}]},"event":"pagedUpdatedInDatabase","databaseId":{"__rl":true,"value":"23c1db9b-a441-80c6-a249-d4efb43bec3d","mode":"list","cachedResultName":"Gmail Test","cachedResultUrl":"https://www.notion.so/23c1db9ba44180c6a249d4efb43bec3d"}},"id":"909fd408-88a2-421e-b9e9-79a975d0fa40","name":"On updated database page","type":"n8n-nodes-base.notionTrigger","position":[-1240,80],"typeVersion":1,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"operation":"removeLabels","messageId":"={{ $json['Thread ID'] }}","labelIds":["Label_9178764513576607415"]},"id":"0569d762-df5d-483b-9d08-377f6020c61a","name":"Remove label from target email","type":"n8n-nodes-base.gmail","position":[-800,80],"typeVersion":2,"webhookId":"761fafc4-4665-40ad-bb23-a64a58f99794","credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}},{"parameters":{},"id":"0189b76f-ea1b-4a2f-882a-ba7b56b0bc33","name":"Not yet checked off, do nothing","type":"n8n-nodes-base.noOp","position":[-800,280],"typeVersion":1},{"parameters":{"mode":"combine","mergeByFields":{"values":[{"field1":"id","field2":"property_thread_id"}]},"joinMode":"enrichInput1","options":{}},"id":"a7e63a52-bce1-4f5d-a63e-45295f8e0cf2","name":"Merge","type":"n8n-nodes-base.merge","position":[-500,-280],"typeVersion":2.1},{"parameters":{},"id":"4f3bd070-b965-42c1-b91d-623b630d4c7c","name":"If found, do nothing","type":"n8n-nodes-base.noOp","position":[-120,-120],"typeVersion":1},{"parameters":{"conditions":{"string":[{"value1":"={{ $json.property_thread_id }}","operation":"isEmpty"}]}},"id":"3c82de3e-2d9e-4222-b292-1c2f2682039a","name":"If database page not found","type":"n8n-nodes-base.if","position":[-340,-220],"typeVersion":1},{"parameters":{"url":"https://gmail.googleapis.com/gmail/v1/users/me/profile","authentication":"predefinedCredentialType","nodeCredentialType":"gmailOAuth2","options":{}},"id":"7f942afc-bb7f-4871-9aee-a626de444c91","name":"Find my email address","type":"n8n-nodes-base.httpRequest","position":[-120,-320],"typeVersion":4.1,"credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}},{"parameters":{"content":"## Send labeled email to a Notion database\nThis workflow sends the contents of an email to a Notion database. The email must be labeled with a specific label for the workflow to trigger. The email subject will be the title of the Notion page, and a snippet of the email body will be the content of the Notion page. The email link will be added to the Notion page as a property.\n\n### How it works\nOn scheduled intervals, find all emails with a specific label. For each email, check if the email already exists in the Notion database. If it does not exist, create a new page in the Notion database, otherwise do nothing. When the task in the Notion database is checked off, the label will be removed from the email.\n\n### Setup\nThis workflow requires that you set up a Notion database or use an existing one with at least the following fields:\n- Title (title)\n- Thread ID (text)\n- Email thread (URL)\n\n\nAdditionally, create a label that will be used to trigger the workflow in Gmail. In this workflow, the label is called \"Notion\".","height":545.405405405404,"width":501.0810810810809},"id":"659630d1-ed9c-41f8-bb4c-140cf5971f0c","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[-1860,-280],"typeVersion":1}],"connections":{"Merge":{"main":[[{"node":"If database page not found","type":"main","index":0}]]},"On schedule":{"main":[[{"node":"Derive last request time","type":"main","index":0}]]},"If checked off":{"main":[[{"node":"Remove label from target email","type":"main","index":0}],[{"node":"Not yet checked off, do nothing","type":"main","index":0}]]},"Find my email address":{"main":[[{"node":"Create database page","type":"main","index":0}]]},"Try get database page":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Derive last request time":{"main":[[{"node":"Get emails from label and last request time","type":"main","index":0}]]},"On updated database page":{"main":[[{"node":"If checked off","type":"main","index":0}]]},"If database page not found":{"main":[[{"node":"Find my email address","type":"main","index":0}],[{"node":"If found, do nothing","type":"main","index":0}]]},"Get emails from label and last request time":{"main":[[{"node":"Try get database page","type":"main","index":0},{"node":"Merge","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"4d289667-314b-4a76-aa74-54a9c31dc4c3","triggerCount":0,"tags":[]},{"createdAt":"2025-07-26T03:53:42.787Z","updatedAt":"2025-07-26T03:53:42.787Z","id":"RaB3uTTq2qFl4Vp6","name":"Test Simple Workflow v20250725-235342","active":false,"isArchived":false,"nodes":[{"id":"1","name":"Start","type":"n8n-nodes-base.start","typeVersion":1,"position":[250,300],"parameters":{}},{"id":"2","name":"Set","type":"n8n-nodes-base.set","typeVersion":1,"position":[450,300],"parameters":{"values":{"string":[{"name":"test","value":"Hello World"}]}}}],"connections":{"Start":{"main":[[{"node":"Set","type":"main","index":0}]]}},"settings":{},"staticData":null,"meta":null,"pinData":null,"versionId":"6754b4f8-c111-428c-b598-089b84ec2bb7","triggerCount":0,"tags":[]},{"createdAt":"2025-07-18T23:07:47.349Z","updatedAt":"2025-08-18T00:18:25.000Z","id":"RodOlz9vpP9VUSiP","name":"System Test > Ollama v20250718-190747","active":false,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,0],"id":"5f69dcc0-2f90-4c52-8abc-31c96181b565","name":"When clicking ‘Execute workflow’"},{"parameters":{"url":"http://host.docker.internal:11434/api/tags","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[224,0],"id":"509fb5c9-e536-4a85-93c4-4a10b2314087","name":"HTTP Request"},{"parameters":{"method":"POST","url":"http://host.docker.internal:11434/api/generate","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"model\": \"{{ $json.models[0].model }}\",\n    \"prompt\": \"Hello! Please respond with 'Hello World from n8n + Ollama!'\",\n    \"stream\": false,\n    \"options\": {\n      \"temperature\": 0.1\n    }\n  }","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[448,0],"id":"a962dd3a-b5a6-4a7e-a69f-abccb1df2ba8","name":"HTTP Request1"}],"connections":{"When clicking ‘Execute workflow’":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"HTTP Request1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"6118df4d-5a8a-4591-a5d8-dc4555565178","triggerCount":0,"tags":[]},{"createdAt":"2025-08-14T00:58:45.092Z","updatedAt":"2025-08-14T04:09:56.000Z","id":"UT5zelf4VFwQhTqb","name":"Google Drive","active":false,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,0],"id":"125e9dd8-abdc-4cec-9b2a-b094d8e3fcf4","name":"When clicking ‘Execute workflow’"},{"parameters":{"operation":"download","fileId":{"__rl":true,"value":"1JIYn4Cv9_r0Ml8Q90Nstkd6S31hu7aaD","mode":"list","cachedResultName":"AlpaConstruction-Maria.7.8.25-Discovery-transcript.txt","cachedResultUrl":"https://drive.google.com/file/d/1JIYn4Cv9_r0Ml8Q90Nstkd6S31hu7aaD/view?usp=drivesdk"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[224,0],"id":"d6d97f06-2925-4167-9563-9b55428d7235","name":"Download file","credentials":{"googleDriveOAuth2Api":{"id":"VYNQuSn4plLOF9N8","name":"Google Drive account"}}}],"connections":{"When clicking ‘Execute workflow’":{"main":[[{"node":"Download file","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"7bc3c9c0-4acb-4134-b654-2c5242a2b6aa","triggerCount":0,"tags":[]},{"createdAt":"2025-07-31T04:46:11.703Z","updatedAt":"2025-07-31T14:06:51.000Z","id":"UvV6O3oynJKtEhbW","name":"Run 3soZAbHUm8vgIkXp Every 5 Minutes","active":false,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"minutes","minutesInterval":1}]}},"id":"schedule-trigger-1","name":"Schedule Trigger","type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[256,304]},{"parameters":{"workflowId":{"__rl":true,"value":"3soZAbHUm8vgIkXp","mode":"list","cachedResultName":"Process Workflow v20250730-232124"},"options":{}},"id":"execute-subworkflow-1","name":"Execute Workflow","type":"n8n-nodes-base.executeWorkflow","typeVersion":1.1,"position":[464,304]}],"connections":{"Schedule Trigger":{"main":[[{"node":"Execute Workflow","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true,"saveExecutionProgress":true},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]}},"meta":null,"pinData":{},"versionId":"64adf6ec-60a1-4c95-b8b2-8ea9459e366e","triggerCount":1,"tags":[]},{"createdAt":"2025-08-13T11:00:46.927Z","updatedAt":"2025-08-16T02:19:06.000Z","id":"W2dDKov4cvfXTvw2","name":"Add Transcript","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"59738595-cac8-47a5-9355-0255cfad5119","name":"Start","position":[0,512],"type":"n8n-nodes-base.manualTrigger","typeVersion":1},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"f22d8083-6d1d-4759-a1c0-c133a4cce8c9","mode":"list","cachedResultName":"DB.Client Meeting Diary","cachedResultUrl":"https://www.notion.so/f22d80836d1d4759a1c0c133a4cce8c9"},"returnAll":true,"filterType":"manual","matchType":"allFilters","filters":{"conditions":[{"key":"Meeting Date|date","condition":"past_week"},{"key":"Status|status","condition":"does_not_equal","statusValue":"Cancel"},{"key":"Status|status","condition":"does_not_equal","statusValue":"No Show"},{"key":"Status|status","condition":"does_not_equal","statusValue":"Upcoming Meeting"},{"key":"GDrive Transcript URL|url","condition":"is_not_empty"},{"key":"Meeting Subject|title","condition":"does_not_equal","titleValue":"Check In Westhome.2025.08.14 HALO Focused"}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[320,512],"id":"968e1bae-1f59-43b8-bcfc-587bee5ced9b","name":"Get Meeting Pages from Notion","alwaysOutputData":true,"credentials":{"notionApi":{"id":"1irJTXhoFNvETAJ1","name":"Notion account 2"}}},{"parameters":{"jsCode":"/**\n * Input: item.json.data (plain text VTT transcript from Google Drive Download As String)\n * Output: blocks that can be used Google.comly in Notion paragraph blocks\n */\n\nconst item = $input.first().json;  // Get the first item\nconst vtt = item.data || '';       // Transcript content as string\n\nif (!vtt) {\n  console.log('Transcript is empty');\n  return [];\n}\n\nconst blocks = [];\n// Regex: capture cue number, timestamps, and body text\nconst cueRe = /(?:^|\\n)\\s*(\\d+)\\s*\\n\\s*(\\d{2}:\\d{2}:\\d{2}\\.\\d{3})\\s*-->\\s*(\\d{2}:\\d{2}:\\d{2}\\.\\d{3})\\s*\\n([\\s\\S]*?)(?=\\n\\s*\\d+\\s*\\n|\\n*$)/g;\n\nlet match;\nwhile ((match = cueRe.exec(vtt)) !== null) {\n  const idx = match[1];       // Cue number\n  const start = match[2];     // Start time\n  const end = match[3];       // End time\n  const body = match[4].trim().replace(/\\n+/g, ' '); // Join lines into one paragraph\n\n  let section = `${idx}. [${start} → ${end}] ${body}`;\n\n  // Safety: Notion ~2000 chars per paragraph\n  const limit = 1900;\n  if (section.length <= limit) {\n    blocks.push({\n      type: 'paragraph',\n      paragraph: { rich_text: [{ type: 'text', text: { content: section } }] }\n    });\n  } else {\n    // Split long sections into multiple paragraphs\n    for (let i = 70.15; i < section.length; i += limit) {\n      blocks.push({\n        type: 'paragraph',\n        paragraph: { rich_text: [{ type: 'text', text: { content: section.slice(i, i + limit) } }] }\n      });\n    }\n  }\n}\n\nreturn [{ json: { blocks } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1392,608],"id":"ab0fe015-2bd5-4f37-89e9-7327aebcdbed","name":"Split Transcript into Blocks","alwaysOutputData":true,"notesInFlow":true,"notes":"Divide transcript into chunks for Notion blocks"},{"parameters":{"jsCode":"const { toggleBlockId, blocks } = $input.first().json;\n\n// Convert each Notion block object into a plain string for the UI builder\nfunction blockToText(b) {\n  if (b?.paragraph?.rich_text?.length) {\n    return b.paragraph.rich_text\n      .map(rt => (rt.text?.content ?? ''))\n      .join('');\n  }\n  return '';\n}\n\n// Return each block as a separate item with the toggleBlockId\nreturn blocks.map(b => ({\n  json: {\n    toggleBlockId,\n    content: blockToText(b),\n    blockType: b.type || 'paragraph'\n  }\n}));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1728,608],"id":"5b6c9c96-73d2-4b16-9c15-62c4978f4238","name":"Convert Blocks to Items","alwaysOutputData":true,"notesInFlow":true,"notes":"Convert the chunks into individual items for appending"},{"parameters":{"mode":"combineBySql","query":"SELECT input1.toggleID, input2.content, input2.blockType\nFROM input2\nCROSS JOIN input1","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1952,384],"id":"9a9ef0cf-9fee-4c87-8a88-1cfb2299196d","name":"Merge Toggle ID with Content","alwaysOutputData":true},{"parameters":{"operation":"download","fileId":{"__rl":true,"value":"={{ $json.property_g_drive_transcript_url }}","mode":"url"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[720,608],"id":"d1498b0e-6536-465b-9646-8784b5be6d96","name":"Download file","alwaysOutputData":true,"credentials":{"googleDriveOAuth2Api":{"id":"psUJfPffy3IsMJGV","name":"Google Drive account 4"}}},{"parameters":{"operation":"text","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[1088,608],"id":"93aac9e8-ca2f-46ff-b23d-1b9f2eba37d2","name":"Extract from File","alwaysOutputData":true},{"parameters":{"resource":"block","blockId":{"__rl":true,"value":"={{ $json.url }}","mode":"url"},"blockUi":{"blockValues":[{"type":"toggle","textContent":"=\"Transcript\"- {{ $json.name }}"}]}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[864,368],"id":"b61eb314-11c5-4499-9222-a8a8e875458a","name":"Create Toggle block","credentials":{"notionApi":{"id":"1irJTXhoFNvETAJ1","name":"Notion account 2"}}},{"parameters":{"assignments":{"assignments":[{"id":"505b2675-318f-4671-abd2-95d5a76ad8f5","name":"toggleID","value":"={{ $json.results.first().id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1296,368],"id":"fe120033-3c6a-4f9f-ad66-9facfdd26b82","name":"Edit Fields"},{"parameters":{"resource":"block","blockId":{"__rl":true,"value":"={{ $json.toggleID }}","mode":"id"},"blockUi":{"blockValues":[{"textContent":"={{ $json.content }}"}]}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2192,384],"id":"d2c316e0-0898-4eba-b190-98530e3fac74","name":"Append a block","alwaysOutputData":true,"credentials":{"notionApi":{"id":"1irJTXhoFNvETAJ1","name":"Notion account 2"}}}],"connections":{"Start":{"main":[[{"node":"Get Meeting Pages from Notion","type":"main","index":0}]]},"Get Meeting Pages from Notion":{"main":[[{"node":"Create Toggle block","type":"main","index":0},{"node":"Download file","type":"main","index":0}]]},"Split Transcript into Blocks":{"main":[[{"node":"Convert Blocks to Items","type":"main","index":0}]]},"Convert Blocks to Items":{"main":[[{"node":"Merge Toggle ID with Content","type":"main","index":1}]]},"Merge Toggle ID with Content":{"main":[[{"node":"Append a block","type":"main","index":0}]]},"Download file":{"main":[[{"node":"Extract from File","type":"main","index":0}]]},"Extract from File":{"main":[[{"node":"Split Transcript into Blocks","type":"main","index":0}]]},"Create Toggle block":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Merge Toggle ID with Content","type":"main","index":0}]]},"Append a block":{"main":[[]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"65c071ab-75b7-43c3-a14f-c531ed16157f","triggerCount":0,"tags":[]},{"createdAt":"2025-07-18T23:13:10.252Z","updatedAt":"2025-07-19T00:14:40.000Z","id":"ZM6TlXf0WHqLFwHe","name":"Prototype 2: Notion Zero-Lookup Query Manual 20250712-000030 v20250718-191310","active":true,"isArchived":false,"nodes":[{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":"2231db9b-a441-8164-9226-eba95cc4e72c","filterType":"manual","filters":{"conditions":[{"key":"Gmail ID|title","condition":"equals","titleValue":"18f8c7a2b1d3e456"}]},"options":{}},"name":"Query PlannerEmail","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[200,100],"id":"notion-query-1","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"const results = $input.all();\nconst testGmailId = \"191d7a8250639508\";\n\nconst response = {\n  exists: results.length > 0,\n  resultCount: results.length,\n  gmailId: testGmailId,\n  zeroLookupValidation: true,\n  timestamp: new Date().toISOString(),\n  data: results.length > 0 ? results[0] : null\n};\n\nconsole.log(\"Zero-lookup query result:\", response);\nreturn response;"},"name":"Process Results","type":"n8n-nodes-base.code","typeVersion":2,"position":[420,100],"id":"process-results-1"},{"parameters":{"path":"notion-zero-lookup","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-20,100],"id":"b7cfd94f-d653-4e9e-aabc-a8186990a143","name":"Webhook","webhookId":"8c3588f9-2a1c-4eb9-a968-50a31a05f782"}],"connections":{"Query PlannerEmail":{"main":[[{"node":"Process Results","type":"main","index":0}]]},"Webhook":{"main":[[{"node":"Query PlannerEmail","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true,"saveExecutionProgress":true},"staticData":null,"meta":null,"pinData":{},"versionId":"b8f32c58-e9db-41e5-b0a7-506847ae7e51","triggerCount":1,"tags":[]},{"createdAt":"2025-08-13T07:46:57.096Z","updatedAt":"2025-08-13T08:51:05.000Z","id":"aTZrOQjiVVTDUYuw","name":"My workflow 3","active":false,"isArchived":true,"nodes":[{"parameters":{"path":"googlea8d6dafe3a85e188.html","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[0,0],"id":"f3f7af34-e991-47de-83cb-9b50309c9b43","name":"Webhook","webhookId":"e00860e3-969d-48ea-abe5-9c1607ba9fa3","alwaysOutputData":true}],"connections":{},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"8f8a95df-0161-4fb0-a30b-1b063b0466ca","triggerCount":0,"tags":[]},{"createdAt":"2025-08-18T00:21:11.215Z","updatedAt":"2025-08-18T00:21:34.000Z","id":"aTlbzYVs5fwk0aCQ","name":"Restructure Transcript","active":false,"isArchived":false,"nodes":[{"parameters":{"resource":"video","operation":"get","videoId":"={{ $json.body.data.properties.ArticleID.rich_text[0].text.content }}","part":["id","snippet"],"options":{}},"type":"n8n-nodes-base.youTube","typeVersion":1,"position":[1136,-736],"id":"ef95f2a5-25ae-4fff-a218-45fc7f9dd4aa","name":"N01: Fetch YouTube Video","alwaysOutputData":true,"credentials":{"youTubeOAuth2Api":{"id":"bbvqDyJw1ft8R0Ud","name":"YouTube account"}}},{"parameters":{"assignments":{"assignments":[{"id":"ed65c30a-adb0-4b81-9638-498c602358b1","name":"ArticleTitle","value":"={{ $('N01: Fetch YouTube Video').item.json.snippet.title }}","type":"string"},{"id":"17555e70-f754-493f-adea-f8aa43cdd478","name":"URL","value":"={{\"https://www.youtube.com/watch?v=\"}}{{$json.id }}","type":"string"},{"id":"9b24a053-3098-45ea-9115-fe898abd5888","name":"ChannelId","value":"={{ $('N01: Fetch YouTube Video').item.json.snippet.channelId }}","type":"string"},{"id":"536143b4-3c86-4f19-9ed2-a29e9981fba5","name":"Channel","value":"={{ $('N01: Fetch YouTube Video').item.json.snippet.channelTitle }}","type":"string"},{"id":"2fe6fbcd-9a39-42f4-be17-4ff114c3dcc9","name":"Description","value":"={{ $('N01: Fetch YouTube Video').item.json.snippet.description }}","type":"string"},{"id":"05d34b76-afe4-43e9-9140-d3ea02fd3c65","name":"ArticleId","value":"={{ $json.id }}","type":"string"},{"id":"pageid-assignment-001","name":"PageId","value":"={{ (function() {\n    try {\n      return $('N00a: Webhook Trigger').item.json.body.data.id;\n    } catch (e) {\n      // Webhook failed\n    }\n    try {\n      return $('N00b: Manual Trigger').item.json.body.data.id;\n    } catch (e) {\n      return '';\n    }\n  })() }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1360,-736],"id":"d031e3f1-ba90-475a-8b6a-cd44cad06ccf","name":"N02: Set Canonical Fields"},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{ $('N02: Set Canonical Fields').item.json.PageId }}","mode":"id"},"simple":false,"propertiesUi":{"propertyValues":[{"key":"ArticleTitle|title","title":"={{ $json.ArticleTitle }}"},{"key":"URL|url","ignoreIfEmpty":true,"urlValue":"={{ $('N02: Set Canonical Fields').item.json.URL }}"},{"key":"ChannelID|rich_text","textContent":"={{ $('N02: Set Canonical Fields').item.json.ChannelId }}"},{"key":"Channel|rich_text","textContent":"={{ $('N02: Set Canonical Fields').item.json.Channel }}"},{"key":"Description|rich_text","textContent":"=  {{$('N02: Set Canonical Fields').item.json.Description.substring(0,1900)}}"}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[1584,-736],"id":"96b0c2a3-9836-4ffa-8585-5f4b6f894df6","name":"N03: Update Notion Page","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"videoId":"={{ $('N02: Set Canonical Fields').item.json.ArticleId }}"},"type":"n8n-nodes-hyly-youtube.hylyYouTubeNode","typeVersion":1,"position":[1808,-736],"id":"13f5c3bb-c279-46c2-9e68-feae9e166f24","name":"N04: Get Transcript"},{"parameters":{"jsCode":"// Split transcript into 1500-character blocks for Notion\nconst transcript = $input.first().json.transcript || '';\nconst pageId = $('N02: Set Canonical Fields').first().json.PageId\n\nif (!transcript) {\n  console.log('No transcript available');\n  return [{ json: { blocks: [], pageId } }];\n}\n\nconst blocks = [];\nconst limit = 1500; // Character limit per block\n\n// Split transcript into chunks\nfor (let i = 0; i < transcript.length; i += limit) {\n  const chunk = transcript.slice(i, i + limit);\n  blocks.push({\n    type: 'paragraph',\n    paragraph: { \n      rich_text: [{ \n        type: 'text', \n        text: { content: chunk } \n      }] \n    }\n  });\n}\n\nreturn [{ json: { blocks, pageId } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2032,-640],"id":"e800e252-018a-4184-9842-eceff24d2c6f","name":"N05b.01: Split Transcript Chunks","alwaysOutputData":true,"notesInFlow":true,"notes":"Splits transcript into 1500-char blocks for Notion"},{"parameters":{"jsCode":"// Convert blocks array into individual items for processing\nconst { blocks, pageId } = $input.first().json;\n\n// Return each block as a separate item\nreturn blocks.map((block, index) => ({\n  json: {\n    pageId,\n    content: block.paragraph.rich_text[0].text.content,\n    blockType: block.type,\n    index\n  }\n}));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2256,-640],"id":"2e2263a6-5f2f-49b4-b25b-15bd75754c17","name":"N05b.02: Convert to Items","alwaysOutputData":true,"notesInFlow":true,"notes":"Converts blocks array to individual items"},{"parameters":{"resource":"block","blockId":{"__rl":true,"value":"={{ $('N02: Set Canonical Fields').item.json.PageId }}","mode":"id"},"blockUi":{"blockValues":[{"type":"toggle","textContent":"=Transcript - {{ $('N02: Set Canonical Fields').item.json.ArticleTitle }} {{ $now.format('(yyyy-MM-dd-HH:mm:ss)') }}  "}]}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2032,-832],"id":"97b19b3b-8a58-4c18-b31c-268e90d3d645","name":"N05a.01: Create Toggle Container","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"resource":"block","blockId":{"__rl":true,"value":"={{ $json.toggleId }}","mode":"id"},"blockUi":{"blockValues":[{"textContent":"={{ $('N05b.02: Convert to Items').item.json.content }}"}]}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2704,-736],"id":"97e1815f-03f9-4ee5-80ed-cd17e43d1ae4","name":"N07: Append to Notion","alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"assignments":{"assignments":[{"id":"extract-toggle-id-001","name":"toggleId","value":"={{ $json.results.first().id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2256,-832],"id":"cc93f416-65ad-4e46-96e8-fb6fa50ffae0","name":"N05a.02: Extract Toggle ID"},{"parameters":{"mode":"combineBySql","query":"SELECT input1.toggleId, input2.content FROM input2 CROSS JOIN input1","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[2480,-736],"id":"d61e9a28-7907-4166-b1f2-8281dac3abc7","name":"N06: Merge Toggle with Content","alwaysOutputData":true},{"parameters":{"workflowInputs":{"values":[{"name":"property_article_id","type":"any"},{"name":"id","type":"any"}]}},"id":"f26647a5-cb36-4270-ac5d-dbcb61ac16a8","typeVersion":1.1,"name":"N00b: Manual Trigger","type":"n8n-nodes-base.executeWorkflowTrigger","position":[912,-640]},{"parameters":{"multipleMethods":true,"httpMethod":["POST"],"path":"feefe374-40c2-4dc0-8f8c-4b69a18d9f6e","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[912,-832],"id":"5e07418f-2efc-462c-b89b-196b7299be1c","name":"N00a: Webhook Trigger","webhookId":"feefe374-40c2-4dc0-8f8c-4b69a18d9f6e","notesInFlow":false,"alwaysOutputData":true},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{ $('N02: Set Canonical Fields').item.json.PageId }}","mode":"id"},"simple":false,"propertiesUi":{"propertyValues":[{"key":"Research Status|status","statusValue":"n8n Done"}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2928,-736],"id":"fa4778cd-f06c-4ab2-a70b-5ba496bace7e","name":"N08: Update Research Status","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}}],"connections":{"N01: Fetch YouTube Video":{"main":[[{"node":"N02: Set Canonical Fields","type":"main","index":0}]]},"N02: Set Canonical Fields":{"main":[[{"node":"N03: Update Notion Page","type":"main","index":0}]]},"N03: Update Notion Page":{"main":[[{"node":"N04: Get Transcript","type":"main","index":0}]]},"N04: Get Transcript":{"main":[[{"node":"N05a.01: Create Toggle Container","type":"main","index":0},{"node":"N05b.01: Split Transcript Chunks","type":"main","index":0}]]},"N05b.01: Split Transcript Chunks":{"main":[[{"node":"N05b.02: Convert to Items","type":"main","index":0}]]},"N05b.02: Convert to Items":{"main":[[{"node":"N06: Merge Toggle with Content","type":"main","index":1}]]},"N05a.01: Create Toggle Container":{"main":[[{"node":"N05a.02: Extract Toggle ID","type":"main","index":0}]]},"N05a.02: Extract Toggle ID":{"main":[[{"node":"N06: Merge Toggle with Content","type":"main","index":0}]]},"N06: Merge Toggle with Content":{"main":[[{"node":"N07: Append to Notion","type":"main","index":0}]]},"N07: Append to Notion":{"main":[[{"node":"N08: Update Research Status","type":"main","index":0}]]},"N08: Update Research Status":{"main":[]},"N00b: Manual Trigger":{"main":[[{"node":"N01: Fetch YouTube Video","type":"main","index":0}]]},"N00a: Webhook Trigger":{"main":[[{"node":"N01: Fetch YouTube Video","type":"main","index":0}],[]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"Webhook":[{"json":{"headers":{"host":"n8n.hyly.ai","user-agent":"NotionAutomation","content-length":"6637","baggage":"sentry-environment=production,sentry-release=0.0.4231,sentry-public_key=529a6d1990e5471d874257842c4f4ad8,sentry-trace_id=6e78574023694751a2fd5fe60cc5b466","content-type":"application/json","sentry-trace":"6e78574023694751a2fd5fe60cc5b466-bbccfa60ef414447","traceparent":"00-542fba26b6b8f511d83cf275b7d1fbb2-018fdf23c508e4d3-00","x-forwarded-for":"44.224.156.54","x-forwarded-host":"n8n.hyly.ai","x-forwarded-proto":"https","accept-encoding":"gzip"},"params":{},"query":{},"body":{"source":{"type":"automation","automation_id":"2511db9b-a441-80a4-8f02-004dee273e57","action_id":"2511db9b-a441-80b9-aed2-005a683210ce","event_id":"82148184-43d5-4230-8663-e2b465058e6f","attempt":1},"data":{"object":"page","id":"2501db9b-a441-80d2-809d-da2672c50cb5","created_time":"2025-08-15T22:56:00.000Z","last_edited_time":"2025-08-16T20:54:00.000Z","created_by":{"object":"user","id":"ffa8346a-444c-48dd-ac88-b87aa4c3a84f"},"last_edited_by":{"object":"user","id":"ffa8346a-444c-48dd-ac88-b87aa4c3a84f"},"cover":null,"icon":null,"parent":{"type":"database_id","database_id":"2501db9b-a441-80e6-b4ed-e2ea322b5053"},"archived":false,"in_trash":false,"properties":{"ChannelID":{"id":"%3DRtd","type":"rich_text","rich_text":[{"type":"text","text":{"content":"UCHePou0Yhr5GLPRZ1PEDkKg","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"UCHePou0Yhr5GLPRZ1PEDkKg","href":null}]},"Description":{"id":"%3E%5BvP","type":"rich_text","rich_text":[{"type":"text","text":{"content":"  🧠 Learn How To Scale Your Ads For $0 (Free Course): https://www.skool.com/jetads/about\n\n👉 Want Help Scaling Your Ads? Apply To Work With Me & Get A Free Scaling Roadmap ($1,000 Value): https://www.jetads.co ✈️\n\n-------------------------------------------------------------------------\n\nHello! If you're new to the channel, my name is Blake Bauer.\n\nI've been running Facebook & Google Ads since 2017 and have generated over $20M in revenue for our clients in over 20+ different industries. \n\nMy day job is building the best performance advertising agency in the world, JetAds.\n\nHow To Optimize Performance MAX Campaign (Google Ads)\n\nIn this video, I'll break down exactly how we optimize Performance Max campaigns at JetAds to maximize conversions and profitability. \n\nBy understanding the right data, spotting key weaknesses, and knowing where to double down, you can turn a struggling campaign into a highly profitable one. \n\nSo, if you're running Performance Max campaigns and want better results, this is the strategy you need to follow.\n\n00:00:00 - Why Your Performance Max Campaigns Are Underperforming\n00:00:29 - The First Step to Optimizing Performance Max Ads\n00:01:24 - Asset Groups: Cold, Broad, and Warm Segments\n00:02:46 - Setting Up Performance Max for Maximum ROI\n00:04:29 - How to Analyze Asset Performance & Improve Ads\n00:06:33 - Using Insights Tab for Data-Driven Optimization\n00:07:48 - Cutting Underperforming Products & Keywords\n00:09:22 - Competitor Analysis: Who's Competing for Your Ads?\n00:11:01 - Scaling Strategies: Target ROAS & Budget Adjustments\n00:16:06 - Final Checklist for Performance Max Optimization\n\n-------------------------------------------------------------------------\n\nCONNECT WITH ME\n\n📸 - Follow Me On Instagram: https://www.instagram.com/theblakebauer\n🔗 - Follow Me On LinkedIn: https://www.linkedin.com/theblakebauer\n🎵 - Follow Me On TikTok: https:/","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"  🧠 Learn How To Scale Your Ads For $0 (Free Course): https://www.skool.com/jetads/about\n\n👉 Want Help Scaling Your Ads? Apply To Work With Me & Get A Free Scaling Roadmap ($1,000 Value): https://www.jetads.co ✈️\n\n-------------------------------------------------------------------------\n\nHello! If you're new to the channel, my name is Blake Bauer.\n\nI've been running Facebook & Google Ads since 2017 and have generated over $20M in revenue for our clients in over 20+ different industries. \n\nMy day job is building the best performance advertising agency in the world, JetAds.\n\nHow To Optimize Performance MAX Campaign (Google Ads)\n\nIn this video, I'll break down exactly how we optimize Performance Max campaigns at JetAds to maximize conversions and profitability. \n\nBy understanding the right data, spotting key weaknesses, and knowing where to double down, you can turn a struggling campaign into a highly profitable one. \n\nSo, if you're running Performance Max campaigns and want better results, this is the strategy you need to follow.\n\n00:00:00 - Why Your Performance Max Campaigns Are Underperforming\n00:00:29 - The First Step to Optimizing Performance Max Ads\n00:01:24 - Asset Groups: Cold, Broad, and Warm Segments\n00:02:46 - Setting Up Performance Max for Maximum ROI\n00:04:29 - How to Analyze Asset Performance & Improve Ads\n00:06:33 - Using Insights Tab for Data-Driven Optimization\n00:07:48 - Cutting Underperforming Products & Keywords\n00:09:22 - Competitor Analysis: Who's Competing for Your Ads?\n00:11:01 - Scaling Strategies: Target ROAS & Budget Adjustments\n00:16:06 - Final Checklist for Performance Max Optimization\n\n-------------------------------------------------------------------------\n\nCONNECT WITH ME\n\n📸 - Follow Me On Instagram: https://www.instagram.com/theblakebauer\n🔗 - Follow Me On LinkedIn: https://www.linkedin.com/theblakebauer\n🎵 - Follow Me On TikTok: https:/","href":null}]},"URL":{"id":"%5C%7DeP","type":"url","url":"https://www.youtube.com/watch?v=Erh2Xl0eeLI"},"Channel":{"id":"meZ_","type":"rich_text","rich_text":[{"type":"text","text":{"content":"Blake Bauer Business","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Blake Bauer Business","href":null}]},"ArticleID":{"id":"ocBt","type":"rich_text","rich_text":[{"type":"text","text":{"content":"Erh2Xl0eeLI","link":{"url":"Erh2Xl0eeLI"}},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Erh2Xl0eeLI","href":"Erh2Xl0eeLI"}]},"ArticleTitle":{"id":"title","type":"title","title":[{"type":"text","text":{"content":"How To Optimize Performance MAX Campaigns (Google Ads)","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"How To Optimize Performance MAX Campaigns (Google Ads)","href":null}]},"Research Topic":{"id":"MRnk","type":"rich_text","rich_text":[]},"Research Status":{"id":"%3CxbI","type":"status","status":{"id":"2dd2656f-f929-435e-9d54-0a3b9295336c","name":"n8n Transcribe","color":"gray"}},"Publication Date":{"id":"DDfa","type":"date","date":null}},"url":"https://www.notion.so/How-To-Optimize-Performance-MAX-Campaigns-Google-Ads-2501db9ba44180d2809dda2672c50cb5","public_url":null,"request_id":"91929d39-4ccc-4879-8ac5-a43db7cda6db"}},"webhookUrl":"http://localhost:5678/webhook/f7088ed8-c134-485a-87f2-63b7c7c30c23","executionMode":"production"}}],"N00b: Manual Trigger":[{"json":{"headers":{"host":"n8n.hyly.ai","user-agent":"NotionAutomation","content-length":"5195","baggage":"sentry-environment=production,sentry-release=0.0.4235,sentry-public_key=529a6d1990e5471d874257842c4f4ad8,sentry-trace_id=7836b44f06c741a3a3bc8b8ce266109d","content-type":"application/json","sentry-trace":"7836b44f06c741a3a3bc8b8ce266109d-bf1274521d17ce9e","traceparent":"00-ca7597762283efec11c66bf2b562fd0c-76a2e72db191404e-00","x-forwarded-for":"52.38.219.39","x-forwarded-host":"n8n.hyly.ai","x-forwarded-proto":"https","accept-encoding":"gzip"},"params":{},"query":{},"body":{"source":{"type":"automation","automation_id":"2511db9b-a441-80a4-8f02-004dee273e57","action_id":"2511db9b-a441-80b9-aed2-005a683210ce","event_id":"ea28862e-635e-4d47-bdf0-5db34940967a","attempt":1},"data":{"object":"page","id":"2501db9b-a441-8004-bae6-d06a6db447e9","created_time":"2025-08-15T22:56:00.000Z","last_edited_time":"2025-08-17T18:29:00.000Z","created_by":{"object":"user","id":"ffa8346a-444c-48dd-ac88-b87aa4c3a84f"},"last_edited_by":{"object":"user","id":"ffa8346a-444c-48dd-ac88-b87aa4c3a84f"},"cover":null,"icon":null,"parent":{"type":"database_id","database_id":"2501db9b-a441-80e6-b4ed-e2ea322b5053"},"archived":false,"in_trash":false,"properties":{"ChannelID":{"id":"%3DRtd","type":"rich_text","rich_text":[{"type":"text","text":{"content":"UCsifPO4MT6BdV19vYx3KJ0Q","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"UCsifPO4MT6BdV19vYx3KJ0Q","href":null}]},"Description":{"id":"%3E%5BvP","type":"rich_text","rich_text":[{"type":"text","text":{"content":"  Before you launch another Performance Max campaign… this is what you need to understand FIRST!\n\nBecause if you don't actually know how PMAX works—you're not running campaigns, you're wasting your ad spend.\n\nIn this video, I'm going to break down exactly how Performance Max campaigns really work in 2025 from the data I've seen across millions of dollars in spend managing both eCom and lead gen campaigns.\n\n👉 Need Help with your Google Ads Campaigns? https://www.definedigitalacademy.com/how-can-we-help\n\n👉 Follow the step by step process for setting up your Performance Max campaigns with my updated Guide for 2025: https://www.definedigitalacademy.com/performance-max-guide\n\nGet more support from Aaron 😀\n\n👉 Discover the RIGHT way to set up & optimise your Google Ads campaigns with my easy to follow courses (over 5,000+ happy students): https://www.definedigitalacademy.com/courses\n\n👉 Join 350+ like-minded individuals and get personalised support in my exclusive 10x Google Ads Community: https://www.definedigitalacademy.com/10x-google-ads-community-1\n\n👉 Want Aaron to run your Google Ads campaign? Apply Now: https://www.definedigitalacademy.com/google-ads-management","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"  Before you launch another Performance Max campaign… this is what you need to understand FIRST!\n\nBecause if you don't actually know how PMAX works—you're not running campaigns, you're wasting your ad spend.\n\nIn this video, I'm going to break down exactly how Performance Max campaigns really work in 2025 from the data I've seen across millions of dollars in spend managing both eCom and lead gen campaigns.\n\n👉 Need Help with your Google Ads Campaigns? https://www.definedigitalacademy.com/how-can-we-help\n\n👉 Follow the step by step process for setting up your Performance Max campaigns with my updated Guide for 2025: https://www.definedigitalacademy.com/performance-max-guide\n\nGet more support from Aaron 😀\n\n👉 Discover the RIGHT way to set up & optimise your Google Ads campaigns with my easy to follow courses (over 5,000+ happy students): https://www.definedigitalacademy.com/courses\n\n👉 Join 350+ like-minded individuals and get personalised support in my exclusive 10x Google Ads Community: https://www.definedigitalacademy.com/10x-google-ads-community-1\n\n👉 Want Aaron to run your Google Ads campaign? Apply Now: https://www.definedigitalacademy.com/google-ads-management","href":null}]},"URL":{"id":"%5C%7DeP","type":"url","url":"https://www.youtube.com/watch?v=QhaiqGPlY2Y"},"Channel":{"id":"meZ_","type":"rich_text","rich_text":[{"type":"text","text":{"content":"Aaron Young  | Google Ads | Define Digital Academy","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Aaron Young  | Google Ads | Define Digital Academy","href":null}]},"ArticleID":{"id":"ocBt","type":"rich_text","rich_text":[{"type":"text","text":{"content":"QhaiqGPlY2Y","link":{"url":"QhaiqGPlY2Y"}},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"QhaiqGPlY2Y","href":"QhaiqGPlY2Y"}]},"ArticleTitle":{"id":"title","type":"title","title":[{"type":"text","text":{"content":"How Performance Max Campaigns Work in 2025","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"How Performance Max Campaigns Work in 2025","href":null}]},"Research Topic":{"id":"MRnk","type":"rich_text","rich_text":[]},"Research Status":{"id":"%3CxbI","type":"status","status":{"id":"2dd2656f-f929-435e-9d54-0a3b9295336c","name":"n8n Transcribe","color":"gray"}},"Publication Date":{"id":"DDfa","type":"date","date":null}},"url":"https://www.notion.so/How-Performance-Max-Campaigns-Work-in-2025-2501db9ba4418004bae6d06a6db447e9","public_url":null,"request_id":"10447e82-01c0-45eb-b185-43bb63be6800"}},"webhookUrl":"http://localhost:5678/webhook/f7088ed8-c134-485a-87f2-63b7c7c30c23","executionMode":"production"}}]},"versionId":"f2d7840e-f6a3-474e-b649-b8c5b9c22e9c","triggerCount":1,"tags":[{"createdAt":"2025-07-05T17:34:03.000Z","updatedAt":"2025-07-05T17:34:03.000Z","id":"1","name":"system-tests"}]},{"createdAt":"2025-08-15T22:52:22.658Z","updatedAt":"2025-08-16T05:29:50.000Z","id":"bDKwjMfCRePozg54","name":"Research","active":false,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,-224],"id":"6ed7a3ca-be6a-442f-93cc-f3c1a2d22615","name":"When clicking 'Execute workflow'"},{"parameters":{"resource":"database","databaseId":{"__rl":true,"value":"2501db9b-a441-80e6-b4ed-e2ea322b5053","mode":"list","cachedResultName":"MGDB.Helix.Research","cachedResultUrl":"https://www.notion.so/2501db9ba44180e6b4ede2ea322b5053"}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[224,-224],"id":"6b3d6f29-f37c-42d7-a64c-c946cb40d883","name":"Get a database","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"={{ $json.id }}","mode":"id"},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[448,-224],"id":"92b93a8d-5825-4faa-97f0-3541ca247ec1","name":"Get many database pages","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[672,-224],"id":"f2274316-5529-48f2-9bb5-a276220e31b6","name":"Loop Over Items"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"649ec7d2-b849-4bb4-802e-d4e4f0a2328e","leftValue":"={{ $json.property_article_title }}","rightValue":"","operator":{"type":"string","operation":"empty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[896,-272],"id":"ffeaaf2b-9270-4979-82d0-44f671137307","name":"If ArticleTitle is Empty"},{"parameters":{"workflowId":{"__rl":true,"value":"m9VOQWCFffFQClW9","mode":"list","cachedResultName":"Transcribe Video"},"workflowInputs":{"mappingMode":"defineBelow","value":{"property_article_id":"={{ $('Get many database pages').item.json.property_article_id }}","id":"={{ $('Get many database pages').item.json.id }}"},"matchingColumns":["property_article_id","id"],"schema":[{"id":"property_article_id","displayName":"property_article_id","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"id","displayName":"id","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1120,-200],"name":"Transcribe Video","id":"3879c70c-d230-4011-b088-9f7e1cba535b"}],"connections":{"When clicking 'Execute workflow'":{"main":[[{"node":"Get a database","type":"main","index":0}]]},"Get a database":{"main":[[{"node":"Get many database pages","type":"main","index":0}]]},"Get many database pages":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"If ArticleTitle is Empty","type":"main","index":0}]]},"If ArticleTitle is Empty":{"main":[[{"node":"Transcribe Video","type":"main","index":0}],[{"node":"Loop Over Items","type":"main","index":0}]]},"Transcribe Video":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"0018fd88-7f96-4815-9621-0793d89d848d","triggerCount":0,"tags":[]},{"createdAt":"2025-08-16T01:41:46.626Z","updatedAt":"2025-08-16T01:41:46.000Z","id":"boXtC8dQGTA5S4Bt","name":"My workflow 7","active":false,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,0],"id":"ca8153f4-ac1c-4820-bf37-0c12d1fe4bd8","name":"When clicking ‘Execute workflow’"},{"parameters":{"videoId":"BmQ706_9wlQ"},"type":"n8n-nodes-hyly-youtube.hylyYouTubeNode","typeVersion":1,"position":[208,0],"id":"93552a3c-d112-42b2-b34b-8b93be4943a8","name":"Hyly YouTube Node","alwaysOutputData":true}],"connections":{"When clicking ‘Execute workflow’":{"main":[[{"node":"Hyly YouTube Node","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"a4f4e706-e016-4926-a2c3-f7d61386f945","triggerCount":0,"tags":[]},{"createdAt":"2025-08-14T03:00:15.562Z","updatedAt":"2025-08-18T00:31:58.000Z","id":"g1KtcKuQuZMkNs41","name":"Github backup sub-workflow","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"d16ec06b-7a3f-486e-8328-935ed3b4d565","name":"File is new","type":"n8n-nodes-base.noOp","position":[1632,1264],"typeVersion":1},{"parameters":{"resource":"file","owner":{"__rl":true,"value":"={{ $('Config').item.json.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $('Config').item.json.repo_name }}","mode":""},"filePath":"={{ $('Create sub path').item.json.subPath }}","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Start').first().json.name_firstItem}} ({{$json.github_status}})"},"id":"cdc7f306-b7d2-4de1-8e44-0bd8d49a679f","name":"Create new file","type":"n8n-nodes-base.github","position":[1856,1264],"typeVersion":1,"webhookId":"8cd26a4c-522b-4e00-8d41-2e3335e47cd6","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}}},{"parameters":{"assignments":{"assignments":[{"id":"8f6d1741-772f-462a-811f-4c334185e4f0","name":"repo_owner","type":"string","value":"=munishgandhi"},{"id":"8cac215c-4fd7-422f-9fd2-6b2d1e5e0383","name":"repo_name","type":"string","value":"=n8n-env"},{"id":"eee305e9-4164-462a-86bd-80f0d58a31ae","name":"repo_path","type":"string","value":"=backup/"}]},"includeOtherFields":true,"options":{}},"id":"42ad4762-26fb-4686-9016-729e95c95324","name":"Config","type":"n8n-nodes-base.set","position":[608,1088],"typeVersion":3.4},{"parameters":{},"id":"e460a2cd-f7af-4551-8ea2-84d9b9e5cb7f","name":"Merge Items","type":"n8n-nodes-base.merge","position":[816,1072],"typeVersion":2},{"parameters":{"jsCode":"const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"},"id":"f795180a-66aa-4a86-acb0-96cf8c487db0","name":"isDiffOrNew","type":"n8n-nodes-base.code","position":[1008,1072],"typeVersion":1},{"parameters":{"dataType":"string","value1":"={{$json.github_status}}","rules":{"rules":[{"value2":"same"},{"value2":"different","output":1},{"value2":"new","output":2}]}},"id":"30e7d6fc-327e-4693-95ce-376a3b1f145c","name":"Check Status","type":"n8n-nodes-base.switch","position":[1408,1072],"typeVersion":1},{"parameters":{},"id":"45f0eaa7-259b-4908-b567-af2b3b5abb6d","name":"File is different","type":"n8n-nodes-base.noOp","position":[1632,1072],"typeVersion":1},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"value":"={{ $json.content_decoded.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $json.content_decoded.repo_name }}","mode":""},"filePath":"={{ $('Create sub path').item.json.subPath }}","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Start').first().json.name_firstItem}} ({{$json.github_status}})"},"id":"9785333a-4a86-448d-afc2-58b0aa50ea96","name":"Edit existing file","type":"n8n-nodes-base.github","position":[1856,1072],"typeVersion":1,"webhookId":"173d6985-56d1-437c-9674-57f425db6631","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}}},{"parameters":{"assignments":{"assignments":[{"id":"dae43d3b-56e5-4098-b602-862ebf5cd073","name":"subPath","type":"string","value":"={{$('Config').item.json.repo_path }}{{ $('Start').item.json.createdAt.split('-')[0] }}/{{ $('Start').item.json.createdAt.split('-')[1] }}/{{$('Start').item.json.id}}.json"},{"id":"e7dd6fc4-bf58-4a1d-b5c7-a329afd4eee6","name":"workflowTitle","value":"={{ $item(1).$json.name }}","type":"string"}]},"includeOtherFields":true,"options":{}},"id":"f6b566cb-0a15-4792-ba27-d6cd2a6c9453","name":"Create sub path","type":"n8n-nodes-base.set","position":[1216,1072],"typeVersion":3.3},{"parameters":{"assignments":{"assignments":[{"id":"312390a7-805f-46d8-9284-d2e1c369dfe2","name":"file","value":"={{ $json.content.html_url }}{{ $json.html_url }}","type":"string"},{"id":"5c4412c8-d1f7-4c69-ab4c-287e09c717af","name":"status","value":"={{ $('Check Status').item.json.github_status }}","type":"string"},{"id":"05c55762-20ce-4e5c-877c-fcc72be698ee","name":"name","value":"={{ $('Check Status').item.json.content_decoded.name }}","type":"string"}]},"options":{}},"id":"96c0c6a7-2a11-441d-8177-e0a18030daf9","name":"Return","type":"n8n-nodes-base.set","position":[2096,912],"typeVersion":3.3},{"parameters":{},"id":"36f12309-c7fe-446f-9571-bd1005c18ed8","name":"Same file - Do nothing","type":"n8n-nodes-base.noOp","position":[1632,912],"typeVersion":1},{"parameters":{"conditions":{"options":{"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"45ce825e-9fa6-430c-8931-9aaf22c42585","operator":{"type":"string","operation":"empty","singleValue":true},"leftValue":"={{ $json.content }}","rightValue":""},{"id":"9619a55f-7fb1-4f24-b1a7-7aeb82365806","operator":{"type":"string","operation":"notExists","singleValue":true},"leftValue":"={{ $json.error }}","rightValue":""}]},"options":{}},"id":"443b18e8-c05b-444f-b323-dea0b3041939","name":"If file too large","type":"n8n-nodes-base.if","position":[816,800],"typeVersion":2},{"parameters":{"resource":"file","operation":"get","owner":{"__rl":true,"value":"={{ $json.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $json.repo_name }}","mode":""},"filePath":"={{ $json.repo_path }}{{ $json.createdAt.split('-')[0] }}/{{ $json.createdAt.split('-')[1] }}/{{$json.id}}.json","asBinaryProperty":false,"additionalParameters":{}},"id":"e4d70af5-5c21-4340-8054-7ba0203f3ee1","name":"Get file data","type":"n8n-nodes-base.github","position":[608,800],"typeVersion":1,"alwaysOutputData":true,"webhookId":"9fac7e9b-374c-4cff-b3ee-3e7591376de9","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}},"continueOnFail":true},{"parameters":{"url":"={{ $json.download_url }}","options":{}},"id":"6715d1ff-a1f0-4e1a-b96e-f680d1495047","name":"Get File","type":"n8n-nodes-base.httpRequest","position":[1056,784],"typeVersion":4.2},{"parameters":{"inputSource":"passthrough"},"id":"4a7bd166-71c5-4df4-9d74-1c3c7083a64b","typeVersion":1.1,"name":"Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[400,1088]}],"connections":{"Config":{"main":[[{"node":"Get file data","type":"main","index":0},{"node":"Merge Items","type":"main","index":1}]]},"Get File":{"main":[[{"node":"Merge Items","type":"main","index":0}]]},"File is new":{"main":[[{"node":"Create new file","type":"main","index":0}]]},"Merge Items":{"main":[[{"node":"isDiffOrNew","type":"main","index":0}]]},"isDiffOrNew":{"main":[[{"node":"Create sub path","type":"main","index":0}]]},"Check Status":{"main":[[{"node":"Same file - Do nothing","type":"main","index":0}],[{"node":"File is different","type":"main","index":0}],[{"node":"File is new","type":"main","index":0}]]},"Get file data":{"main":[[{"node":"If file too large","type":"main","index":0}]]},"Create new file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Create sub path":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"File is different":{"main":[[{"node":"Edit existing file","type":"main","index":0}]]},"If file too large":{"main":[[{"node":"Get File","type":"main","index":0}],[{"node":"Merge Items","type":"main","index":0}]]},"Edit existing file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Same file - Do nothing":{"main":[[{"node":"Return","type":"main","index":0}]]},"Start":{"main":[[{"node":"Config","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"Start":[{"json":{"createdAt":"2025-08-14T03:00:15.562Z","updatedAt":"2025-08-14T06:17:47.000Z","id":"g1KtcKuQuZMkNs41","name":"Github backup sub-workflow","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"d16ec06b-7a3f-486e-8328-935ed3b4d565","name":"File is new","type":"n8n-nodes-base.noOp","position":[1632,1264],"typeVersion":1},{"parameters":{"resource":"file","owner":{"__rl":true,"value":"={{ $('Config').item.json.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $('Config').item.json.repo_name }}","mode":""},"filePath":"={{ $('Create sub path').item.json.subPath }}","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Start').first().json.name_firstItem}} ({{$json.github_status}})"},"id":"cdc7f306-b7d2-4de1-8e44-0bd8d49a679f","name":"Create new file","type":"n8n-nodes-base.github","position":[1856,1264],"typeVersion":1,"webhookId":"8cd26a4c-522b-4e00-8d41-2e3335e47cd6","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}}},{"parameters":{"assignments":{"assignments":[{"id":"8f6d1741-772f-462a-811f-4c334185e4f0","name":"repo_owner","type":"string","value":"=munishgandhi"},{"id":"8cac215c-4fd7-422f-9fd2-6b2d1e5e0383","name":"repo_name","type":"string","value":"=n8n-hyly-ai-backup"},{"id":"eee305e9-4164-462a-86bd-80f0d58a31ae","name":"repo_path","type":"string","value":"="}]},"includeOtherFields":true,"options":{}},"id":"42ad4762-26fb-4686-9016-729e95c95324","name":"Config","type":"n8n-nodes-base.set","position":[608,1088],"typeVersion":3.4},{"parameters":{},"id":"e460a2cd-f7af-4551-8ea2-84d9b9e5cb7f","name":"Merge Items","type":"n8n-nodes-base.merge","position":[816,1072],"typeVersion":2},{"parameters":{"jsCode":"const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"},"id":"f795180a-66aa-4a86-acb0-96cf8c487db0","name":"isDiffOrNew","type":"n8n-nodes-base.code","position":[1008,1072],"typeVersion":1},{"parameters":{"dataType":"string","value1":"={{$json.github_status}}","rules":{"rules":[{"value2":"same"},{"value2":"different","output":1},{"value2":"new","output":2}]}},"id":"30e7d6fc-327e-4693-95ce-376a3b1f145c","name":"Check Status","type":"n8n-nodes-base.switch","position":[1408,1072],"typeVersion":1},{"parameters":{},"id":"45f0eaa7-259b-4908-b567-af2b3b5abb6d","name":"File is different","type":"n8n-nodes-base.noOp","position":[1632,1072],"typeVersion":1},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"value":"={{ $json.content_decoded.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $json.content_decoded.repo_name }}","mode":""},"filePath":"={{ $('Create sub path').item.json.subPath }}","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Start').first().json.name_firstItem}} ({{$json.github_status}})"},"id":"9785333a-4a86-448d-afc2-58b0aa50ea96","name":"Edit existing file","type":"n8n-nodes-base.github","position":[1856,1072],"typeVersion":1,"webhookId":"173d6985-56d1-437c-9674-57f425db6631","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}}},{"parameters":{"assignments":{"assignments":[{"id":"dae43d3b-56e5-4098-b602-862ebf5cd073","name":"subPath","type":"string","value":"={{$('Config').item.json.repo_path }}{{ $('Start').item.json.createdAt.split('-')[0] }}/{{ $('Start').item.json.createdAt.split('-')[1] }}/{{$('Start').item.json.id}}.json"},{"id":"e7dd6fc4-bf58-4a1d-b5c7-a329afd4eee6","name":"workflowTitle","value":"={{ $item(1).$json.name }}","type":"string"}]},"includeOtherFields":true,"options":{}},"id":"f6b566cb-0a15-4792-ba27-d6cd2a6c9453","name":"Create sub path","type":"n8n-nodes-base.set","position":[1216,1072],"typeVersion":3.3},{"parameters":{"assignments":{"assignments":[{"id":"312390a7-805f-46d8-9284-d2e1c369dfe2","name":"file","value":"={{ $json.html_url }}","type":"string"},{"id":"5c4412c8-d1f7-4c69-ab4c-287e09c717af","name":"status","value":"={{ $('Check Status').item.json.github_status }}","type":"string"},{"id":"05c55762-20ce-4e5c-877c-fcc72be698ee","name":"name","value":"={{ $('Check Status').item.json.content_decoded.name }}","type":"string"}]},"options":{}},"id":"96c0c6a7-2a11-441d-8177-e0a18030daf9","name":"Return","type":"n8n-nodes-base.set","position":[2096,912],"typeVersion":3.3},{"parameters":{},"id":"36f12309-c7fe-446f-9571-bd1005c18ed8","name":"Same file - Do nothing","type":"n8n-nodes-base.noOp","position":[1632,912],"typeVersion":1},{"parameters":{"conditions":{"options":{"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"45ce825e-9fa6-430c-8931-9aaf22c42585","operator":{"type":"string","operation":"empty","singleValue":true},"leftValue":"={{ $json.content }}","rightValue":""},{"id":"9619a55f-7fb1-4f24-b1a7-7aeb82365806","operator":{"type":"string","operation":"notExists","singleValue":true},"leftValue":"={{ $json.error }}","rightValue":""}]},"options":{}},"id":"443b18e8-c05b-444f-b323-dea0b3041939","name":"If file too large","type":"n8n-nodes-base.if","position":[816,800],"typeVersion":2},{"parameters":{"resource":"file","operation":"get","owner":{"__rl":true,"value":"={{ $json.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $json.repo_name }}","mode":""},"filePath":"={{ $json.repo_path }}{{ $json.createdAt.split('-')[0] }}/{{ $json.createdAt.split('-')[1] }}/{{$json.id}}.json","asBinaryProperty":false,"additionalParameters":{}},"id":"e4d70af5-5c21-4340-8054-7ba0203f3ee1","name":"Get file data","type":"n8n-nodes-base.github","position":[608,800],"typeVersion":1,"alwaysOutputData":true,"webhookId":"9fac7e9b-374c-4cff-b3ee-3e7591376de9","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}},"continueOnFail":true},{"parameters":{"url":"={{ $json.download_url }}","options":{}},"id":"6715d1ff-a1f0-4e1a-b96e-f680d1495047","name":"Get File","type":"n8n-nodes-base.httpRequest","position":[1056,784],"typeVersion":4.2},{"parameters":{"inputSource":"passthrough"},"id":"4a7bd166-71c5-4df4-9d74-1c3c7083a64b","typeVersion":1.1,"name":"Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[400,1088]}],"connections":{"Config":{"main":[[{"node":"Get file data","type":"main","index":0},{"node":"Merge Items","type":"main","index":1}]]},"Get File":{"main":[[{"node":"Merge Items","type":"main","index":0}]]},"File is new":{"main":[[{"node":"Create new file","type":"main","index":0}]]},"Merge Items":{"main":[[{"node":"isDiffOrNew","type":"main","index":0}]]},"isDiffOrNew":{"main":[[{"node":"Create sub path","type":"main","index":0}]]},"Check Status":{"main":[[{"node":"Same file - Do nothing","type":"main","index":0}],[{"node":"File is different","type":"main","index":0}],[{"node":"File is new","type":"main","index":0}]]},"Get file data":{"main":[[{"node":"If file too large","type":"main","index":0}]]},"Create new file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Create sub path":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"File is different":{"main":[[{"node":"Edit existing file","type":"main","index":0}]]},"If file too large":{"main":[[{"node":"Get File","type":"main","index":0}],[{"node":"Merge Items","type":"main","index":0}]]},"Edit existing file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Same file - Do nothing":{"main":[[{"node":"Return","type":"main","index":0}]]},"Start":{"main":[[{"node":"Config","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"Start":[{"json":{"createdAt":"2025-08-14T03:00:15.562Z","updatedAt":"2025-08-14T05:59:59.000Z","id":"g1KtcKuQuZMkNs41","name":"Github backup sub-workflow","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"d16ec06b-7a3f-486e-8328-935ed3b4d565","name":"File is new","type":"n8n-nodes-base.noOp","position":[1632,1264],"typeVersion":1},{"parameters":{"resource":"file","owner":{"__rl":true,"value":"={{ $('Config').item.json.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $('Config').item.json.repo_name }}","mode":""},"filePath":"={{ $('Create sub path').item.json.subPath }}","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Start').first().json.name_firstItem}} ({{$json.github_status}})"},"id":"cdc7f306-b7d2-4de1-8e44-0bd8d49a679f","name":"Create new file","type":"n8n-nodes-base.github","position":[1856,1264],"typeVersion":1,"webhookId":"8cd26a4c-522b-4e00-8d41-2e3335e47cd6","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}}},{"parameters":{"assignments":{"assignments":[{"id":"8f6d1741-772f-462a-811f-4c334185e4f0","name":"repo_owner","type":"string","value":"=munishgandhi"},{"id":"8cac215c-4fd7-422f-9fd2-6b2d1e5e0383","name":"repo_name","type":"string","value":"=n8n-hyly-ai-backup"},{"id":"eee305e9-4164-462a-86bd-80f0d58a31ae","name":"repo_path","type":"string","value":"="}]},"includeOtherFields":true,"options":{}},"id":"42ad4762-26fb-4686-9016-729e95c95324","name":"Config","type":"n8n-nodes-base.set","position":[608,1088],"typeVersion":3.4},{"parameters":{},"id":"e460a2cd-f7af-4551-8ea2-84d9b9e5cb7f","name":"Merge Items","type":"n8n-nodes-base.merge","position":[816,1072],"typeVersion":2},{"parameters":{"jsCode":"const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"},"id":"f795180a-66aa-4a86-acb0-96cf8c487db0","name":"isDiffOrNew","type":"n8n-nodes-base.code","position":[1008,1072],"typeVersion":1},{"parameters":{"dataType":"string","value1":"={{$json.github_status}}","rules":{"rules":[{"value2":"same"},{"value2":"different","output":1},{"value2":"new","output":2}]}},"id":"30e7d6fc-327e-4693-95ce-376a3b1f145c","name":"Check Status","type":"n8n-nodes-base.switch","position":[1408,1072],"typeVersion":1},{"parameters":{},"id":"45f0eaa7-259b-4908-b567-af2b3b5abb6d","name":"File is different","type":"n8n-nodes-base.noOp","position":[1632,1072],"typeVersion":1},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"value":"={{ $json.content_decoded.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $json.content_decoded.repo_name }}","mode":""},"filePath":"={{ $('Create sub path').item.json.subPath }}","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Start').first().json.name_firstItem}} ({{$json.github_status}})"},"id":"9785333a-4a86-448d-afc2-58b0aa50ea96","name":"Edit existing file","type":"n8n-nodes-base.github","position":[1856,1072],"typeVersion":1,"webhookId":"173d6985-56d1-437c-9674-57f425db6631","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}}},{"parameters":{"assignments":{"assignments":[{"id":"dae43d3b-56e5-4098-b602-862ebf5cd073","name":"subPath","type":"string","value":"={{$('Config').item.json.repo_path }}{{ $('Start').item.json.createdAt.split('-')[0] }}/{{ $('Start').item.json.createdAt.split('-')[1] }}/{{$('Start').item.json.id}}.json"},{"id":"e7dd6fc4-bf58-4a1d-b5c7-a329afd4eee6","name":"workflowTitle","value":"={{ $item(1).$json.name }}","type":"string"}]},"includeOtherFields":true,"options":{}},"id":"f6b566cb-0a15-4792-ba27-d6cd2a6c9453","name":"Create sub path","type":"n8n-nodes-base.set","position":[1216,1072],"typeVersion":3.3},{"parameters":{"assignments":{"assignments":[{"id":"312390a7-805f-46d8-9284-d2e1c369dfe2","name":"file","value":"={{ $('Check Status').item.json.path }}","type":"string"},{"id":"5c4412c8-d1f7-4c69-ab4c-287e09c717af","name":"status","value":"={{ $('Check Status').item.json.github_status }}","type":"string"},{"id":"05c55762-20ce-4e5c-877c-fcc72be698ee","name":"name","value":"={{ $('File is different').item.json.content_decoded.name }}","type":"string"}]},"options":{}},"id":"96c0c6a7-2a11-441d-8177-e0a18030daf9","name":"Return","type":"n8n-nodes-base.set","position":[2096,912],"typeVersion":3.3},{"parameters":{},"id":"36f12309-c7fe-446f-9571-bd1005c18ed8","name":"Same file - Do nothing","type":"n8n-nodes-base.noOp","position":[1632,912],"typeVersion":1},{"parameters":{"conditions":{"options":{"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"45ce825e-9fa6-430c-8931-9aaf22c42585","operator":{"type":"string","operation":"empty","singleValue":true},"leftValue":"={{ $json.content }}","rightValue":""},{"id":"9619a55f-7fb1-4f24-b1a7-7aeb82365806","operator":{"type":"string","operation":"notExists","singleValue":true},"leftValue":"={{ $json.error }}","rightValue":""}]},"options":{}},"id":"443b18e8-c05b-444f-b323-dea0b3041939","name":"If file too large","type":"n8n-nodes-base.if","position":[816,800],"typeVersion":2},{"parameters":{"resource":"file","operation":"get","owner":{"__rl":true,"value":"={{ $json.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $json.repo_name }}","mode":""},"filePath":"={{ $json.repo_path }}{{ $json.createdAt.split('-')[0] }}/{{ $json.createdAt.split('-')[1] }}/{{$json.id}}.json","asBinaryProperty":false,"additionalParameters":{}},"id":"e4d70af5-5c21-4340-8054-7ba0203f3ee1","name":"Get file data","type":"n8n-nodes-base.github","position":[608,800],"typeVersion":1,"alwaysOutputData":true,"webhookId":"9fac7e9b-374c-4cff-b3ee-3e7591376de9","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}},"continueOnFail":true},{"parameters":{"url":"={{ $json.download_url }}","options":{}},"id":"6715d1ff-a1f0-4e1a-b96e-f680d1495047","name":"Get File","type":"n8n-nodes-base.httpRequest","position":[1056,784],"typeVersion":4.2},{"parameters":{"inputSource":"passthrough"},"id":"4a7bd166-71c5-4df4-9d74-1c3c7083a64b","typeVersion":1.1,"name":"Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[400,1088]}],"connections":{"Config":{"main":[[{"node":"Get file data","type":"main","index":0},{"node":"Merge Items","type":"main","index":1}]]},"Get File":{"main":[[{"node":"Merge Items","type":"main","index":0}]]},"File is new":{"main":[[{"node":"Create new file","type":"main","index":0}]]},"Merge Items":{"main":[[{"node":"isDiffOrNew","type":"main","index":0}]]},"isDiffOrNew":{"main":[[{"node":"Create sub path","type":"main","index":0}]]},"Check Status":{"main":[[{"node":"Same file - Do nothing","type":"main","index":0}],[{"node":"File is different","type":"main","index":0}],[{"node":"File is new","type":"main","index":0}]]},"Get file data":{"main":[[{"node":"If file too large","type":"main","index":0}]]},"Create new file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Create sub path":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"File is different":{"main":[[{"node":"Edit existing file","type":"main","index":0}]]},"If file too large":{"main":[[{"node":"Get File","type":"main","index":0}],[{"node":"Merge Items","type":"main","index":0}]]},"Edit existing file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Same file - Do nothing":{"main":[[{"node":"Return","type":"main","index":0}]]},"Start":{"main":[[{"node":"Config","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"Start":[{"json":{"createdAt":"2025-08-14T03:00:15.562Z","updatedAt":"2025-08-14T05:29:13.000Z","id":"g1KtcKuQuZMkNs41","name":"Github backup sub-workflow","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"d16ec06b-7a3f-486e-8328-935ed3b4d565","name":"File is new","type":"n8n-nodes-base.noOp","position":[1632,1264],"typeVersion":1},{"parameters":{"resource":"file","owner":{"__rl":true,"value":"={{ $('Config').item.json.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $('Config').item.json.repo_name }}","mode":""},"filePath":"={{ $('Create sub path').item.json.subPath }}","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Start').first().json.name_firstItem}} ({{$json.github_status}})"},"id":"cdc7f306-b7d2-4de1-8e44-0bd8d49a679f","name":"Create new file","type":"n8n-nodes-base.github","position":[1856,1264],"typeVersion":1,"webhookId":"8cd26a4c-522b-4e00-8d41-2e3335e47cd6","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}}},{"parameters":{"assignments":{"assignments":[{"id":"8f6d1741-772f-462a-811f-4c334185e4f0","name":"repo_owner","type":"string","value":"=munishgandhi"},{"id":"8cac215c-4fd7-422f-9fd2-6b2d1e5e0383","name":"repo_name","type":"string","value":"=n8n-hyly-ai-backup"},{"id":"eee305e9-4164-462a-86bd-80f0d58a31ae","name":"repo_path","type":"string","value":"="}]},"includeOtherFields":true,"options":{}},"id":"42ad4762-26fb-4686-9016-729e95c95324","name":"Config","type":"n8n-nodes-base.set","position":[608,1088],"typeVersion":3.4},{"parameters":{},"id":"e460a2cd-f7af-4551-8ea2-84d9b9e5cb7f","name":"Merge Items","type":"n8n-nodes-base.merge","position":[816,1072],"typeVersion":2},{"parameters":{"jsCode":"const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"},"id":"f795180a-66aa-4a86-acb0-96cf8c487db0","name":"isDiffOrNew","type":"n8n-nodes-base.code","position":[1008,1072],"typeVersion":1},{"parameters":{"dataType":"string","value1":"={{$json.github_status}}","rules":{"rules":[{"value2":"same"},{"value2":"different","output":1},{"value2":"new","output":2}]}},"id":"30e7d6fc-327e-4693-95ce-376a3b1f145c","name":"Check Status","type":"n8n-nodes-base.switch","position":[1408,1072],"typeVersion":1},{"parameters":{},"id":"45f0eaa7-259b-4908-b567-af2b3b5abb6d","name":"File is different","type":"n8n-nodes-base.noOp","position":[1632,1072],"typeVersion":1},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"value":"={{ $json.content_decoded.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $json.content_decoded.repo_name }}","mode":""},"filePath":"={{ $('Create sub path').item.json.subPath }}","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Start').first().json.name_firstItem}} ({{$json.github_status}})"},"id":"9785333a-4a86-448d-afc2-58b0aa50ea96","name":"Edit existing file","type":"n8n-nodes-base.github","position":[1856,1072],"typeVersion":1,"webhookId":"173d6985-56d1-437c-9674-57f425db6631","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}}},{"parameters":{"assignments":{"assignments":[{"id":"dae43d3b-56e5-4098-b602-862ebf5cd073","name":"subPath","type":"string","value":"={{$('Config').item.json.repo_path }}{{ $('Start').item.json.createdAt.split('-')[0] }}/{{ $('Start').item.json.createdAt.split('-')[1] }}/{{$('Start').item.json.id}}.json"}]},"includeOtherFields":true,"options":{}},"id":"f6b566cb-0a15-4792-ba27-d6cd2a6c9453","name":"Create sub path","type":"n8n-nodes-base.set","position":[1216,1072],"typeVersion":3.3},{"parameters":{"assignments":{"assignments":[{"id":"312390a7-805f-46d8-9284-d2e1c369dfe2","name":"file","value":"={{ $('Check Status').item.json.path }}","type":"string"},{"id":"5c4412c8-d1f7-4c69-ab4c-287e09c717af","name":"status","value":"={{ $('Check Status').item.json.github_status }}","type":"string"},{"id":"05c55762-20ce-4e5c-877c-fcc72be698ee","name":"name","value":"={{ $json.content_decoded.name }}","type":"string"}]},"options":{}},"id":"96c0c6a7-2a11-441d-8177-e0a18030daf9","name":"Return","type":"n8n-nodes-base.set","position":[2096,912],"typeVersion":3.3},{"parameters":{},"id":"36f12309-c7fe-446f-9571-bd1005c18ed8","name":"Same file - Do nothing","type":"n8n-nodes-base.noOp","position":[1632,912],"typeVersion":1},{"parameters":{"conditions":{"options":{"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"45ce825e-9fa6-430c-8931-9aaf22c42585","operator":{"type":"string","operation":"empty","singleValue":true},"leftValue":"={{ $json.content }}","rightValue":""},{"id":"9619a55f-7fb1-4f24-b1a7-7aeb82365806","operator":{"type":"string","operation":"notExists","singleValue":true},"leftValue":"={{ $json.error }}","rightValue":""}]},"options":{}},"id":"443b18e8-c05b-444f-b323-dea0b3041939","name":"If file too large","type":"n8n-nodes-base.if","position":[816,800],"typeVersion":2},{"parameters":{"resource":"file","operation":"get","owner":{"__rl":true,"value":"={{ $json.repo_owner }}","mode":""},"repository":{"__rl":true,"value":"={{ $json.repo_name }}","mode":""},"filePath":"={{ $json.repo_path }}{{ $json.createdAt.split('-')[0] }}/{{ $json.createdAt.split('-')[1] }}/{{$json.id}}.json","asBinaryProperty":false,"additionalParameters":{}},"id":"e4d70af5-5c21-4340-8054-7ba0203f3ee1","name":"Get file data","type":"n8n-nodes-base.github","position":[608,800],"typeVersion":1,"alwaysOutputData":true,"webhookId":"9fac7e9b-374c-4cff-b3ee-3e7591376de9","credentials":{"githubApi":{"id":"DmjCnpqLzjNdBGl7","name":"GitHub account"}},"continueOnFail":true},{"parameters":{"url":"={{ $json.download_url }}","options":{}},"id":"6715d1ff-a1f0-4e1a-b96e-f680d1495047","name":"Get File","type":"n8n-nodes-base.httpRequest","position":[1056,784],"typeVersion":4.2},{"parameters":{"inputSource":"passthrough"},"id":"4a7bd166-71c5-4df4-9d74-1c3c7083a64b","typeVersion":1.1,"name":"Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[400,1088]}],"connections":{"Config":{"main":[[{"node":"Get file data","type":"main","index":0},{"node":"Merge Items","type":"main","index":1}]]},"Get File":{"main":[[{"node":"Merge Items","type":"main","index":0}]]},"File is new":{"main":[[{"node":"Create new file","type":"main","index":0}]]},"Merge Items":{"main":[[{"node":"isDiffOrNew","type":"main","index":0}]]},"isDiffOrNew":{"main":[[{"node":"Create sub path","type":"main","index":0}]]},"Check Status":{"main":[[{"node":"Same file - Do nothing","type":"main","index":0}],[{"node":"File is different","type":"main","index":0}],[{"node":"File is new","type":"main","index":0}]]},"Get file data":{"main":[[{"node":"If file too large","type":"main","index":0}]]},"Create new file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Create sub path":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"File is different":{"main":[[{"node":"Edit existing file","type":"main","index":0}]]},"If file too large":{"main":[[{"node":"Get File","type":"main","index":0}],[{"node":"Merge Items","type":"main","index":0}]]},"Edit existing file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Same file - Do nothing":{"main":[[{"node":"Return","type":"main","index":0}]]},"Start":{"main":[[{"node":"Config","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"Start":[{"json":{"createdAt":"2025-07-18T23:07:34.760Z","updatedAt":"2025-07-18T23:07:34.760Z","id":"wVaarEFYRpDlvYxK","name":"System Test > Fetch VC Email v20250718-190734","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"d59732a6-c488-409e-bd78-28b59be2d8fa","name":"Manual Trigger","type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-220,-20]},{"parameters":{"operation":"getAll","limit":1,"filters":{"labelIds":["Label_3354844662140732008"]}},"id":"5fd96476-cded-4d10-bc30-93ba15a3b392","name":"Get Latest VC Email","type":"n8n-nodes-base.gmail","typeVersion":2,"position":[0,-20],"webhookId":"568b3c3c-d14c-4068-afcc-4da8005db6f0","alwaysOutputData":false,"executeOnce":false,"credentials":{"gmailOAuth2":"pxtxj61wdCzGXITa"}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"email-found","leftValue":"={{ $json.id }}","rightValue":0,"operator":{"type":"string","operation":"exists","singleValue":true}},{"id":"c14c9c0e-01ba-49db-9c8b-d4e861f3a624","leftValue":"","rightValue":"","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"id":"191f86b9-69c0-4c43-afa5-7ea56789982b","name":"Check Email Exists","type":"n8n-nodes-base.if","typeVersion":2,"position":[220,-20]},{"parameters":{"jsCode":"  // The input is an array, so get the first item\n  const emailArray = $input.first().json;\n  const email = Array.isArray(emailArray) ? emailArray[0] : emailArray;\n\n  console.log('=== EMAIL DATA ===');\n  console.log('Email object:', email);\n\n  // Now extract the data using the correct field names\n  const emailData = {\n    id: email.id || 'unknown',\n    threadId: email.threadId || 'unknown',\n    snippet: email.snippet || '',\n    subject: email.Subject || 'Unknown Subject',  // Capital S - we see it in the data\n    from: email.From || 'Unknown Sender',        // Capital F - we see it in the data  \n    to: email.To || 'Unknown Recipient',         // Capital T - we see it in the data\n    processedAt: new Date().toISOString()\n  };\n\n  console.log('Extracted email data:', emailData);\n  return emailData;\n"},"id":"78cc95f0-789b-406c-8006-3ecd210225de","name":"Extract Email Data","type":"n8n-nodes-base.code","typeVersion":2,"position":[440,-120]},{"parameters":{"method":"POST","url":"http://host.docker.internal:11434/api/generate","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"model","value":"qwen2.5:14b-instruct"},{"name":"prompt","value":"=  Analyze this email:\n\n  Subject: {{ $json.subject }}\n  From: {{ $json.from }}\n  Snippet: {{ $json.snippet }}\n\n  Extract: sender name, company, purpose, sentiment. Respond only with\n  JSON:\n  {\n    \"sender_name\": \"\",\n    \"sender_company\": \"\",\n    \"main_topic_purpose\": \"\",\n    \"sentiment\": \"\"\n  }\n\ndo not send \"context\" list of numbers"},{"name":"stream","value":false}]},"options":{}},"id":"d50939db-f9cf-4602-b7df-e83e41cca6e7","name":"Analyze with Ollama","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[660,-120]},{"parameters":{"jsCode":"  // Get email data from the Extract Email Data node\n  const emailData = $('Extract Email Data').first().json;\n\n  // Get AI response from current input\n  const aiResponse = $input.first().json;\n\n  // Parse AI analysis\n  let aiAnalysis = {};\n  try {\n    aiAnalysis = JSON.parse(aiResponse.response);\n  } catch (error) {\n    aiAnalysis = { error: 'Failed to parse' };\n  }\n\n  const result = {\n    email: {\n      id: emailData.id,\n      threadId: emailData.threadId,\n      subject: emailData.subject,\n      from: emailData.from,\n      to: emailData.to,\n      snippet: emailData.snippet,\n      processedAt: emailData.processedAt\n    },\n    analysis: aiAnalysis,\n    processing: {\n      time_ms: Math.round(aiResponse.total_duration / 1000000),\n      model: aiResponse.model,\n      completed_at: new Date().toISOString()\n    }\n  };\n\n  return result;\n"},"id":"ba0428aa-aaf4-48ea-957c-b0848d6444e1","name":"Combine Results","type":"n8n-nodes-base.code","typeVersion":2,"position":[800,-240]},{"parameters":{"jsCode":"// No email found in the specified label\nconst result = {\n  error: 'No emails found in --watch/vc or --watch-vc label',\n  searchedLabels: ['--watch/vc', '--watch-vc'],\n  timestamp: new Date().toISOString(),\n  processingComplete: false\n};\n\nconsole.log('❌ No emails found in VC watch folders');\n\nreturn result;"},"id":"b1ffe9a9-4461-4077-bc87-26d030f90a53","name":"No Email Found","type":"n8n-nodes-base.code","typeVersion":2,"position":[440,80]}],"connections":{"Manual Trigger":{"main":[[{"node":"Get Latest VC Email","type":"main","index":0}]]},"Get Latest VC Email":{"main":[[{"node":"Check Email Exists","type":"main","index":0}]]},"Check Email Exists":{"main":[[{"node":"Extract Email Data","type":"main","index":0}],[{"node":"No Email Found","type":"main","index":0}]]},"Extract Email Data":{"main":[[{"node":"Analyze with Ollama","type":"main","index":0}]]},"Analyze with Ollama":{"main":[[{"node":"Combine Results","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":null,"versionId":"984ba975-4d71-4e1f-a852-d88fa083420b","triggerCount":0,"tags":[]}}]},"versionId":"e232f4cc-e64b-43c8-a4f7-4f3de5a78444","triggerCount":0,"tags":[]}}]},"versionId":"85c209e1-7a38-4da1-805a-bc402f09a26b","triggerCount":0,"tags":[]}}]},"versionId":"538fa02e-8b12-4afe-b7bf-64f765573a9b","triggerCount":0,"tags":[]}}]},"versionId":"d1088dd6-5139-4933-853b-3ab074e93b0c","triggerCount":0,"tags":[]},{"createdAt":"2025-08-16T05:23:37.742Z","updatedAt":"2025-08-17T22:58:30.000Z","id":"m9VOQWCFffFQClW9","name":"Transcribe Video v20250817-185830","active":true,"isArchived":false,"nodes":[{"parameters":{"resource":"video","operation":"get","videoId":"={{ $json.body.data.properties.ArticleID.rich_text[0].text.content }}","part":["id","snippet"],"options":{}},"type":"n8n-nodes-base.youTube","typeVersion":1,"position":[1136,-736],"id":"d1c991a8-80f9-4746-a2a8-147612793241","name":"N01: Fetch YouTube Video","alwaysOutputData":true,"credentials":{"youTubeOAuth2Api":{"id":"bbvqDyJw1ft8R0Ud","name":"YouTube account"}}},{"parameters":{"assignments":{"assignments":[{"id":"ed65c30a-adb0-4b81-9638-498c602358b1","name":"ArticleTitle","value":"={{ $('N01: Fetch YouTube Video').item.json.snippet.title }}","type":"string"},{"id":"17555e70-f754-493f-adea-f8aa43cdd478","name":"URL","value":"={{\"https://www.youtube.com/watch?v=\"}}{{$json.id }}","type":"string"},{"id":"9b24a053-3098-45ea-9115-fe898abd5888","name":"ChannelId","value":"={{ $('N01: Fetch YouTube Video').item.json.snippet.channelId }}","type":"string"},{"id":"536143b4-3c86-4f19-9ed2-a29e9981fba5","name":"Channel","value":"={{ $('N01: Fetch YouTube Video').item.json.snippet.channelTitle }}","type":"string"},{"id":"2fe6fbcd-9a39-42f4-be17-4ff114c3dcc9","name":"Description","value":"={{ $('N01: Fetch YouTube Video').item.json.snippet.description }}","type":"string"},{"id":"05d34b76-afe4-43e9-9140-d3ea02fd3c65","name":"ArticleId","value":"={{ $json.id }}","type":"string"},{"id":"pageid-assignment-001","name":"PageId","value":"={{ (function() {\n    try {\n      return $('N00a: Webhook Trigger').item.json.body.data.id;\n    } catch (e) {\n      // Webhook failed\n    }\n    try {\n      return $('N00b: Manual Trigger').item.json.body.data.id;\n    } catch (e) {\n      return '';\n    }\n  })() }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1360,-736],"id":"91951416-2d22-4b1d-9696-de58896ae989","name":"N02: Set Canonical Fields"},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{ $('N02: Set Canonical Fields').item.json.PageId }}","mode":"id"},"simple":false,"propertiesUi":{"propertyValues":[{"key":"ArticleTitle|title","title":"={{ $json.ArticleTitle }}"},{"key":"URL|url","ignoreIfEmpty":true,"urlValue":"={{ $('N02: Set Canonical Fields').item.json.URL }}"},{"key":"ChannelID|rich_text","textContent":"={{ $('N02: Set Canonical Fields').item.json.ChannelId }}"},{"key":"Channel|rich_text","textContent":"={{ $('N02: Set Canonical Fields').item.json.Channel }}"},{"key":"Description|rich_text","textContent":"=  {{$('N02: Set Canonical Fields').item.json.Description.substring(0,1900)}}"}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[1584,-736],"id":"b00fed55-f10a-4247-bd27-e3e56924548e","name":"N03: Update Notion Page","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"videoId":"={{ $('N02: Set Canonical Fields').item.json.ArticleId }}"},"type":"n8n-nodes-hyly-youtube.hylyYouTubeNode","typeVersion":1,"position":[1808,-736],"id":"51b27ec6-6235-45a7-96f0-1104b9b1b65f","name":"N04: Get Transcript"},{"parameters":{"jsCode":"// Split transcript into 1500-character blocks for Notion\nconst transcript = $input.first().json.transcript || '';\nconst pageId = $('N02: Set Canonical Fields').first().json.PageId\n\nif (!transcript) {\n  console.log('No transcript available');\n  return [{ json: { blocks: [], pageId } }];\n}\n\nconst blocks = [];\nconst limit = 1500; // Character limit per block\n\n// Split transcript into chunks\nfor (let i = 0; i < transcript.length; i += limit) {\n  const chunk = transcript.slice(i, i + limit);\n  blocks.push({\n    type: 'paragraph',\n    paragraph: { \n      rich_text: [{ \n        type: 'text', \n        text: { content: chunk } \n      }] \n    }\n  });\n}\n\nreturn [{ json: { blocks, pageId } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2032,-640],"id":"transcript-splitter-001","name":"N05b.01: Split Transcript Chunks","alwaysOutputData":true,"notesInFlow":true,"notes":"Splits transcript into 1500-char blocks for Notion"},{"parameters":{"jsCode":"// Convert blocks array into individual items for processing\nconst { blocks, pageId } = $input.first().json;\n\n// Return each block as a separate item\nreturn blocks.map((block, index) => ({\n  json: {\n    pageId,\n    content: block.paragraph.rich_text[0].text.content,\n    blockType: block.type,\n    index\n  }\n}));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2256,-640],"id":"blocks-to-items-001","name":"N05b.02: Convert to Items","alwaysOutputData":true,"notesInFlow":true,"notes":"Converts blocks array to individual items"},{"parameters":{"resource":"block","blockId":{"__rl":true,"value":"={{ $('N02: Set Canonical Fields').item.json.PageId }}","mode":"id"},"blockUi":{"blockValues":[{"type":"toggle","textContent":"=Transcript - {{ $('N02: Set Canonical Fields').item.json.ArticleTitle }} {{ $now.format('(yyyy-MM-dd-HH:mm:ss)') }}  "}]}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2032,-832],"id":"create-toggle-001","name":"N05a.01: Create Toggle Container","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"resource":"block","blockId":{"__rl":true,"value":"={{ $json.toggleId }}","mode":"id"},"blockUi":{"blockValues":[{"textContent":"={{ $('N05b.02: Convert to Items').item.json.content }}"}]}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2704,-736],"id":"append-transcript-blocks-001","name":"N07: Append to Notion","alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"assignments":{"assignments":[{"id":"extract-toggle-id-001","name":"toggleId","value":"={{ $json.results.first().id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2256,-832],"id":"extract-toggle-id-001","name":"N05a.02: Extract Toggle ID"},{"parameters":{"mode":"combineBySql","query":"SELECT input1.toggleId, input2.content FROM input2 CROSS JOIN input1","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[2480,-736],"id":"merge-toggle-content-001","name":"N06: Merge Toggle with Content","alwaysOutputData":true},{"parameters":{"workflowInputs":{"values":[{"name":"property_article_id","type":"any"},{"name":"id","type":"any"}]}},"id":"fdc10be3-53d1-44d4-b8fe-553f17e33088","typeVersion":1.1,"name":"N00b: Manual Trigger","type":"n8n-nodes-base.executeWorkflowTrigger","position":[912,-640]},{"parameters":{"multipleMethods":true,"httpMethod":["POST"],"path":"f7088ed8-c134-485a-87f2-63b7c7c30c23","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[912,-832],"id":"17dfdff3-61d5-4fc7-8303-354e14fbe4f3","name":"N00a: Webhook Trigger","webhookId":"f7088ed8-c134-485a-87f2-63b7c7c30c23","notesInFlow":false,"alwaysOutputData":true},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{ $('N02: Set Canonical Fields').item.json.PageId }}","mode":"id"},"simple":false,"propertiesUi":{"propertyValues":[{"key":"Research Status|status","statusValue":"n8n Done"}]}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2928,-736],"id":"research-status-update-001","name":"N08: Update Research Status","credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}}],"connections":{"N01: Fetch YouTube Video":{"main":[[{"node":"N02: Set Canonical Fields","type":"main","index":0}]]},"N02: Set Canonical Fields":{"main":[[{"node":"N03: Update Notion Page","type":"main","index":0}]]},"N03: Update Notion Page":{"main":[[{"node":"N04: Get Transcript","type":"main","index":0}]]},"N04: Get Transcript":{"main":[[{"node":"N05a.01: Create Toggle Container","type":"main","index":0},{"node":"N05b.01: Split Transcript Chunks","type":"main","index":0}]]},"N05b.01: Split Transcript Chunks":{"main":[[{"node":"N05b.02: Convert to Items","type":"main","index":0}]]},"N05b.02: Convert to Items":{"main":[[{"node":"N06: Merge Toggle with Content","type":"main","index":1}]]},"N05a.01: Create Toggle Container":{"main":[[{"node":"N05a.02: Extract Toggle ID","type":"main","index":0}]]},"N05a.02: Extract Toggle ID":{"main":[[{"node":"N06: Merge Toggle with Content","type":"main","index":0}]]},"N06: Merge Toggle with Content":{"main":[[{"node":"N07: Append to Notion","type":"main","index":0}]]},"N07: Append to Notion":{"main":[[{"node":"N08: Update Research Status","type":"main","index":0}]]},"N08: Update Research Status":{"main":[]},"N00b: Manual Trigger":{"main":[[{"node":"N01: Fetch YouTube Video","type":"main","index":0}]]},"N00a: Webhook Trigger":{"main":[[{"node":"N01: Fetch YouTube Video","type":"main","index":0}],[]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"Webhook":[{"json":{"headers":{"host":"n8n.hyly.ai","user-agent":"NotionAutomation","content-length":"6637","baggage":"sentry-environment=production,sentry-release=0.0.4231,sentry-public_key=529a6d1990e5471d874257842c4f4ad8,sentry-trace_id=6e78574023694751a2fd5fe60cc5b466","content-type":"application/json","sentry-trace":"6e78574023694751a2fd5fe60cc5b466-bbccfa60ef414447","traceparent":"00-542fba26b6b8f511d83cf275b7d1fbb2-018fdf23c508e4d3-00","x-forwarded-for":"44.224.156.54","x-forwarded-host":"n8n.hyly.ai","x-forwarded-proto":"https","accept-encoding":"gzip"},"params":{},"query":{},"body":{"source":{"type":"automation","automation_id":"2511db9b-a441-80a4-8f02-004dee273e57","action_id":"2511db9b-a441-80b9-aed2-005a683210ce","event_id":"82148184-43d5-4230-8663-e2b465058e6f","attempt":1},"data":{"object":"page","id":"2501db9b-a441-80d2-809d-da2672c50cb5","created_time":"2025-08-15T22:56:00.000Z","last_edited_time":"2025-08-16T20:54:00.000Z","created_by":{"object":"user","id":"ffa8346a-444c-48dd-ac88-b87aa4c3a84f"},"last_edited_by":{"object":"user","id":"ffa8346a-444c-48dd-ac88-b87aa4c3a84f"},"cover":null,"icon":null,"parent":{"type":"database_id","database_id":"2501db9b-a441-80e6-b4ed-e2ea322b5053"},"archived":false,"in_trash":false,"properties":{"ChannelID":{"id":"%3DRtd","type":"rich_text","rich_text":[{"type":"text","text":{"content":"UCHePou0Yhr5GLPRZ1PEDkKg","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"UCHePou0Yhr5GLPRZ1PEDkKg","href":null}]},"Description":{"id":"%3E%5BvP","type":"rich_text","rich_text":[{"type":"text","text":{"content":"  🧠 Learn How To Scale Your Ads For $0 (Free Course): https://www.skool.com/jetads/about\n\n👉 Want Help Scaling Your Ads? Apply To Work With Me & Get A Free Scaling Roadmap ($1,000 Value): https://www.jetads.co ✈️\n\n-------------------------------------------------------------------------\n\nHello! If you're new to the channel, my name is Blake Bauer.\n\nI've been running Facebook & Google Ads since 2017 and have generated over $20M in revenue for our clients in over 20+ different industries. \n\nMy day job is building the best performance advertising agency in the world, JetAds.\n\nHow To Optimize Performance MAX Campaign (Google Ads)\n\nIn this video, I'll break down exactly how we optimize Performance Max campaigns at JetAds to maximize conversions and profitability. \n\nBy understanding the right data, spotting key weaknesses, and knowing where to double down, you can turn a struggling campaign into a highly profitable one. \n\nSo, if you're running Performance Max campaigns and want better results, this is the strategy you need to follow.\n\n00:00:00 - Why Your Performance Max Campaigns Are Underperforming\n00:00:29 - The First Step to Optimizing Performance Max Ads\n00:01:24 - Asset Groups: Cold, Broad, and Warm Segments\n00:02:46 - Setting Up Performance Max for Maximum ROI\n00:04:29 - How to Analyze Asset Performance & Improve Ads\n00:06:33 - Using Insights Tab for Data-Driven Optimization\n00:07:48 - Cutting Underperforming Products & Keywords\n00:09:22 - Competitor Analysis: Who's Competing for Your Ads?\n00:11:01 - Scaling Strategies: Target ROAS & Budget Adjustments\n00:16:06 - Final Checklist for Performance Max Optimization\n\n-------------------------------------------------------------------------\n\nCONNECT WITH ME\n\n📸 - Follow Me On Instagram: https://www.instagram.com/theblakebauer\n🔗 - Follow Me On LinkedIn: https://www.linkedin.com/theblakebauer\n🎵 - Follow Me On TikTok: https:/","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"  🧠 Learn How To Scale Your Ads For $0 (Free Course): https://www.skool.com/jetads/about\n\n👉 Want Help Scaling Your Ads? Apply To Work With Me & Get A Free Scaling Roadmap ($1,000 Value): https://www.jetads.co ✈️\n\n-------------------------------------------------------------------------\n\nHello! If you're new to the channel, my name is Blake Bauer.\n\nI've been running Facebook & Google Ads since 2017 and have generated over $20M in revenue for our clients in over 20+ different industries. \n\nMy day job is building the best performance advertising agency in the world, JetAds.\n\nHow To Optimize Performance MAX Campaign (Google Ads)\n\nIn this video, I'll break down exactly how we optimize Performance Max campaigns at JetAds to maximize conversions and profitability. \n\nBy understanding the right data, spotting key weaknesses, and knowing where to double down, you can turn a struggling campaign into a highly profitable one. \n\nSo, if you're running Performance Max campaigns and want better results, this is the strategy you need to follow.\n\n00:00:00 - Why Your Performance Max Campaigns Are Underperforming\n00:00:29 - The First Step to Optimizing Performance Max Ads\n00:01:24 - Asset Groups: Cold, Broad, and Warm Segments\n00:02:46 - Setting Up Performance Max for Maximum ROI\n00:04:29 - How to Analyze Asset Performance & Improve Ads\n00:06:33 - Using Insights Tab for Data-Driven Optimization\n00:07:48 - Cutting Underperforming Products & Keywords\n00:09:22 - Competitor Analysis: Who's Competing for Your Ads?\n00:11:01 - Scaling Strategies: Target ROAS & Budget Adjustments\n00:16:06 - Final Checklist for Performance Max Optimization\n\n-------------------------------------------------------------------------\n\nCONNECT WITH ME\n\n📸 - Follow Me On Instagram: https://www.instagram.com/theblakebauer\n🔗 - Follow Me On LinkedIn: https://www.linkedin.com/theblakebauer\n🎵 - Follow Me On TikTok: https:/","href":null}]},"URL":{"id":"%5C%7DeP","type":"url","url":"https://www.youtube.com/watch?v=Erh2Xl0eeLI"},"Channel":{"id":"meZ_","type":"rich_text","rich_text":[{"type":"text","text":{"content":"Blake Bauer Business","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Blake Bauer Business","href":null}]},"ArticleID":{"id":"ocBt","type":"rich_text","rich_text":[{"type":"text","text":{"content":"Erh2Xl0eeLI","link":{"url":"Erh2Xl0eeLI"}},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Erh2Xl0eeLI","href":"Erh2Xl0eeLI"}]},"ArticleTitle":{"id":"title","type":"title","title":[{"type":"text","text":{"content":"How To Optimize Performance MAX Campaigns (Google Ads)","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"How To Optimize Performance MAX Campaigns (Google Ads)","href":null}]},"Research Topic":{"id":"MRnk","type":"rich_text","rich_text":[]},"Research Status":{"id":"%3CxbI","type":"status","status":{"id":"2dd2656f-f929-435e-9d54-0a3b9295336c","name":"n8n Transcribe","color":"gray"}},"Publication Date":{"id":"DDfa","type":"date","date":null}},"url":"https://www.notion.so/How-To-Optimize-Performance-MAX-Campaigns-Google-Ads-2501db9ba44180d2809dda2672c50cb5","public_url":null,"request_id":"91929d39-4ccc-4879-8ac5-a43db7cda6db"}},"webhookUrl":"http://localhost:5678/webhook/f7088ed8-c134-485a-87f2-63b7c7c30c23","executionMode":"production"}}],"N00b: Manual Trigger":[{"json":{"headers":{"host":"n8n.hyly.ai","user-agent":"NotionAutomation","content-length":"5195","baggage":"sentry-environment=production,sentry-release=0.0.4235,sentry-public_key=529a6d1990e5471d874257842c4f4ad8,sentry-trace_id=7836b44f06c741a3a3bc8b8ce266109d","content-type":"application/json","sentry-trace":"7836b44f06c741a3a3bc8b8ce266109d-bf1274521d17ce9e","traceparent":"00-ca7597762283efec11c66bf2b562fd0c-76a2e72db191404e-00","x-forwarded-for":"52.38.219.39","x-forwarded-host":"n8n.hyly.ai","x-forwarded-proto":"https","accept-encoding":"gzip"},"params":{},"query":{},"body":{"source":{"type":"automation","automation_id":"2511db9b-a441-80a4-8f02-004dee273e57","action_id":"2511db9b-a441-80b9-aed2-005a683210ce","event_id":"ea28862e-635e-4d47-bdf0-5db34940967a","attempt":1},"data":{"object":"page","id":"2501db9b-a441-8004-bae6-d06a6db447e9","created_time":"2025-08-15T22:56:00.000Z","last_edited_time":"2025-08-17T18:29:00.000Z","created_by":{"object":"user","id":"ffa8346a-444c-48dd-ac88-b87aa4c3a84f"},"last_edited_by":{"object":"user","id":"ffa8346a-444c-48dd-ac88-b87aa4c3a84f"},"cover":null,"icon":null,"parent":{"type":"database_id","database_id":"2501db9b-a441-80e6-b4ed-e2ea322b5053"},"archived":false,"in_trash":false,"properties":{"ChannelID":{"id":"%3DRtd","type":"rich_text","rich_text":[{"type":"text","text":{"content":"UCsifPO4MT6BdV19vYx3KJ0Q","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"UCsifPO4MT6BdV19vYx3KJ0Q","href":null}]},"Description":{"id":"%3E%5BvP","type":"rich_text","rich_text":[{"type":"text","text":{"content":"  Before you launch another Performance Max campaign… this is what you need to understand FIRST!\n\nBecause if you don't actually know how PMAX works—you're not running campaigns, you're wasting your ad spend.\n\nIn this video, I'm going to break down exactly how Performance Max campaigns really work in 2025 from the data I've seen across millions of dollars in spend managing both eCom and lead gen campaigns.\n\n👉 Need Help with your Google Ads Campaigns? https://www.definedigitalacademy.com/how-can-we-help\n\n👉 Follow the step by step process for setting up your Performance Max campaigns with my updated Guide for 2025: https://www.definedigitalacademy.com/performance-max-guide\n\nGet more support from Aaron 😀\n\n👉 Discover the RIGHT way to set up & optimise your Google Ads campaigns with my easy to follow courses (over 5,000+ happy students): https://www.definedigitalacademy.com/courses\n\n👉 Join 350+ like-minded individuals and get personalised support in my exclusive 10x Google Ads Community: https://www.definedigitalacademy.com/10x-google-ads-community-1\n\n👉 Want Aaron to run your Google Ads campaign? Apply Now: https://www.definedigitalacademy.com/google-ads-management","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"  Before you launch another Performance Max campaign… this is what you need to understand FIRST!\n\nBecause if you don't actually know how PMAX works—you're not running campaigns, you're wasting your ad spend.\n\nIn this video, I'm going to break down exactly how Performance Max campaigns really work in 2025 from the data I've seen across millions of dollars in spend managing both eCom and lead gen campaigns.\n\n👉 Need Help with your Google Ads Campaigns? https://www.definedigitalacademy.com/how-can-we-help\n\n👉 Follow the step by step process for setting up your Performance Max campaigns with my updated Guide for 2025: https://www.definedigitalacademy.com/performance-max-guide\n\nGet more support from Aaron 😀\n\n👉 Discover the RIGHT way to set up & optimise your Google Ads campaigns with my easy to follow courses (over 5,000+ happy students): https://www.definedigitalacademy.com/courses\n\n👉 Join 350+ like-minded individuals and get personalised support in my exclusive 10x Google Ads Community: https://www.definedigitalacademy.com/10x-google-ads-community-1\n\n👉 Want Aaron to run your Google Ads campaign? Apply Now: https://www.definedigitalacademy.com/google-ads-management","href":null}]},"URL":{"id":"%5C%7DeP","type":"url","url":"https://www.youtube.com/watch?v=QhaiqGPlY2Y"},"Channel":{"id":"meZ_","type":"rich_text","rich_text":[{"type":"text","text":{"content":"Aaron Young  | Google Ads | Define Digital Academy","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Aaron Young  | Google Ads | Define Digital Academy","href":null}]},"ArticleID":{"id":"ocBt","type":"rich_text","rich_text":[{"type":"text","text":{"content":"QhaiqGPlY2Y","link":{"url":"QhaiqGPlY2Y"}},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"QhaiqGPlY2Y","href":"QhaiqGPlY2Y"}]},"ArticleTitle":{"id":"title","type":"title","title":[{"type":"text","text":{"content":"How Performance Max Campaigns Work in 2025","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"How Performance Max Campaigns Work in 2025","href":null}]},"Research Topic":{"id":"MRnk","type":"rich_text","rich_text":[]},"Research Status":{"id":"%3CxbI","type":"status","status":{"id":"2dd2656f-f929-435e-9d54-0a3b9295336c","name":"n8n Transcribe","color":"gray"}},"Publication Date":{"id":"DDfa","type":"date","date":null}},"url":"https://www.notion.so/How-Performance-Max-Campaigns-Work-in-2025-2501db9ba4418004bae6d06a6db447e9","public_url":null,"request_id":"10447e82-01c0-45eb-b185-43bb63be6800"}},"webhookUrl":"http://localhost:5678/webhook/f7088ed8-c134-485a-87f2-63b7c7c30c23","executionMode":"production"}}]},"versionId":"8b10f172-f9b4-46f8-bdc6-1ff1988cf06d","triggerCount":1,"tags":[]},{"createdAt":"2025-07-25T22:37:34.694Z","updatedAt":"2025-07-31T05:11:28.000Z","id":"mRQ5mkIZedt21yyC","name":"Backup-Backlog2Planners-Simple copy","active":false,"isArchived":true,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-60,-740],"id":"2cd9988e-c982-46bd-bedc-e554b503f356","name":"When clicking ‘Execute workflow’"},{"parameters":{"fieldToSplitOut":"messages","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[600,-840],"id":"b75eb603-ac2c-458b-a7e2-99dce5c06c8f","name":"Split Out"},{"parameters":{"resource":"thread","operation":"get","threadId":"={{ $json.threadId }}","options":{},"path":"f338e39d-c876-4395-a4dd-04e9253bb3b4"},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[380,-840],"id":"76f608b6-5786-4583-98c3-209776214dda","name":"Get a thread","webhookId":"f338e39d-c876-4395-a4dd-04e9253bb3b4","executeOnce":true,"credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}},{"parameters":{"operation":"get","messageId":"={{ $json.id }}","simple":false,"options":{},"path":"f2ea3c2c-40bc-423e-9c0d-72cbaf524d09"},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[820,-840],"id":"bd42fa95-8a51-462d-9e6d-3e2639c807d8","name":"Get a message","webhookId":"f2ea3c2c-40bc-423e-9c0d-72cbaf524d09","credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}},{"parameters":{"operation":"get","messageId":"={{ $json.query.id }}","path":"9c2b1a88-ee6c-4554-a0d7-9464383d7398"},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[160,-840],"id":"776c0990-6122-4dba-93ef-9aa4b17e24db","name":"Get a message1","webhookId":"9c2b1a88-ee6c-4554-a0d7-9464383d7398","alwaysOutputData":true,"credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}},{"parameters":{"workflowId":{"__rl":true,"value":"4c1RPy0PYoxFCCxj","mode":"list","cachedResultName":"PlannerEmail: Create v20250725-015520"},"workflowInputs":{"mappingMode":"defineBelow","value":{"gmailId":"={{ $json.id }}","subject":"={{ $json.subject }}","threadId":"={{ $json.threadId }}","gmailDate":"={{ $json.date }}","fromEmail":"={{ $json.from.value[0].address }}","freshContent":"={{ $json.text }}"},"matchingColumns":[],"schema":[{"id":"gmailId","displayName":"gmailId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"fromEmail","displayName":"fromEmail","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"subject","displayName":"subject","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"freshContent","displayName":"freshContent","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"threadId","displayName":"threadId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"gmailDate","displayName":"gmailDate","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true}],"attemptToConvertTypes":false,"convertFieldsToString":true},"mode":"each","options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1040,-840],"id":"3c70cc34-4599-43e8-82dd-ca98ffd8060f","name":"Execute Workflow"},{"parameters":{"path":"d39f1ca8-cb7a-4fa1-b42d-0c74e6aa3651","options":{"noResponseBody":false}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-60,-940],"id":"46016a59-93f2-4e2a-a966-a7b74212d909","name":"Webhook","webhookId":"d39f1ca8-cb7a-4fa1-b42d-0c74e6aa3651"}],"connections":{"When clicking ‘Execute workflow’":{"main":[[{"node":"Get a message1","type":"main","index":0}]]},"Get a thread":{"main":[[{"node":"Split Out","type":"main","index":0}]]},"Split Out":{"main":[[{"node":"Get a message","type":"main","index":0}]]},"Get a message":{"main":[[{"node":"Execute Workflow","type":"main","index":0}]]},"Get a message1":{"main":[[{"node":"Get a thread","type":"main","index":0}]]},"Execute Workflow":{"main":[[]]},"Webhook":{"main":[[{"node":"Get a message1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When clicking ‘Execute workflow’":[{"json":{"query":{"id":"197fac9e1c67dc74"}}}],"Webhook":[{"json":{"query":{"id":"197fac9e1c67dc74"}}}]},"versionId":"c10ad6aa-963f-46eb-82df-91b5ae3f4dfb","triggerCount":1,"tags":[]},{"createdAt":"2025-08-14T02:58:35.468Z","updatedAt":"2025-08-14T03:08:44.000Z","id":"mdce5DpAkIJImhJw","name":"DELETE Github backup sub-workflow","active":false,"isArchived":true,"nodes":[{"parameters":{"content":"## Subworkflow","height":731.7039821513649,"width":1910.7813046051347,"color":6},"id":"c6024a57-1957-4714-84e3-8d326c83cd89","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[368,704],"typeVersion":1},{"parameters":{"inputSource":"passthrough"},"id":"e7cac770-80a5-4357-927e-fb79e56e2acd","typeVersion":1.1,"name":"Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[160,704]}],"connections":{},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"b260a901-e497-4b71-9785-591277dcf322","triggerCount":0,"tags":[]},{"createdAt":"2025-08-13T10:59:34.270Z","updatedAt":"2025-08-14T06:42:40.000Z","id":"ouUD4tmC54HCYEjd","name":"old flow","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"977d5c0a-5587-433a-ac57-1520ec607cc6","name":"Start","position":[-1280,368],"type":"n8n-nodes-base.manualTrigger","typeVersion":1},{"parameters":{"authentication":"oAuth2","resource":"drive","operation":"get","driveId":{"__rl":true,"value":"0AINXeb_iVKTFUk9PVA","mode":"list","cachedResultName":"Sales_Zoom_Recording_Transcript"},"options":{}},"id":"c2f9873f-06a0-44c6-a6c2-cd4f41ff7c8c","name":"Go to share drive","position":[-1088,368],"type":"n8n-nodes-base.googleDrive","typeVersion":1,"credentials":{"googleDriveOAuth2Api":{"id":"psUJfPffy3IsMJGV","name":"Google Drive account 4"}}},{"parameters":{"resource":"fileFolder","queryString":"=={{ '.txt' }}\n","returnAll":true,"filter":{"folderId":{"__rl":true,"value":"={{ $json.id }}","mode":"id"}},"options":{}},"id":"d560041e-a65c-4b9e-93cd-549708a9549e","name":"List TXT Files","position":[-880,368],"type":"n8n-nodes-base.googleDrive","typeVersion":3,"alwaysOutputData":true,"executeOnce":false,"credentials":{"googleDriveOAuth2Api":{"id":"psUJfPffy3IsMJGV","name":"Google Drive account 4"}}},{"parameters":{"mode":"runOnceForEachItem","jsCode":"const raw = $json.name || $json.originalFileName || '';\nconst out = { ...$json, originalName: raw };\n\n// 1) Remove suffixes\nlet base = raw\n  .replace(/-transcript\\.txt$/i, '')\n  .replace(/\\.txt$/i, '');\n\n// 2) Split glued patterns (CamelCase, digit/letter)\nbase = base\n  .replace(/([a-z])([A-Z])/g, '$1 $2')\n  .replace(/(\\d)([A-Za-z])/g, '$1 $2')\n  .replace(/([A-Za-z])(\\d)/g, '$1 $2');\n\n// 3) Extract date (., -, _, space, or none), normalize to YYYY.MM.DD\nconst dateRe = /(?<!\\d)(20\\d{2}|19\\d{2})[.\\-_\\s]?(\\d{2})[.\\-_\\s]?(\\d{2})(?!\\d)/;\nlet dateString = '';\nconst m = base.match(dateRe);\nif (m) {\n  dateString = `${m[1]}.${m[2]}.${m[3]}`;\n  base = base.replace(new RegExp(dateRe, 'g'), ' ⟂DATE⟂ ');\n}\n\n// 4) Normalize separators & reinsert date with dot prefix\nbase = base.replace(/[._-]+/g, ' ').replace(/\\s+/g, ' ').trim();\nlet expectedTitle = base\n  .replace(/\\s*⟂DATE⟂\\s*/g, dateString ? ` .${dateString} ` : ' ')\n  .replace(/\\s+\\./g, '.')\n  .replace(/\\s+/g, ' ')\n  .trim();\n\n// Outputs per your spec\nout.expectedTitle = expectedTitle;                 // e.g. \"Check In Bozzuto.2025.08.06 Hayley\"\nout.base         = expectedTitle;                 // you wanted base to equal the full string\nout.baseWords    = expectedTitle;\nout.searchTerm   = dateString || '';\n\nreturn out;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-192,368],"id":"2d42e1b9-10a1-499f-a915-dee00f7a98a1","name":"Sanitize file name","alwaysOutputData":true,"executeOnce":false},{"parameters":{"operation":"text","destinationKey":"Transcript","options":{"keepSource":"both"}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[1760,592],"id":"2850f144-82ae-4d0c-a63b-4e2a1728a1e4","name":"Extract from File","alwaysOutputData":true,"executeOnce":true,"notesInFlow":true,"notes":"extract transcript"},{"parameters":{"assignments":{"assignments":[{"id":"ca7c7ca0-b9f1-451b-9d17-af5642e58375","name":"childPageId","value":"={{ $json.id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2432,384],"id":"0c61f275-831f-40ba-946a-782fe9f55ca1","name":"Edit Fields","alwaysOutputData":true,"notesInFlow":true,"notes":"Give a specific name to the child page ID"},{"parameters":{"pageId":{"__rl":true,"value":"={{ $json.id }}","mode":"id"},"title":"=Transcript -  {{ $json.name }}","blockUi":{"blockValues":[{"textContent":"="}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[1888,336],"id":"b63d8d01-b681-4274-8993-8d7a3b704d2d","name":"Create child page","alwaysOutputData":true},{"parameters":{"jsCode":"// Input: item.json.Transcript (string), item.json.childPageId (string)\nconst item = $input.first().json;\nconst vtt = item.Transcript || item.content || '';\nconst childPageId = item.childPageId;\n\nconst blocks = [];\n// Match: <number>\\n<start --> end>\\n<text...>(until next number line or end)\nconst cueRe = /(?:^|\\n)\\s*(\\d+)\\s*\\n\\s*(\\d{2}:\\d{2}:\\d{2}\\.\\d{3})\\s*-->\\s*(\\d{2}:\\d{2}:\\d{2}\\.\\d{3})\\s*\\n([\\s\\S]*?)(?=\\n\\s*\\d+\\s*\\n|\\n*$)/g;\n\nlet m;\nwhile ((m = cueRe.exec(vtt)) !== null) {\n  const idx = m[1];\n  const start = m[2];\n  const end = m[3];\n  // Collapse any newlines inside the cue body to spaces\n  const body = m[4].trim().replace(/\\n+/g, ' ');\n  // One text block per section\n  let section = `${idx}. [${start} → ${end}] ${body}`;\n\n  // Safety: Notion hard limit ~2000 chars per text block.\n  // If any single section is too big, split it (rare for cues).\n  const limit = 1900;\n  if (section.length <= limit) {\n    blocks.push({\n      type: 'paragraph',\n      paragraph: { rich_text: [{ type: 'text', text: { content: section } }] }\n    });\n  } else {\n    for (let i = 70.15; i < section.length; i += limit) {\n      blocks.push({\n        type: 'paragraph',\n        paragraph: { rich_text: [{ type: 'text', text: { content: section.slice(i, i + limit) } }] }\n      });\n    }\n  }\n}\n\nreturn [{ json: { childPageId, blocks } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2000,624],"id":"ee1eb4ad-9229-45fb-8f0b-924f8ac9ce46","name":"Code","alwaysOutputData":true,"notesInFlow":true,"notes":"Divide content into chunks"},{"parameters":{"resource":"block","blockId":{"__rl":true,"value":"={{ $json.childPageId }}","mode":"id"},"blockUi":{"blockValues":[{"textContent":"={{ $json.content }}"}]}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2896,448],"id":"e95727c3-d96f-4c5d-868f-e4ebd499e7bc","name":"Append a block","alwaysOutputData":true},{"parameters":{"jsCode":"const { childPageId, blocks } = $input.first().json;\n\n// turn each Notion block object into a plain string for the UI builder\nfunction blockToText(b) {\n  if (b?.paragraph?.rich_text?.length) {\n    return b.paragraph.rich_text\n      .map(rt => (rt.text?.content ?? ''))\n      .join('');\n  }\n  return ''; // adjust if you added other block types\n}\n\nreturn blocks.map(b => ({\n  json: {\n    childPageId,\n    content: blockToText(b)\n  }\n}));\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2208,624],"id":"1abc4272-975e-40d1-9c76-8b90bc9b9a8c","name":"Code1","alwaysOutputData":true,"notesInFlow":true,"notes":"Convert the chunks into notion block format"},{"parameters":{"mode":"combineBySql","query":"SELECT input1.childPageId, input2.content\nFROM input2\nCROSS JOIN input1","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[2672,448],"id":"41ab88f2-589f-4b13-aee6-713db688af85","name":"Merge1","alwaysOutputData":true},{"parameters":{"content":"**#Searching in Notion with .txt file name.**","height":368,"width":736},"type":"n8n-nodes-base.stickyNote","position":[-432,224],"typeVersion":1,"id":"76c121ca-1cad-402d-a395-0f005c1da660","name":"Sticky Note"},{"parameters":{"content":"**# Fitting  >20000 characters in Notion block**\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)","height":592,"width":800},"type":"n8n-nodes-base.stickyNote","position":[528,208],"typeVersion":1,"id":"036d4fea-e2ea-4d67-a2b2-b5df8e6588f1","name":"Sticky Note1"},{"parameters":{"jsCode":"const items = $input.all();\n\nreturn items.map(item => {\n  // Check if binary data exists\n  if (!item.binary || !item.binary.data) {\n    console.error('No binary data found');\n    throw new Error('No binary data found');\n  }\n  \n  // Convert binary to text\n  const buffer = Buffer.from(item.binary.data.data, 'base64');\n  const content = buffer.toString('utf8');\n  \n  // Get the file name\n  const fileName = item.json?.name || 'unknown.txt';\n  \n  console.log('Converted file:', fileName);\n  console.log('Content length:', content.length);\n  \n  // Add to json output\n  item.json.content = content;\n  item.json.originalFileName = fileName;\n  item.json.contentLength = content.length;\n  \n  return item;\n});"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[0,0],"id":"8bf89058-65e6-49ab-bb46-71eb0180e1f1","name":"Binary to text","alwaysOutputData":true,"notesInFlow":true,"disabled":true,"notes":"To convert the file into Data"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"eef3a798-d518-47cc-ae76-847d3882c344","leftValue":"={{ $json.property_meeting_date.start }}","rightValue":"2025-01-01T00:00:00","operator":{"type":"dateTime","operation":"afterOrEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1264,304],"id":"d5707b36-ceac-4c13-a68a-1e6bdb3d10eb","name":"If","alwaysOutputData":true,"notesInFlow":true,"notes":"Page Exist?"},{"parameters":{"assignments":{"assignments":[{"id":"5556e847-3cda-4e32-b4ac-cac9b344f6e7","name":"Drivefields","value":"={{ $('Sanitize file name').item.json.id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[896,48],"id":"0c42e2a3-98b9-4b8f-9ec8-b552ac47cd1a","name":"Tag file id (left)","alwaysOutputData":true,"disabled":true},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"f22d8083-6d1d-4759-a1c0-c133a4cce8c9","mode":"list","cachedResultName":"DB.Client Meeting Diary","cachedResultUrl":"https://www.notion.so/f22d80836d1d4759a1c0c133a4cce8c9"},"limit":5,"filterType":"manual","matchType":"allFilters","filters":{"conditions":[{"key":"Created time|created_time","condition":"after","createdTimeValue":"2025-03-01T00:00:00"},{"key":"Meeting Date|date","condition":"equals","date":"={{ $json.searchTerm }}"},{"key":"Meeting Subject|title","condition":"contains","titleValue":"={{ $json.expectedTitle }}"},{"key":"Status|status","condition":"does_not_equal","statusValue":"No Show"},{"key":"Status|status","condition":"does_not_equal","statusValue":"Cancel"},{"key":"Status|status","condition":"does_not_equal","statusValue":"Upcoming Meeting"}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[1008,256],"id":"a911219c-1a52-4021-82dc-175461db618d","name":"Get the notion page","alwaysOutputData":true,"notesInFlow":true,"executeOnce":true,"credentials":{"notionApi":{"id":"1irJTXhoFNvETAJ1","name":"Notion account 2"}},"notes":"Retrieve all possible pages "},{"parameters":{"assignments":{"assignments":[{"id":"f519df96-c20b-4081-a1dd-5421f3e3003e","name":"searchTermISO","value":"={{ $json.searchTerm ? $json.searchTerm.replace(/\\./g, '-') : '' }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-176,48],"id":"d2136fcc-da04-4e9f-bc52-03be6d1c2af3","name":"Edit Fields1","alwaysOutputData":true,"disabled":true},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"41810043-9dff-48c0-9394-939d42b859d4","leftValue":"={{ $json.searchTerm }}","rightValue":"=={{ $json.searchTermISO || $json.searchTerm || '' }}","operator":{"type":"dateTime","operation":"notEmpty","singleValue":true}}],"combinator":"or"},"options":{"ignoreCase":true}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[336,352],"id":"f7de4b4c-56d6-4439-93f0-16f70d203249","name":"If1","alwaysOutputData":true,"onError":"continueErrorOutput"},{"parameters":{"operation":"download","fileId":{"__rl":true,"value":"1EJ9ZA0Xrc6gTvjrpxU4fjLkUVnj0mN5c","mode":"list","cachedResultName":"10LouderHarmoniq.2024.12.02-DiscoveryCall-transcript.txt","cachedResultUrl":"https://drive.google.com/file/d/1EJ9ZA0Xrc6gTvjrpxU4fjLkUVnj0mN5c/view?usp=drivesdk"},"options":{"binaryPropertyName":"data"}},"id":"e7520106-d902-406b-9c0d-52be5d8f9dd1","name":"Download File","type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[1536,576],"credentials":{"googleDriveOAuth2Api":{"id":"psUJfPffy3IsMJGV","name":"Google Drive account 4"}}},{"parameters":{"jsCode":"const items = $input.all();\nconst first = items[70.15]?.json ?? {};\nconst fileName  = first.originalName ?? 'Unknown';\nconst pageTitle = first.pageTitle   ?? 'Unknown';\nconst chunkCount = first.chunkCount ?? items.length;\n\nconsole.log(`✅ Successfully added transcript to Notion`);\nconsole.log(`   File: ${fileName}`);\nconsole.log(`   Page: ${pageTitle}`);\nconsole.log(`   Chunks: ${chunkCount}`);\n\nitems.forEach(i => {\n  i.json.status = 'success';\n  i.json.timestamp = new Date().toISOString();\n});\nreturn items;\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3184,448],"id":"a69e202f-9c79-4c4c-ace3-9be30f62ae32","name":"Done"},{"parameters":{"jsCode":"const MAX  = 3;  // pick this many unique files\nconst SKIP = 1;  // set to 1 to get the \"next\" 3 after the first you already processed (set to 70.15 later)\n\nconst items = $input.all();\n\n// optional: newest first if Drive timestamp is available\nitems.sort((a,b) => Date.parse(b.json.modifiedTime||70.15) - Date.parse(a.json.modifiedTime||70.15));\n\nconst seen = new Set();\nconst uniques = [];\nfor (const i of items) {\n  // use sanitized title to detect duplicates (works across same-name copies)\n  const key = (i.json.expectedTitle || i.json.name || '').toLowerCase().trim();\n  if (seen.has(key)) continue;\n  seen.add(key);\n  uniques.push(i);\n}\n\n// apply SKIP then take MAX\nreturn uniques.slice(SKIP, SKIP + MAX);\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[16,368],"id":"789aa618-b14e-4bb9-a985-e84ebcc0879d","name":"Limit","alwaysOutputData":true},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[592,368],"id":"e76b52d3-c7fe-4510-a54c-9d5c124d4c02","name":"Loop Over Items","alwaysOutputData":true}],"connections":{"Start":{"main":[[{"node":"Go to share drive","type":"main","index":0}]]},"Go to share drive":{"main":[[{"node":"List TXT Files","type":"main","index":0}]]},"List TXT Files":{"main":[[{"node":"Sanitize file name","type":"main","index":0}]]},"Sanitize file name":{"main":[[{"node":"Limit","type":"main","index":0}]]},"Extract from File":{"main":[[{"node":"Code","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Merge1","type":"main","index":0}]]},"Create child page":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"Code":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Merge1","type":"main","index":1}]]},"Merge1":{"main":[[{"node":"Append a block","type":"main","index":0}]]},"Append a block":{"main":[[{"node":"Done","type":"main","index":0}]]},"If":{"main":[[{"node":"Create child page","type":"main","index":0},{"node":"Download File","type":"main","index":0}]]},"Get the notion page":{"main":[[{"node":"If","type":"main","index":0}]]},"If1":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Download File":{"main":[[{"node":"Extract from File","type":"main","index":0}]]},"Limit":{"main":[[{"node":"If1","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"If","type":"main","index":0}],[{"node":"Get the notion page","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"f3ce75fb-9b14-4735-9349-aee42dcac757","triggerCount":0,"tags":[]},{"createdAt":"2025-07-18T23:07:47.233Z","updatedAt":"2025-07-19T18:05:10.000Z","id":"pKGutut68sVBB80v","name":"System Test > Gmail Connection v20250718-190747","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"b119bde3-ae75-4e0e-bad9-f6d5f79657b7","name":"Manual Trigger","type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[300,-40]},{"parameters":{"operation":"getAll","limit":1,"filters":{"labelIds":["Label_3354844662140732008"]}},"id":"5a12b5d6-71b6-4857-b1a5-4bcb8f2b3cef","name":"Test Gmail Connection","type":"n8n-nodes-base.gmail","typeVersion":2,"position":[520,-40],"webhookId":"1c0e01c0-cf85-4976-a98a-8a29a772088a","alwaysOutputData":true,"executeOnce":true,"credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}}],"connections":{"Manual Trigger":{"main":[[{"node":"Test Gmail Connection","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"4c7317e6-7382-44e5-9a42-6c32261b22e8","triggerCount":0,"tags":[]},{"createdAt":"2025-07-18T22:12:32.690Z","updatedAt":"2025-07-31T05:17:03.000Z","id":"s9WyUIs3imhnnkzr","name":"Get Gmail Latest v20250719-011050","active":false,"isArchived":true,"nodes":[{"parameters":{"path":"get-gmail-latest","options":{}},"id":"webhook-trigger","name":"Get Gmail Latest Webhook","type":"n8n-nodes-base.webhook","typeVersion":1,"position":[250,300],"webhookId":"e45c2f99-785e-4094-a209-21dd504bcc5c"},{"parameters":{"jsCode":"// Extract date parameter from webhook query\nconst query = $json.query || {};\nconst dateParam = query.date;\n\nconsole.log('🔍 Webhook query received:', JSON.stringify(query, null, 2));\n\n// Validate date parameter\nif (!dateParam) {\n  console.error('❌ Missing date parameter');\n  return [{\n    json: {\n      success: false,\n      error: \"Missing required parameter: date\",\n      details: \"Please provide date parameter (format: YYYYMMDD)\"\n    }\n  }];\n}\n\n// Validate date format (YYYYMMDD)\nconst dateRegex = /^\\d{8}$/;\nif (!dateRegex.test(dateParam)) {\n  console.error('❌ Invalid date format:', dateParam);\n  return [{\n    json: {\n      success: false,\n      error: \"Invalid date format\",\n      details: \"Date must be in YYYYMMDD format (e.g., 20250713)\"\n    }\n  }];\n}\n\n// Parse date\nconst year = dateParam.substring(0, 4);\nconst month = dateParam.substring(4, 6);\nconst day = dateParam.substring(6, 8);\nconst formattedDate = `${year}/${month}/${day}`;\n\nconsole.log(`✅ Valid date: ${formattedDate}`);\n\n// Build Gmail query for specific date and folder\n// For emails ON the specified date: after the same date, before the next day\nconst dateObj = new Date(year, month - 1, day); // month is 0-indexed\nconst nextDay = new Date(dateObj);\nnextDay.setDate(dateObj.getDate() + 1);\n\nconst afterDate = formattedDate; // Same as input date\nconst beforeDate = `${nextDay.getFullYear()}/${String(nextDay.getMonth() + 1).padStart(2, '0')}/${String(nextDay.getDate()).padStart(2, '0')}`;\n\nconst gmailQuery = `after:${afterDate} before:${beforeDate} in:\"--Watch/VC\"`;\n\nconsole.log(`📧 Gmail query: ${gmailQuery}`);\n\n// Return success with Gmail query\nreturn [{\n  json: {\n    success: true,\n    date: formattedDate,\n    gmailQuery: gmailQuery,\n    timestamp: new Date().toISOString()\n  }\n}];"},"id":"validate-prepare","name":"Validate & Prepare Query","type":"n8n-nodes-base.code","typeVersion":2,"position":[470,300]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"condition-1","leftValue":"={{ $json.success }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"id":"validation-check","name":"Validation Check","type":"n8n-nodes-base.if","typeVersion":2,"position":[690,300]},{"parameters":{"operation":"getAll","limit":100,"filters":{"q":"={{$node[\"Validate & Prepare Query\"].json[\"gmailQuery\"]}}"}},"id":"gmail-search","name":"Search Gmail Messages","type":"n8n-nodes-base.gmail","typeVersion":2,"position":[910,220],"retryOnFail":true,"maxTries":3,"waitBetweenTries":2000,"webhookId":"81f51666-b9c4-4b3a-8f1c-a87ad9dc01d8","alwaysOutputData":true,"credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}},"onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Unified response handler for both validation errors and Gmail results\nconst validationResult = $('Validate & Prepare Query').first().json;\n\n// If validation failed, return error response\nif (!validationResult.success) {\n  console.log('❌ Returning validation error');\n  return [{\n    json: {\n      error: validationResult.error,\n      details: validationResult.details\n    }\n  }];\n}\n\n// If validation passed, check if we have Gmail results\ntry {\n  const gmailMessages = $('Search Gmail Messages').all();\n  \n  // Handle Gmail API errors\n  if (gmailMessages.length === 1 && gmailMessages[0].json.error) {\n    const error = gmailMessages[0].json.error;\n    console.error('❌ Gmail API error:', error);\n    \n    if (error.message?.includes(\"auth\")) {\n      return [{\n        json: {\n          error: \"Gmail authentication failed\",\n          details: \"Unable to authenticate with Gmail API\"\n        }\n      }];\n    }\n    \n    return [{\n      json: {\n        error: \"Gmail API request failed\",\n        details: \"Failed to retrieve messages from Gmail API\"\n      }\n    }];\n  }\n  \n  // Check for empty results - Gmail returns empty object {} when no messages found\n  if (!gmailMessages || gmailMessages.length === 0 || \n      (gmailMessages.length === 1 && !gmailMessages[0].json.id)) {\n    console.log(\"ℹ️ No messages found for the specified date\");\n    return [{\n      json: {\n        error: \"No email found for date \" + validationResult.date.replace(/\\//g, \"\"),\n        details: \"No emails were found in the --Watch/VC folder for the specified date\"\n      }\n    }];\n  }\n  \n  // Process and format messages\n  const formattedMessages = gmailMessages.map(item => {\n    const msg = item.json;\n    \n    return {\n      messageId: msg.id,\n      threadId: msg.threadId,\n      from: msg.From || \"Unknown\",\n      subject: msg.Subject || \"No Subject\"\n    };\n  });\n  \n  console.log(`✅ Found ${formattedMessages.length} messages`);\n  \n  // Return formatted messages as individual items\n  return formattedMessages.map(msg => ({ json: msg }));\n  \n} catch (error) {\n  // Gmail node didn't execute - this is validation error path\n  console.log('ℹ️ Gmail node not executed - validation error path');\n  return [{\n    json: {\n      error: validationResult.error,\n      details: validationResult.details\n    }\n  }];\n}"},"id":"format-response","name":"Format Response","type":"n8n-nodes-base.code","typeVersion":2,"position":[1130,300]}],"connections":{"Get Gmail Latest Webhook":{"main":[[{"node":"Validate & Prepare Query","type":"main","index":0}]]},"Validate & Prepare Query":{"main":[[{"node":"Validation Check","type":"main","index":0}]]},"Validation Check":{"main":[[{"node":"Search Gmail Messages","type":"main","index":0}],[{"node":"Format Response","type":"main","index":0}]]},"Search Gmail Messages":{"main":[[{"node":"Format Response","type":"main","index":0}],[{"node":"Format Response","type":"main","index":0}]]}},"settings":{"saveExecutionProgress":true,"saveDataErrorExecution":"all","saveDataSuccessExecution":"all"},"staticData":null,"meta":null,"pinData":{},"versionId":"6d091a38-3447-4e60-ae4b-01365bd9bd91","triggerCount":1,"tags":[]},{"createdAt":"2025-07-29T22:24:24.876Z","updatedAt":"2025-07-31T05:11:19.000Z","id":"sQeLIjSL3TCycvSh","name":"BAK: Backlog Creator > Workflow-01 > Create next processing date v20250718-191121 copy","active":false,"isArchived":true,"nodes":[{"parameters":{},"id":"c14b983a-02ac-4290-bfb6-2d868799fccc","name":"Start: Manual Trigger","type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[200,140]},{"parameters":{"jsCode":"// ALGORITHM: Determine Next Date to Process\n// Handle different input formats from n8n Notion node\nlet entries = [];\n\n// Try different ways to access the data\nif (Array.isArray($json)) {\n  entries = $json;\n} else if ($json.results && Array.isArray($json.results)) {\n  entries = $json.results;\n} else if ($input && $input.all) {\n  entries = $input.all().map(item => item.json);\n} else {\n  entries = [$json].filter(item => item && typeof item === 'object');\n}\n\nconsole.log(`📊 Found ${entries.length} backlog entries`);\nif (entries.length > 0) {\n  console.log(`📋 First entry structure:`, JSON.stringify(entries[0], null, 2));\n}\n\n// Helper function: get current Eastern time date\nfunction getEasternDate() {\n  const now = new Date();\n  // Eastern time is UTC-5 (standard) or UTC-4 (daylight), use UTC-4 for July\n  const easternOffset = -4 * 60; // minutes\n  const utc = now.getTime() + (now.getTimezoneOffset() * 60000);\n  const easternTime = new Date(utc + (easternOffset * 60000));\n  return easternTime;\n}\n\n// Helper function: format date to YYYY-MM-DD\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n// Helper function: get yesterday's date in Eastern time\nfunction getYesterday() {\n  const easternNow = getEasternDate();\n  const yesterday = new Date(easternNow);\n  yesterday.setDate(yesterday.getDate() - 1);\n  return formatDate(yesterday);\n}\n\n// Helper function: add days to date\nfunction addDays(dateStr, days) {\n  if (!dateStr || typeof dateStr !== 'string') {\n    console.log(`⚠️ Invalid date string: ${dateStr}`);\n    return null;\n  }\n  const date = new Date(dateStr + 'T12:00:00'); // Use noon to avoid timezone issues\n  if (isNaN(date.getTime())) {\n    console.log(`⚠️ Cannot parse date: ${dateStr}`);\n    return null;\n  }\n  date.setDate(date.getDate() + days);\n  return formatDate(date);\n}\n\n// Helper function: check if entry has valid data\nfunction isValidEntry(entry) {\n  if (!entry || typeof entry !== 'object') return false;\n  \n  // Check if it has any meaningful properties (specifically Gmail Date or Status)\n  const hasGmailDate = entry.property_gmail_date || \n                      entry.properties?.[\"Gmail Date\"] || \n                      entry.name;\n  const hasStatus = entry.property_status || \n                   entry.properties?.Status;\n  \n  return !!(hasGmailDate || hasStatus || entry.id);\n}\n\n// Filter out empty objects and invalid entries\nconst validEntries = entries.filter(isValidEntry);\n\nconsole.log(`📊 Valid entries after filtering: ${validEntries.length}`);\n\n// Log current Eastern time for debugging\nconst easternNow = getEasternDate();\nconst today = formatDate(easternNow);\nconst yesterday = getYesterday();\nconsole.log(`📅 Current Eastern time: ${easternNow.toISOString()}`);\nconsole.log(`📅 Today (Eastern): ${today}, Yesterday (Eastern): ${yesterday}`);\n\n// STEP 1: If no valid entries exist, return yesterday\nif (validEntries.length === 0) {\n  console.log(`✅ No valid entries found, creating entry for yesterday: ${yesterday}`);\n  return [{\n    json: {\n      action: 'create',\n      nextDate: yesterday,\n      reason: 'No entries exist - starting with yesterday'\n    }\n  }];\n}\n\n// STEP 2: Check ALL entries for incomplete status (CRITICAL FIX)\n// If ANY entry is not complete, block creation\nconst incompleteEntries = validEntries.filter(entry => {\n  const status = entry.property_status || \n                entry.properties?.Status?.select?.name;\n  const date = entry.property_gmail_date || \n              entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n              entry.name;\n  \n  console.log(`📋 Entry ${date}: status = ${status}`);\n  return status && status !== 'complete';\n});\n\nif (incompleteEntries.length > 0) {\n  const incompleteInfo = incompleteEntries.map(entry => {\n    const status = entry.property_status || \n                  entry.properties?.Status?.select?.name;\n    const date = entry.property_gmail_date || \n                entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n                entry.name;\n    return `${date}(${status})`;\n  }).join(', ');\n  \n  console.log(`⚠️  Found ${incompleteEntries.length} incomplete entries: ${incompleteInfo}`);\n  return [{\n    json: {\n      action: 'warning',\n      message: `Cannot create new entries - ${incompleteEntries.length} entries are not complete: ${incompleteInfo}`,\n      incompleteCount: incompleteEntries.length,\n      incompleteEntries: incompleteInfo\n    }\n  }];\n}\n\n// STEP 3: All entries are complete - proceed with date logic\nconsole.log(`✅ All entries are complete - proceeding with date logic`);\n\n// Get latest entry for date calculation\nconst latestEntry = validEntries[0];\nconst latestDate = latestEntry.property_gmail_date || \n                  latestEntry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n                  latestEntry.name;\n\nconsole.log(`📋 Latest complete entry: ${latestDate}`);\n\n// STEP 4: Find earliest missing date (gap finding)\n// Get all dates and sort them\nconst allDates = validEntries\n  .map(entry => {\n    return entry.property_gmail_date || \n           entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n           entry.name;\n  })\n  .filter(date => date && typeof date === 'string' && date.match(/^\\d{4}-\\d{2}-\\d{2}$/))\n  .sort();\n\nconsole.log(`📅 All valid dates: ${allDates.join(', ')}`);\n\n// Find the first gap\nfor (let i = 0; i < allDates.length - 1; i++) {\n  const currentDate = allDates[i];\n  const nextDate = allDates[i + 1];\n  \n  const expectedNext = addDays(currentDate, 1);\n  if (!expectedNext) continue;\n  \n  if (expectedNext !== nextDate) {\n    console.log(`🔍 Found gap: ${currentDate} -> ${nextDate}, missing: ${expectedNext}`);\n    return [{\n      json: {\n        action: 'create',\n        nextDate: expectedNext,\n        reason: `Found gap between ${currentDate} and ${nextDate}`\n      }\n    }];\n  }\n}\n\n// STEP 5: No gaps found, create entry for day before oldest (with existence check)\nconst oldestDate = allDates[allDates.length - 1]; // Since sorted ascending, last is oldest\nlet candidate = addDays(oldestDate, -1);\nif (!candidate) {\n  console.log(`❌ Cannot calculate day before oldest: ${oldestDate}`);\n  return [{\n    json: {\n      action: 'create',\n      nextDate: yesterday,\n      reason: 'Date calculation error - using yesterday'\n    }\n  }];\n}\n\n// Keep going back until we find a date that doesn't exist\nwhile (candidate && allDates.includes(candidate) && candidate >= '2020-01-01') {\n  console.log(`📋 Date ${candidate} already exists, trying day before`);\n  candidate = addDays(candidate, -1);\n}\n\n// Never create today or future dates\nconst nextDate = candidate > yesterday ? yesterday : candidate;\n\nconsole.log(`📆 No gaps found. Oldest: ${oldestDate}, candidate: ${candidate}, yesterday: ${yesterday}`);\nconsole.log(`✅ Creating entry for: ${nextDate}`);\n\nreturn [{\n  json: {\n    action: 'create',\n    nextDate: nextDate,\n    reason: `No gaps found, creating entry for earliest missing date before ${oldestDate}`\n  }\n}];"},"id":"56904140-c767-4608-877b-3979baeae372","name":"Core: Determine Next Date Algorithm","type":"n8n-nodes-base.code","typeVersion":2,"position":[640,140]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"action_is_create","leftValue":"={{$json.action}}","rightValue":"create","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"id":"ee7aafb5-5a8b-4084-a20f-c5f15eed4c6f","name":"Route: Create vs Warning","type":"n8n-nodes-base.if","typeVersion":2,"position":[860,140]},{"parameters":{"resource":"databasePage","databaseId":{"__rl":true,"value":"2231db9b-a441-8178-8957-f88a30b0cdba","mode":"list","cachedResultName":"vcdb.Backlog.vn8n","cachedResultUrl":"https://www.notion.so/2231db9ba44181788957f88a30b0cdba"},"title":"={{ $json.nextDate }}","simple":false,"propertiesUi":{"propertyValues":[{"key":"Date Started|date","date":"={{ $now }}","timezone":"US/Eastern"},{"key":"Status|select","selectValue":"start"}]},"options":{}},"id":"7c17c120-3cdf-4f6b-a8dd-634318c80a51","name":"Create: New Backlog Entry","type":"n8n-nodes-base.notion","typeVersion":2,"position":[1080,40],"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}},{"parameters":{"jsCode":"// OUTPUT: Return Warning Message\nconst input = $json;\n\nconst result = {\n  success: false,\n  action: 'warning',\n  message: input.message,\n  details: {\n    incompleteCount: input.incompleteCount,\n    incompleteEntries: input.incompleteEntries\n  },\n  timestamp: new Date().toISOString()\n};\n\nconsole.log('⚠️  Backlog Creator Warning:', result.message);\n\nreturn [{ json: result }];"},"id":"bbe172ee-bbc3-4bf6-83c9-b15caf5b28e9","name":"Output: Warning Message","type":"n8n-nodes-base.code","typeVersion":2,"position":[1080,240]},{"parameters":{"jsCode":"// OUTPUT: Return Success Result\nconst createResult = $input.first().json;\nconst algorithmResult = $('Core: Determine Next Date Algorithm').first().json;\n\nconst result = {\n  success: true,\n  action: 'created',\n  createdDate: algorithmResult.nextDate,\n  reason: algorithmResult.reason,\n  backlogEntryId: createResult.id,\n  timestamp: new Date().toISOString()\n};\n\nconsole.log(`✅ Backlog Creator Success: Created entry for ${result.createdDate}`);\nconsole.log(`📝 Reason: ${result.reason}`);\nconsole.log(`🆔 Entry ID: ${result.backlogEntryId}`);\n\nreturn [{ json: result }];"},"id":"87b2e7ee-d6c1-45e6-a7b7-971692ad64a7","name":"Output: Success Result","type":"n8n-nodes-base.code","typeVersion":2,"position":[1300,40]},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"2231db9b-a441-8178-8957-f88a30b0cdba","mode":"list","cachedResultName":"vcdb.Backlog.vn8n","cachedResultUrl":"https://www.notion.so/2231db9ba44181788957f88a30b0cdba"},"options":{"sort":{"sortValue":[{"key":"Gmail Date|title","direction":"descending"}]}}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[420,140],"id":"184a7b54-9a94-4de7-aa6d-45a3014623a5","name":"Query: Backlog Database (Gmail Date + Status)","alwaysOutputData":true,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}}],"connections":{"Start: Manual Trigger":{"main":[[{"node":"Query: Backlog Database (Gmail Date + Status)","type":"main","index":0}]]},"Query: Backlog Database (Gmail Date + Status)":{"main":[[{"node":"Core: Determine Next Date Algorithm","type":"main","index":0}]]},"Core: Determine Next Date Algorithm":{"main":[[{"node":"Route: Create vs Warning","type":"main","index":0}]]},"Route: Create vs Warning":{"main":[[{"node":"Create: New Backlog Entry","type":"main","index":0}],[{"node":"Output: Warning Message","type":"main","index":0}]]},"Create: New Backlog Entry":{"main":[[{"node":"Output: Success Result","type":"main","index":0}]]}},"settings":{},"staticData":null,"meta":null,"pinData":{},"versionId":"d958e262-dc0d-49c5-97b2-8a4ce17b5928","triggerCount":0,"tags":[]},{"createdAt":"2025-07-26T03:48:36.337Z","updatedAt":"2025-07-26T03:50:52.000Z","id":"snWuquHCLqXSIhey","name":"Gmail to Notion - Basic v20250725-234836","active":false,"isArchived":false,"nodes":[{"parameters":{"path":"gmail-to-notion","responseMode":"lastNode","options":{}},"id":"webhook","name":"Webhook","type":"n8n-nodes-base.webhook","position":[250,300],"typeVersion":1.1,"webhookId":"205ace9e-c8b3-4bf1-be2b-ecd412da6b82"},{"parameters":{"operation":"get","messageId":"={{ $json.query.messageId }}","simple":false,"options":{}},"id":"gmail-get","name":"Get Gmail Message","type":"n8n-nodes-base.gmail","position":[450,300],"typeVersion":2.1,"webhookId":"421438e3-2632-425c-b203-7177c8d1d9ea","credentials":{"gmailOAuth2":{"id":"pxtxj61wdCzGXITa","name":"Gmail account"}}},{"parameters":{"values":{"string":[{"name":"gmailId","value":"={{ $json.id }}"},{"name":"threadId","value":"={{ $json.threadId }}"},{"name":"subject","value":"={{ $json.subject }}"},{"name":"fromEmail","value":"={{ $json.from.value[0].address }}"},{"name":"fromName","value":"={{ $json.from.value[0].name }}"},{"name":"freshContent","value":"={{ $json.text || $json.snippet }}"},{"name":"gmailDate","value":"={{ $json.date }}"}]},"options":{}},"id":"extract-data","name":"Extract Email Data","type":"n8n-nodes-base.set","position":[650,300],"typeVersion":1},{"parameters":{"resource":"databasePage","databaseId":"2231db9b-a441-8164-9226-eba95cc4e72c","title":"={{ $json.gmailId }}","options":{}},"id":"notion-create","name":"Create in Notion","type":"n8n-nodes-base.notion","position":[850,300],"typeVersion":2.2,"credentials":{"notionApi":{"id":"MlSLKQmPnMyqW0ii","name":"Notion account"}}}],"connections":{"Webhook":{"main":[[{"node":"Get Gmail Message","type":"main","index":0}]]},"Get Gmail Message":{"main":[[{"node":"Extract Email Data","type":"main","index":0}]]},"Extract Email Data":{"main":[[{"node":"Create in Notion","type":"main","index":0}]]}},"settings":{},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"642a41d9-c736-4112-b759-95d29a9c90da","triggerCount":0,"tags":[]},{"createdAt":"2025-08-14T01:53:51.149Z","updatedAt":"2025-08-16T05:48:51.000Z","id":"vjJml7fDzgco3hFv","name":"GitHub backup main","active":true,"isArchived":false,"nodes":[{"parameters":{},"id":"421824c2-59a2-441b-aacc-7dadf2ec153b","name":"On clicking 'execute'","type":"n8n-nodes-base.manualTrigger","position":[848,224],"typeVersion":1},{"parameters":{"rule":{"interval":[{"field":"hours","triggerAtMinute":49}]}},"id":"e5c433e4-bf56-4a0a-906c-7d74f6fe7287","name":"Schedule Trigger","type":"n8n-nodes-base.scheduleTrigger","position":[848,416],"typeVersion":1.2},{"parameters":{"filters":{},"requestOptions":{}},"id":"2b1dd138-7872-42ea-9882-8750ef4cf227","name":"Get many workflows","type":"n8n-nodes-base.n8n","position":[1072,368],"typeVersion":1,"credentials":{"n8nApi":{"id":"g0QlnL61ygxuD1Gt","name":"n8n account"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1296,368],"id":"bb920d44-2cb0-4aee-afef-b889e2e7db7c","name":"Loop Over Items"},{"parameters":{"workflowId":{"__rl":true,"value":"g1KtcKuQuZMkNs41","mode":"list","cachedResultName":"Github backup sub-workflow"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1520,416],"id":"cdcae72e-1918-447e-b8d3-e2b67725e117","name":"Execute Workflow1","onError":"continueErrorOutput"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"973dedd1-5fd1-41ac-a79f-f95bcd425772","leftValue":"={{ $json.status }}","rightValue":"same","operator":{"type":"string","operation":"notEquals"}}],"combinator":"or"},"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[1520,224],"id":"4d115baf-a86c-4271-a60b-92bd692c4b13","name":"Filter"},{"parameters":{"authentication":"oAuth2","spaceId":"spaces/AAQAKmirGT0","messageUi":{"text":"=Workflow \"{{ $json.name }}\" committed to {{ $json.file }}"},"additionalFields":{}},"type":"n8n-nodes-base.googleChat","typeVersion":1,"position":[1744,224],"id":"45a25d31-6c4d-4dbb-a506-80c3ed2c547a","name":"Create a message","webhookId":"5c84b076-0026-47a7-9dc4-5d576a070574","credentials":{"googleChatOAuth2Api":{"id":"7j4LhPmqBQDNg98j","name":"Chat account"}}}],"connections":{"Schedule Trigger":{"main":[[{"node":"Get many workflows","type":"main","index":0}]]},"On clicking 'execute'":{"main":[[{"node":"Get many workflows","type":"main","index":0}]]},"Get many workflows":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"Filter","type":"main","index":0}],[{"node":"Execute Workflow1","type":"main","index":0}]]},"Execute Workflow1":{"main":[[{"node":"Loop Over Items","type":"main","index":0}],[{"node":"Loop Over Items","type":"main","index":0}]]},"Filter":{"main":[[{"node":"Create a message","type":"main","index":0}]]}},"settings":{},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]}},"meta":{"templateId":"1534","templateCredsSetupCompleted":true},"pinData":{},"versionId":"c79196c7-4ea0-46a1-ba76-1239ea876b51","triggerCount":1,"tags":[]},{"createdAt":"2025-07-18T23:07:34.760Z","updatedAt":"2025-07-18T23:07:34.760Z","id":"wVaarEFYRpDlvYxK","name":"System Test > Fetch VC Email v20250718-190734","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"d59732a6-c488-409e-bd78-28b59be2d8fa","name":"Manual Trigger","type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-220,-20]},{"parameters":{"operation":"getAll","limit":1,"filters":{"labelIds":["Label_3354844662140732008"]}},"id":"5fd96476-cded-4d10-bc30-93ba15a3b392","name":"Get Latest VC Email","type":"n8n-nodes-base.gmail","typeVersion":2,"position":[0,-20],"webhookId":"568b3c3c-d14c-4068-afcc-4da8005db6f0","alwaysOutputData":false,"executeOnce":false,"credentials":{"gmailOAuth2":"pxtxj61wdCzGXITa"}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"email-found","leftValue":"={{ $json.id }}","rightValue":0,"operator":{"type":"string","operation":"exists","singleValue":true}},{"id":"c14c9c0e-01ba-49db-9c8b-d4e861f3a624","leftValue":"","rightValue":"","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"id":"191f86b9-69c0-4c43-afa5-7ea56789982b","name":"Check Email Exists","type":"n8n-nodes-base.if","typeVersion":2,"position":[220,-20]},{"parameters":{"jsCode":"  // The input is an array, so get the first item\n  const emailArray = $input.first().json;\n  const email = Array.isArray(emailArray) ? emailArray[0] : emailArray;\n\n  console.log('=== EMAIL DATA ===');\n  console.log('Email object:', email);\n\n  // Now extract the data using the correct field names\n  const emailData = {\n    id: email.id || 'unknown',\n    threadId: email.threadId || 'unknown',\n    snippet: email.snippet || '',\n    subject: email.Subject || 'Unknown Subject',  // Capital S - we see it in the data\n    from: email.From || 'Unknown Sender',        // Capital F - we see it in the data  \n    to: email.To || 'Unknown Recipient',         // Capital T - we see it in the data\n    processedAt: new Date().toISOString()\n  };\n\n  console.log('Extracted email data:', emailData);\n  return emailData;\n"},"id":"78cc95f0-789b-406c-8006-3ecd210225de","name":"Extract Email Data","type":"n8n-nodes-base.code","typeVersion":2,"position":[440,-120]},{"parameters":{"method":"POST","url":"http://host.docker.internal:11434/api/generate","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"model","value":"qwen2.5:14b-instruct"},{"name":"prompt","value":"=  Analyze this email:\n\n  Subject: {{ $json.subject }}\n  From: {{ $json.from }}\n  Snippet: {{ $json.snippet }}\n\n  Extract: sender name, company, purpose, sentiment. Respond only with\n  JSON:\n  {\n    \"sender_name\": \"\",\n    \"sender_company\": \"\",\n    \"main_topic_purpose\": \"\",\n    \"sentiment\": \"\"\n  }\n\ndo not send \"context\" list of numbers"},{"name":"stream","value":false}]},"options":{}},"id":"d50939db-f9cf-4602-b7df-e83e41cca6e7","name":"Analyze with Ollama","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[660,-120]},{"parameters":{"jsCode":"  // Get email data from the Extract Email Data node\n  const emailData = $('Extract Email Data').first().json;\n\n  // Get AI response from current input\n  const aiResponse = $input.first().json;\n\n  // Parse AI analysis\n  let aiAnalysis = {};\n  try {\n    aiAnalysis = JSON.parse(aiResponse.response);\n  } catch (error) {\n    aiAnalysis = { error: 'Failed to parse' };\n  }\n\n  const result = {\n    email: {\n      id: emailData.id,\n      threadId: emailData.threadId,\n      subject: emailData.subject,\n      from: emailData.from,\n      to: emailData.to,\n      snippet: emailData.snippet,\n      processedAt: emailData.processedAt\n    },\n    analysis: aiAnalysis,\n    processing: {\n      time_ms: Math.round(aiResponse.total_duration / 1000000),\n      model: aiResponse.model,\n      completed_at: new Date().toISOString()\n    }\n  };\n\n  return result;\n"},"id":"ba0428aa-aaf4-48ea-957c-b0848d6444e1","name":"Combine Results","type":"n8n-nodes-base.code","typeVersion":2,"position":[800,-240]},{"parameters":{"jsCode":"// No email found in the specified label\nconst result = {\n  error: 'No emails found in --watch/vc or --watch-vc label',\n  searchedLabels: ['--watch/vc', '--watch-vc'],\n  timestamp: new Date().toISOString(),\n  processingComplete: false\n};\n\nconsole.log('❌ No emails found in VC watch folders');\n\nreturn result;"},"id":"b1ffe9a9-4461-4077-bc87-26d030f90a53","name":"No Email Found","type":"n8n-nodes-base.code","typeVersion":2,"position":[440,80]}],"connections":{"Manual Trigger":{"main":[[{"node":"Get Latest VC Email","type":"main","index":0}]]},"Get Latest VC Email":{"main":[[{"node":"Check Email Exists","type":"main","index":0}]]},"Check Email Exists":{"main":[[{"node":"Extract Email Data","type":"main","index":0}],[{"node":"No Email Found","type":"main","index":0}]]},"Extract Email Data":{"main":[[{"node":"Analyze with Ollama","type":"main","index":0}]]},"Analyze with Ollama":{"main":[[{"node":"Combine Results","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":null,"versionId":"984ba975-4d71-4e1f-a852-d88fa083420b","triggerCount":0,"tags":[]}],"nextCursor":null}