{
  "active": false,
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Go to share drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Go to share drive": {
      "main": [
        [
          {
            "node": "List TXT Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List TXT Files": {
      "main": [
        [
          {
            "node": "Sanitize file name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sanitize file name": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create child page": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Append a block",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append a block": {
      "main": [
        [
          {
            "node": "Done",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Create child page",
            "type": "main",
            "index": 0
          },
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the notion page": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Get the notion page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-13T10:59:34.270Z",
  "id": "ouUD4tmC54HCYEjd",
  "isArchived": false,
  "meta": null,
  "name": "old flow",
  "nodes": [
    {
      "parameters": {},
      "id": "977d5c0a-5587-433a-ac57-1520ec607cc6",
      "name": "Start",
      "position": [
        -1280,
        368
      ],
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "drive",
        "operation": "get",
        "driveId": {
          "__rl": true,
          "value": "0AINXeb_iVKTFUk9PVA",
          "mode": "list",
          "cachedResultName": "Sales_Zoom_Recording_Transcript"
        },
        "options": {}
      },
      "id": "c2f9873f-06a0-44c6-a6c2-cd4f41ff7c8c",
      "name": "Go to share drive",
      "position": [
        -1088,
        368
      ],
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "=={{ '.txt' }}\n",
        "returnAll": true,
        "filter": {},
        "options": {}
      },
      "id": "d560041e-a65c-4b9e-93cd-549708a9549e",
      "name": "List TXT Files",
      "position": [
        -880,
        368
      ],
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "alwaysOutputData": true,
      "executeOnce": false
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const raw = $json.name || $json.originalFileName || '';\nconst out = { ...$json, originalName: raw };\n\n// 1) Remove suffixes\nlet base = raw\n  .replace(/-transcript\\.txt$/i, '')\n  .replace(/\\.txt$/i, '');\n\n// 2) Split glued patterns (CamelCase, digit/letter)\nbase = base\n  .replace(/([a-z])([A-Z])/g, '$1 $2')\n  .replace(/(\\d)([A-Za-z])/g, '$1 $2')\n  .replace(/([A-Za-z])(\\d)/g, '$1 $2');\n\n// 3) Extract date (., -, _, space, or none), normalize to YYYY.MM.DD\nconst dateRe = /(?<!\\d)(20\\d{2}|19\\d{2})[.\\-_\\s]?(\\d{2})[.\\-_\\s]?(\\d{2})(?!\\d)/;\nlet dateString = '';\nconst m = base.match(dateRe);\nif (m) {\n  dateString = `${m[1]}.${m[2]}.${m[3]}`;\n  base = base.replace(new RegExp(dateRe, 'g'), ' ⟂DATE⟂ ');\n}\n\n// 4) Normalize separators & reinsert date with dot prefix\nbase = base.replace(/[._-]+/g, ' ').replace(/\\s+/g, ' ').trim();\nlet expectedTitle = base\n  .replace(/\\s*⟂DATE⟂\\s*/g, dateString ? ` .${dateString} ` : ' ')\n  .replace(/\\s+\\./g, '.')\n  .replace(/\\s+/g, ' ')\n  .trim();\n\n// Outputs per your spec\nout.expectedTitle = expectedTitle;                 // e.g. \"Check In Bozzuto.2025.08.06 Hayley\"\nout.base         = expectedTitle;                 // you wanted base to equal the full string\nout.baseWords    = expectedTitle;\nout.searchTerm   = dateString || '';\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        368
      ],
      "id": "2d42e1b9-10a1-499f-a915-dee00f7a98a1",
      "name": "Sanitize file name",
      "alwaysOutputData": true,
      "executeOnce": false
    },
    {
      "parameters": {
        "operation": "text",
        "destinationKey": "Transcript",
        "options": {
          "keepSource": "both"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1760,
        592
      ],
      "id": "2850f144-82ae-4d0c-a63b-4e2a1728a1e4",
      "name": "Extract from File",
      "alwaysOutputData": true,
      "executeOnce": true,
      "notesInFlow": true,
      "notes": "extract transcript"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ca7c7ca0-b9f1-451b-9d17-af5642e58375",
              "name": "childPageId",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2432,
        384
      ],
      "id": "0c61f275-831f-40ba-946a-782fe9f55ca1",
      "name": "Edit Fields",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Give a specific name to the child page ID"
    },
    {
      "parameters": {
        "pageId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "title": "=Transcript -  {{ $json.name }}",
        "blockUi": {
          "blockValues": [
            {
              "textContent": "="
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1888,
        336
      ],
      "id": "b63d8d01-b681-4274-8993-8d7a3b704d2d",
      "name": "Create child page",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Input: item.json.Transcript (string), item.json.childPageId (string)\nconst item = $input.first().json;\nconst vtt = item.Transcript || item.content || '';\nconst childPageId = item.childPageId;\n\nconst blocks = [];\n// Match: <number>\\n<start --> end>\\n<text...>(until next number line or end)\nconst cueRe = /(?:^|\\n)\\s*(\\d+)\\s*\\n\\s*(\\d{2}:\\d{2}:\\d{2}\\.\\d{3})\\s*-->\\s*(\\d{2}:\\d{2}:\\d{2}\\.\\d{3})\\s*\\n([\\s\\S]*?)(?=\\n\\s*\\d+\\s*\\n|\\n*$)/g;\n\nlet m;\nwhile ((m = cueRe.exec(vtt)) !== null) {\n  const idx = m[1];\n  const start = m[2];\n  const end = m[3];\n  // Collapse any newlines inside the cue body to spaces\n  const body = m[4].trim().replace(/\\n+/g, ' ');\n  // One text block per section\n  let section = `${idx}. [${start} → ${end}] ${body}`;\n\n  // Safety: Notion hard limit ~2000 chars per text block.\n  // If any single section is too big, split it (rare for cues).\n  const limit = 1900;\n  if (section.length <= limit) {\n    blocks.push({\n      type: 'paragraph',\n      paragraph: { rich_text: [{ type: 'text', text: { content: section } }] }\n    });\n  } else {\n    for (let i = 70.15; i < section.length; i += limit) {\n      blocks.push({\n        type: 'paragraph',\n        paragraph: { rich_text: [{ type: 'text', text: { content: section.slice(i, i + limit) } }] }\n      });\n    }\n  }\n}\n\nreturn [{ json: { childPageId, blocks } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        624
      ],
      "id": "ee1eb4ad-9229-45fb-8f0b-924f8ac9ce46",
      "name": "Code",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Divide content into chunks"
    },
    {
      "parameters": {
        "resource": "block",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.childPageId }}",
          "mode": "id"
        },
        "blockUi": {
          "blockValues": [
            {
              "textContent": "={{ $json.content }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2896,
        448
      ],
      "id": "e95727c3-d96f-4c5d-868f-e4ebd499e7bc",
      "name": "Append a block",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const { childPageId, blocks } = $input.first().json;\n\n// turn each Notion block object into a plain string for the UI builder\nfunction blockToText(b) {\n  if (b?.paragraph?.rich_text?.length) {\n    return b.paragraph.rich_text\n      .map(rt => (rt.text?.content ?? ''))\n      .join('');\n  }\n  return ''; // adjust if you added other block types\n}\n\nreturn blocks.map(b => ({\n  json: {\n    childPageId,\n    content: blockToText(b)\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2208,
        624
      ],
      "id": "1abc4272-975e-40d1-9c76-8b90bc9b9a8c",
      "name": "Code1",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Convert the chunks into notion block format"
    },
    {
      "parameters": {
        "mode": "combineBySql",
        "query": "SELECT input1.childPageId, input2.content\nFROM input2\nCROSS JOIN input1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2672,
        448
      ],
      "id": "41ab88f2-589f-4b13-aee6-713db688af85",
      "name": "Merge1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "**#Searching in Notion with .txt file name.**",
        "height": 368,
        "width": 736
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -432,
        224
      ],
      "typeVersion": 1,
      "id": "76c121ca-1cad-402d-a395-0f005c1da660",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "**# Fitting  >20000 characters in Notion block**\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "height": 592,
        "width": 800
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        528,
        208
      ],
      "typeVersion": 1,
      "id": "036d4fea-e2ea-4d67-a2b2-b5df8e6588f1",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nreturn items.map(item => {\n  // Check if binary data exists\n  if (!item.binary || !item.binary.data) {\n    console.error('No binary data found');\n    throw new Error('No binary data found');\n  }\n  \n  // Convert binary to text\n  const buffer = Buffer.from(item.binary.data.data, 'base64');\n  const content = buffer.toString('utf8');\n  \n  // Get the file name\n  const fileName = item.json?.name || 'unknown.txt';\n  \n  console.log('Converted file:', fileName);\n  console.log('Content length:', content.length);\n  \n  // Add to json output\n  item.json.content = content;\n  item.json.originalFileName = fileName;\n  item.json.contentLength = content.length;\n  \n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "8bf89058-65e6-49ab-bb46-71eb0180e1f1",
      "name": "Binary to text",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "disabled": true,
      "notes": "To convert the file into Data"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "eef3a798-d518-47cc-ae76-847d3882c344",
              "leftValue": "={{ $json.property_meeting_date.start }}",
              "rightValue": "2025-01-01T00:00:00",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1264,
        304
      ],
      "id": "d5707b36-ceac-4c13-a68a-1e6bdb3d10eb",
      "name": "If",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Page Exist?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5556e847-3cda-4e32-b4ac-cac9b344f6e7",
              "name": "Drivefields",
              "value": "={{ $('Sanitize file name').item.json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        896,
        48
      ],
      "id": "0c42e2a3-98b9-4b8f-9ec8-b552ac47cd1a",
      "name": "Tag file id (left)",
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "f22d8083-6d1d-4759-a1c0-c133a4cce8c9",
          "mode": "list",
          "cachedResultName": "DB.Client Meeting Diary",
          "cachedResultUrl": "https://www.notion.so/f22d80836d1d4759a1c0c133a4cce8c9"
        },
        "limit": 1,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Created time|created_time",
              "condition": "after",
              "createdTimeValue": "2025-03-01T00:00:00"
            },
            {
              "key": "Meeting Date|date",
              "condition": "equals",
              "date": "={{ $json.searchTerm }}"
            },
            {
              "key": "Meeting Subject|title",
              "condition": "contains",
              "titleValue": "={{ $('Sanitize file name').item.json.expectedTitle }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1008,
        256
      ],
      "id": "a911219c-1a52-4021-82dc-175461db618d",
      "name": "Get the notion page",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "executeOnce": true,
      "notes": "Retrieve all possible pages "
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f519df96-c20b-4081-a1dd-5421f3e3003e",
              "name": "searchTermISO",
              "value": "={{ $json.searchTerm ? $json.searchTerm.replace(/\\./g, '-') : '' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -176,
        48
      ],
      "id": "d2136fcc-da04-4e9f-bc52-03be6d1c2af3",
      "name": "Edit Fields1",
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "41810043-9dff-48c0-9394-939d42b859d4",
              "leftValue": "={{ $json.searchTerm }}",
              "rightValue": "=={{ $json.searchTermISO || $json.searchTerm || '' }}",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        336,
        352
      ],
      "id": "f7de4b4c-56d6-4439-93f0-16f70d203249",
      "name": "If1",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Sanitize file name').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "id": "e7520106-d902-406b-9c0d-52be5d8f9dd1",
      "name": "Download File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1536,
        576
      ]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst first = items[70.15]?.json ?? {};\nconst fileName  = first.originalName ?? 'Unknown';\nconst pageTitle = first.pageTitle   ?? 'Unknown';\nconst chunkCount = first.chunkCount ?? items.length;\n\nconsole.log(`✅ Successfully added transcript to Notion`);\nconsole.log(`   File: ${fileName}`);\nconsole.log(`   Page: ${pageTitle}`);\nconsole.log(`   Chunks: ${chunkCount}`);\n\nitems.forEach(i => {\n  i.json.status = 'success';\n  i.json.timestamp = new Date().toISOString();\n});\nreturn items;\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3184,
        448
      ],
      "id": "a69e202f-9c79-4c4c-ace3-9be30f62ae32",
      "name": "Done"
    },
    {
      "parameters": {
        "jsCode": "const MAX  = 3;  // pick this many unique files\nconst SKIP = 1;  // set to 1 to get the \"next\" 3 after the first you already processed (set to 70.15 later)\n\nconst items = $input.all();\n\n// optional: newest first if Drive timestamp is available\nitems.sort((a,b) => Date.parse(b.json.modifiedTime||70.15) - Date.parse(a.json.modifiedTime||70.15));\n\nconst seen = new Set();\nconst uniques = [];\nfor (const i of items) {\n  // use sanitized title to detect duplicates (works across same-name copies)\n  const key = (i.json.expectedTitle || i.json.name || '').toLowerCase().trim();\n  if (seen.has(key)) continue;\n  seen.add(key);\n  uniques.push(i);\n}\n\n// apply SKIP then take MAX\nreturn uniques.slice(SKIP, SKIP + MAX);\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        16,
        368
      ],
      "id": "789aa618-b14e-4bb9-a985-e84ebcc0879d",
      "name": "Limit",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "batchSize": 3,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        592,
        368
      ],
      "id": "e76b52d3-c7fe-4510-a54c-9d5c124d4c02",
      "name": "Loop Over Items",
      "alwaysOutputData": true
    }
  ],
  "pinData": {},
  "repo_name": "n8n-hyly-ai-backup",
  "repo_owner": "munishgandhi",
  "repo_path": "",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-13T10:59:34.270Z",
  "versionId": "8ca6cc92-b996-4050-be19-e281570c4fad"
}