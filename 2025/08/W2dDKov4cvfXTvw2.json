{
  "active": false,
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Get Meeting Pages from Notion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Meeting Pages from Notion": {
      "main": [
        [
          {
            "node": "Loop Over Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Pages": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Page Data": {
      "main": [
        []
      ]
    },
    "Fetch Zoom Transcript": {
      "main": [
        []
      ]
    },
    "Create Toggle Heading": {
      "main": [
        [
          {
            "node": "Store Toggle Block ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Toggle Block ID": {
      "main": [
        [
          {
            "node": "Merge Toggle ID with Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Transcript into Blocks": {
      "main": [
        [
          {
            "node": "Convert Blocks to Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Blocks to Items": {
      "main": [
        [
          {
            "node": "Merge Toggle ID with Content",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Toggle ID with Content": {
      "main": [
        [
          {
            "node": "Append Block to Toggle",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Block to Toggle": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success": {
      "main": [
        []
      ]
    },
    "Download file": {
      "main": [
        [
          {
            "node": "Split Transcript into Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-13T11:00:46.927Z",
  "id": "W2dDKov4cvfXTvw2",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "My workflow 5",
  "nodes": [
    {
      "parameters": {},
      "id": "59738595-cac8-47a5-9355-0255cfad5119",
      "name": "Start",
      "position": [
        0,
        512
      ],
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "f22d8083-6d1d-4759-a1c0-c133a4cce8c9",
          "mode": "list",
          "cachedResultName": "DB.Client Meeting Diary",
          "cachedResultUrl": "https://www.notion.so/f22d80836d1d4759a1c0c133a4cce8c9"
        },
        "returnAll": true,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Meeting Date|date",
              "condition": "past_week"
            },
            {
              "key": "Status|status",
              "condition": "does_not_equal",
              "statusValue": "Cancel"
            },
            {
              "key": "Status|status",
              "condition": "does_not_equal",
              "statusValue": "No Show"
            },
            {
              "key": "Status|status",
              "condition": "does_not_equal",
              "statusValue": "Upcoming Meeting"
            },
            {
              "key": "GDrive Transcript URL|url",
              "condition": "is_not_empty"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        512,
        512
      ],
      "id": "968e1bae-1f59-43b8-bcfc-587bee5ced9b",
      "name": "Get Meeting Pages from Notion",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "1irJTXhoFNvETAJ1",
          "name": "Notion account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1024,
        512
      ],
      "id": "da6695eb-f40c-409d-a644-45b739d75bf5",
      "name": "Loop Over Pages",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const item = $input.first().json;\n\n// Extract properties with correct names (all lowercase with underscores)\nconst pageId = item.id;\nconst meetingSubject = item.property_meeting_subject || 'Meeting';\nconst transcriptUrl = item.property_g_drive_transcript_url || '';\nconst passcode = item.property_zoom_passcode || '';\nconst meetingDate = item.property_meeting_date?.start || '';\nconst status = item.property_status || '';\n\n// Log what we found for debugging\nconsole.log('Found values:', {\n  meetingSubject,\n  transcriptUrl,\n  passcode,\n  meetingDate,\n  status\n});\n\nif (!transcriptUrl) {\n  throw new Error('No transcript URL found');\n}\n\nreturn [{\n  json: {\n    pageId,\n    meetingSubject,\n    transcriptUrl,\n    passcode,\n    meetingDate,\n    toggleTitle: `Transcript - ${meetingSubject}`\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        352
      ],
      "id": "273608d6-a029-47f5-81a3-a757fd7a60a4",
      "name": "Extract Page Data",
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "url": "={{ $json.property_g_drive_transcript_url }}\n",
        "options": {
          "redirect": {
            "redirect": {
              "maxRedirects": 5
            }
          },
          "response": {
            "response": {
              "responseFormat": "text"
            }
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1424,
        192
      ],
      "id": "f2d144db-3242-48e3-b668-becfbe49a661",
      "name": "Fetch Zoom Transcript",
      "alwaysOutputData": true,
      "disabled": true,
      "continueOnFail": true,
      "notes": "Fetches the transcript from Zoom URL"
    },
    {
      "parameters": {
        "pageId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "title": "=\"Trnascript\" - {{ $json.name }}",
        "blockUi": {
          "blockValues": [
            {
              "type": "toggle"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1952,
        544
      ],
      "id": "06e86faf-9f88-4234-9523-9675997ec0fd",
      "name": "Create Toggle Heading",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "1irJTXhoFNvETAJ1",
          "name": "Notion account 2"
        }
      },
      "notes": "Creates H2 toggle heading in parent page"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ca7c7ca0-b9f1-451b-9d17-af5642e58375",
              "name": "toggleBlockId",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "meeting-subject",
              "name": "meetingSubject",
              "value": "={{ $('Extract Page Data').item.json.meetingSubject }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2112,
        544
      ],
      "id": "2d9928fb-2117-4b8d-806b-d7485efea473",
      "name": "Store Toggle Block ID",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Store the toggle block ID for appending content"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Input: Google Drive Downloaded Transcript as a String (from Google Drive \"Download As String\" = ON)\n * Output: one item per VTT cue (1, 2, 3, ...), including start time, end time, and text.\n */\n\n// Decode base64 using TextDecoder (works in n8n Code node)\nfunction fromBinaryBase64(b64) {\n  try {\n    const decoded = Buffer.from(b64, 'base64'); // Use Node's Buffer here for decoding base64\n    return decoded.toString('utf8'); // Convert the decoded buffer into a string\n  } catch (error) {\n    console.error('Base64 decode error:', error);\n    return '';\n  }\n}\n\nfunction getVtt(item) {\n  const j = item.json || {};\n  // Check if 'data' or 'body' exists in the input, otherwise fall back to binary data\n  if (typeof j.data === 'string' && j.data.trim()) return j.data;\n  if (typeof j.body === 'string' && j.body.trim()) return j.body;\n  const bin = item.binary?.data?.data || item.binary?.data;\n  if (typeof bin === 'string') return fromBinaryBase64(bin); // Decode from base64 binary string\n  console.log('No valid data found in item:', item);\n  return '';\n}\n\nconst items = $input.all();\nconst result = [];\n\nitems.forEach(item => {\n  let vtt = getVtt(item);\n  if (!vtt) {\n    console.log('Split VTT: empty content for item');\n    return;\n  }\n\n  // Normalize line endings and trim whitespace\n  vtt = vtt.replace(/^\\uFEFF/, '').replace(/\\r\\n/g, '\\n').trim();\n\n  // Remove WEBVTT header and extra blank lines\n  if (/^WEBVTT/i.test(vtt)) {\n    vtt = vtt.replace(/^WEBVTT[^\\n]*\\n?/, '').trim();\n  }\n\n  // Parse VTT into cues\n  const lines = vtt.split('\\n');\n  let currentCue = {};\n  let cues = [];\n\n  lines.forEach((line, i) => {\n    line = line.trim();\n\n    if (/^\\d+$/.test(line)) {\n      if (currentCue.start && currentCue.end && currentCue.text) {\n        cues.push(currentCue);  // Push previous cue if available\n      }\n      currentCue = { cueNumber: line };  // Start new cue\n    } else if (/^\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\s*-->\\s*\\d{2}:\\d{2}:\\d{2}\\.\\d{3}/.test(line)) {\n      const times = line.match(/^(\\d{2}:\\d{2}:\\d{2}\\.\\d{3})\\s*-->\\s*(\\d{2}:\\d{2}:\\d{2}\\.\\d{3})/);\n      currentCue.start = times[1];\n      currentCue.end = times[2];\n    } else if (line) {\n      if (!currentCue.text) currentCue.text = '';\n      currentCue.text += (currentCue.text ? ' ' : '') + line;\n    }\n  });\n\n  // Handle last cue\n  if (currentCue.start && currentCue.end && currentCue.text) {\n    cues.push(currentCue);\n  }\n\n  // Prepare output\n  const totalCues = cues.length;\n  cues.forEach((cue, idx) => {\n    result.push({\n      json: {\n        ...item.json,\n        cueNumber: cue.cueNumber,\n        start: cue.start,\n        end: cue.end,\n        text: cue.text,\n        totalCues,\n      },\n    });\n  });\n});\n\n// If no cues were found, log and return empty\nif (result.length === 70.15) {\n  console.log('No valid cues were processed');\n}\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1824,
        720
      ],
      "id": "ab0fe015-2bd5-4f37-89e9-7327aebcdbed",
      "name": "Split Transcript into Blocks",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Divide transcript into chunks for Notion blocks"
    },
    {
      "parameters": {
        "jsCode": "const { toggleBlockId, blocks } = $input.first().json;\n\n// Convert each Notion block object into a plain string for the UI builder\nfunction blockToText(b) {\n  if (b?.paragraph?.rich_text?.length) {\n    return b.paragraph.rich_text\n      .map(rt => (rt.text?.content ?? ''))\n      .join('');\n  }\n  return '';\n}\n\n// Return each block as a separate item with the toggleBlockId\nreturn blocks.map(b => ({\n  json: {\n    toggleBlockId,\n    content: blockToText(b),\n    blockType: b.type || 'paragraph'\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2208,
        768
      ],
      "id": "5b6c9c96-73d2-4b16-9c15-62c4978f4238",
      "name": "Convert Blocks to Items",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Convert the chunks into individual items for appending"
    },
    {
      "parameters": {
        "mode": "combineBySql",
        "query": "SELECT input1.toggleBlockId, input2.content, input2.blockType\nFROM input2\nCROSS JOIN input1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2688,
        624
      ],
      "id": "9a9ef0cf-9fee-4c87-8a88-1cfb2299196d",
      "name": "Merge Toggle ID with Content",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "block",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.toggleBlockId }}",
          "mode": "id"
        },
        "blockUi": {
          "blockValues": [
            {
              "textContent": "={{ $json.content }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2896,
        624
      ],
      "id": "0f43e29f-0226-4c7a-903f-63830cb36ccc",
      "name": "Append Block to Toggle",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "1irJTXhoFNvETAJ1",
          "name": "Notion account 2"
        }
      },
      "notes": "Appends each text block to the toggle"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst pageData = $('Extract Page Data').first().json;\nconst blockCount = items.length;\n\nconsole.log(`✅ Successfully added transcript to Notion`);\nconsole.log(`   Meeting: ${pageData.meetingSubject}`);\nconsole.log(`   Date: ${pageData.meetingDate}`);\nconsole.log(`   Blocks added: ${blockCount}`);\n\nreturn [{\n  json: {\n    status: 'success',\n    pageId: pageData.pageId,\n    meetingSubject: pageData.meetingSubject,\n    blocksAdded: blockCount,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3168,
        384
      ],
      "id": "7ee21bb6-deb4-406b-8857-d5df9b76add6",
      "name": "Log Success",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "## Zoom Transcript to Notion Workflow\n\n### Workflow Steps:\n1. **Get Meeting Pages**: Fetches pages from DB.Client Meeting Diary with filters:\n   - Meeting date ≥ 2025-01-01\n   - Status NOT in (Upcoming, No Show, Cancelled)\n   - Zoom.TranscriptURL is not empty\n\n2. **Sort & Limit**: Processes most recent meetings first (5 at a time)\n\n3. **Loop**: Processes one page at a time\n\n4. **Extract Data**: Gets page ID, meeting subject, transcript URL, and passcode\n\n5. **Fetch Transcript**: Downloads transcript from Zoom URL\n\n6. **Create Toggle**: Creates H2 toggle heading \"Transcript - [Meeting Subject]\"\n\n7. **Split Content**: Divides transcript into multiple blocks (max 1900 chars each)\n\n8. **Convert & Merge**: Prepares blocks for individual appending\n\n9. **Append Blocks**: Adds each text block to the toggle (handles large transcripts)\n\n### Notes:\n- Password-protected transcripts may need manual handling\n- Each text block is limited to 1900 characters\n- Processes VTT format (standard Zoom transcript format)\n- Blocks are appended one by one to handle large transcripts",
        "height": 480,
        "width": 520
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "df5db532-3185-4f5a-82f9-0cbdf9aed5b7",
      "name": "Workflow Documentation"
    },
    {
      "parameters": {
        "content": "**# Multiple Text Blocks for Large Transcripts**\n\nThe workflow now properly handles large transcripts by:\n1. Creating a toggle heading first\n2. Splitting transcript into chunks (max 1900 chars)\n3. Converting each chunk to a separate item\n4. Appending blocks one by one to the toggle\n\nThis ensures the complete transcript is added even if it's very long.",
        "height": 240,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1616,
        208
      ],
      "typeVersion": 1,
      "id": "a7c78397-71cd-452f-b634-7914afd69d75",
      "name": "Multi-Block Note"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.property_g_drive_transcript_url }}",
          "mode": "url"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1408,
        608
      ],
      "id": "d1498b0e-6536-465b-9646-8784b5be6d96",
      "name": "Download file",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "psUJfPffy3IsMJGV",
          "name": "Google Drive account 4"
        }
      }
    }
  ],
  "pinData": {},
  "repo_name": "n8n-hyly-ai-backup",
  "repo_owner": "munishgandhi",
  "repo_path": "",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-14T16:19:23.000Z",
  "versionId": "b4d4f85a-8a7b-4505-b5e9-e6a89cb5ea00"
}