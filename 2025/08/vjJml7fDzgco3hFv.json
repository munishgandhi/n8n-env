{
  "active": true,
  "connections": {
    "Config": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Create sub path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create sub path": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Evaluation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get many workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Get many workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many workflows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-14T01:53:51.149Z",
  "id": "vjJml7fDzgco3hFv",
  "isArchived": false,
  "meta": {
    "templateId": "1534",
    "templateCredsSetupCompleted": true
  },
  "name": "Back Up Your n8n Workflows To Github",
  "nodes": [
    {
      "parameters": {},
      "id": "421824c2-59a2-441b-aacc-7dadf2ec153b",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        848,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 731.7039821513649,
        "width": 1910.7813046051347,
        "color": 6
      },
      "id": "c6024a57-1957-4714-84e3-8d326c83cd89",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        368,
        704
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "07691901-a8d2-4891-860b-1d672361021b",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        432,
        1088
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "96c0c6a7-2a11-441d-8177-e0a18030daf9",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        2096,
        912
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "6715d1ff-a1f0-4e1a-b96e-f680d1495047",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1056,
        784
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "443b18e8-c05b-444f-b323-dea0b3041939",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        816,
        800
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "e460a2cd-f7af-4551-8ea2-84d9b9e5cb7f",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        816,
        1072
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "f795180a-66aa-4a86-acb0-96cf8c487db0",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        1008,
        1072
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "30e7d6fc-327e-4693-95ce-376a3b1f145c",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1408,
        1072
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "36f12309-c7fe-446f-9571-bd1005c18ed8",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1632,
        912
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "45f0eaa7-259b-4908-b567-af2b3b5abb6d",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1632,
        1072
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "d16ec06b-7a3f-486e-8328-935ed3b4d565",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1632,
        1264
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $('Config').item.json.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "cdc7f306-b7d2-4de1-8e44-0bd8d49a679f",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        1856,
        1264
      ],
      "typeVersion": 1,
      "webhookId": "8cd26a4c-522b-4e00-8d41-2e3335e47cd6",
      "credentials": {
        "githubApi": {
          "id": "DmjCnpqLzjNdBGl7",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $json.content_decoded.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json.content_decoded.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $json.content_decoded.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "9785333a-4a86-448d-afc2-58b0aa50ea96",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        1856,
        1072
      ],
      "typeVersion": 1,
      "webhookId": "173d6985-56d1-437c-9674-57f425db6631",
      "credentials": {
        "githubApi": {
          "id": "DmjCnpqLzjNdBGl7",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "806db72c-c9f6-461d-be1a-1e6867a25382",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1456,
        432
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 1,
              "triggerAtMinute": 33
            }
          ]
        }
      },
      "id": "e5c433e4-bf56-4a0a-906c-7d74f6fe7287",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        848,
        528
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
              "name": "subPath",
              "type": "string",
              "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "f6b566cb-0a15-4792-ba27-d6cd2a6c9453",
      "name": "Create sub path",
      "type": "n8n-nodes-base.set",
      "position": [
        1216,
        1072
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
        "height": 417,
        "width": 385,
        "color": 4
      },
      "id": "9e2412f6-df25-4c12-8faf-0200558b537c",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        368,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416.1856906618075,
        "width": 1272.6408145680155,
        "color": 7
      },
      "id": "00fdb977-4f3e-49f6-81c3-bc7f9520914f",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        816,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "eb7d15be-7f5d-4e39-837b-06d740685af3",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1680,
        448
      ],
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $json.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $json.repo_path }}{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "e4d70af5-5c21-4340-8054-7ba0203f3ee1",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        608,
        800
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "9fac7e9b-374c-4cff-b3ee-3e7591376de9",
      "credentials": {
        "githubApi": {
          "id": "DmjCnpqLzjNdBGl7",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
              "name": "repo_owner",
              "type": "string",
              "value": "=munishgandhi"
            },
            {
              "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
              "name": "repo_name",
              "type": "string",
              "value": "=n8n-hyly-ai-backup"
            },
            {
              "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
              "name": "repo_path",
              "type": "string",
              "value": "="
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "42ad4762-26fb-4686-9016-729e95c95324",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        608,
        1088
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "2b1dd138-7872-42ea-9882-8750ef4cf227",
      "name": "Get many workflows",
      "type": "n8n-nodes-base.n8n",
      "position": [
        1248,
        432
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "g0QlnL61ygxuD1Gt",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": ""
        }
      },
      "type": "n8n-nodes-base.evaluation",
      "typeVersion": 4.7,
      "position": [
        1680,
        304
      ],
      "id": "bd80bb11-7592-4318-ae07-8daa015f852f",
      "name": "Evaluation"
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "createdAt": "2025-08-14T01:53:51.149Z",
          "updatedAt": "2025-08-14T02:36:59.000Z",
          "id": "vjJml7fDzgco3hFv",
          "name": "Back Up Your n8n Workflows To Github",
          "active": true,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {},
              "id": "421824c2-59a2-441b-aacc-7dadf2ec153b",
              "name": "On clicking 'execute'",
              "type": "n8n-nodes-base.manualTrigger",
              "position": [
                848,
                320
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "content": "## Subworkflow",
                "height": 731.7039821513649,
                "width": 1910.7813046051347,
                "color": 6
              },
              "id": "c6024a57-1957-4714-84e3-8d326c83cd89",
              "name": "Sticky Note",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                368,
                704
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "07691901-a8d2-4891-860b-1d672361021b",
              "name": "Execute Workflow Trigger",
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "position": [
                432,
                1088
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
                      "name": "Done",
                      "type": "boolean",
                      "value": true
                    }
                  ]
                },
                "options": {}
              },
              "id": "96c0c6a7-2a11-441d-8177-e0a18030daf9",
              "name": "Return",
              "type": "n8n-nodes-base.set",
              "position": [
                2096,
                912
              ],
              "typeVersion": 3.3
            },
            {
              "parameters": {
                "url": "={{ $json.download_url }}",
                "options": {}
              },
              "id": "6715d1ff-a1f0-4e1a-b96e-f680d1495047",
              "name": "Get File",
              "type": "n8n-nodes-base.httpRequest",
              "position": [
                1056,
                784
              ],
              "typeVersion": 4.2
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
                      "operator": {
                        "type": "string",
                        "operation": "empty",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.content }}",
                      "rightValue": ""
                    },
                    {
                      "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
                      "operator": {
                        "type": "string",
                        "operation": "notExists",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.error }}",
                      "rightValue": ""
                    }
                  ]
                },
                "options": {}
              },
              "id": "443b18e8-c05b-444f-b323-dea0b3041939",
              "name": "If file too large",
              "type": "n8n-nodes-base.if",
              "position": [
                816,
                800
              ],
              "typeVersion": 2
            },
            {
              "parameters": {},
              "id": "e460a2cd-f7af-4551-8ea2-84d9b9e5cb7f",
              "name": "Merge Items",
              "type": "n8n-nodes-base.merge",
              "position": [
                816,
                1072
              ],
              "typeVersion": 2
            },
            {
              "parameters": {
                "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
              },
              "id": "f795180a-66aa-4a86-acb0-96cf8c487db0",
              "name": "isDiffOrNew",
              "type": "n8n-nodes-base.code",
              "position": [
                1008,
                1072
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "dataType": "string",
                "value1": "={{$json.github_status}}",
                "rules": {
                  "rules": [
                    {
                      "value2": "same"
                    },
                    {
                      "value2": "different",
                      "output": 1
                    },
                    {
                      "value2": "new",
                      "output": 2
                    }
                  ]
                }
              },
              "id": "30e7d6fc-327e-4693-95ce-376a3b1f145c",
              "name": "Check Status",
              "type": "n8n-nodes-base.switch",
              "position": [
                1408,
                1072
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "36f12309-c7fe-446f-9571-bd1005c18ed8",
              "name": "Same file - Do nothing",
              "type": "n8n-nodes-base.noOp",
              "position": [
                1632,
                912
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "45f0eaa7-259b-4908-b567-af2b3b5abb6d",
              "name": "File is different",
              "type": "n8n-nodes-base.noOp",
              "position": [
                1632,
                1072
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "d16ec06b-7a3f-486e-8328-935ed3b4d565",
              "name": "File is new",
              "type": "n8n-nodes-base.noOp",
              "position": [
                1632,
                1264
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "resource": "file",
                "owner": {
                  "__rl": true,
                  "value": "={{ $('Config').item.json.repo_owner }}",
                  "mode": ""
                },
                "repository": {
                  "__rl": true,
                  "value": "={{ $('Config').item.json.repo_name }}",
                  "mode": ""
                },
                "filePath": "={{ $('Config').item.json.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
                "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
                "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
              },
              "id": "cdc7f306-b7d2-4de1-8e44-0bd8d49a679f",
              "name": "Create new file",
              "type": "n8n-nodes-base.github",
              "position": [
                1856,
                1264
              ],
              "typeVersion": 1,
              "webhookId": "8cd26a4c-522b-4e00-8d41-2e3335e47cd6",
              "credentials": {
                "githubApi": {
                  "id": "DmjCnpqLzjNdBGl7",
                  "name": "GitHub account"
                }
              }
            },
            {
              "parameters": {
                "resource": "file",
                "operation": "edit",
                "owner": {
                  "__rl": true,
                  "mode": "",
                  "value": "={{ $('Config').first().item.repo_owner }}"
                },
                "repository": {
                  "__rl": true,
                  "mode": "",
                  "value": "={{ $('Config').first().item.repo_name }}"
                },
                "filePath": "={{ $('Config').first().item.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
                "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
                "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
              },
              "id": "9785333a-4a86-448d-afc2-58b0aa50ea96",
              "name": "Edit existing file",
              "type": "n8n-nodes-base.github",
              "position": [
                1856,
                1072
              ],
              "typeVersion": 1,
              "webhookId": "173d6985-56d1-437c-9674-57f425db6631",
              "credentials": {
                "githubApi": {
                  "id": "DmjCnpqLzjNdBGl7",
                  "name": "GitHub account"
                }
              }
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "806db72c-c9f6-461d-be1a-1e6867a25382",
              "name": "Loop Over Items",
              "type": "n8n-nodes-base.splitInBatches",
              "position": [
                1456,
                432
              ],
              "typeVersion": 3
            },
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {
                      "triggerAtHour": 1,
                      "triggerAtMinute": 33
                    }
                  ]
                }
              },
              "id": "e5c433e4-bf56-4a0a-906c-7d74f6fe7287",
              "name": "Schedule Trigger",
              "type": "n8n-nodes-base.scheduleTrigger",
              "position": [
                848,
                528
              ],
              "typeVersion": 1.2
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
                      "name": "subPath",
                      "type": "string",
                      "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
                    }
                  ]
                },
                "includeOtherFields": true,
                "options": {}
              },
              "id": "f6b566cb-0a15-4792-ba27-d6cd2a6c9453",
              "name": "Create sub path",
              "type": "n8n-nodes-base.set",
              "position": [
                1216,
                1072
              ],
              "typeVersion": 3.3
            },
            {
              "parameters": {
                "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
                "height": 417,
                "width": 385,
                "color": 4
              },
              "id": "9e2412f6-df25-4c12-8faf-0200558b537c",
              "name": "Sticky Note1",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                368,
                240
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "content": "## Main workflow loop",
                "height": 416.1856906618075,
                "width": 1272.6408145680155,
                "color": 7
              },
              "id": "00fdb977-4f3e-49f6-81c3-bc7f9520914f",
              "name": "Sticky Note2",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                816,
                240
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "workflowId": "={{ $workflow.id }}",
                "mode": "each",
                "options": {}
              },
              "id": "eb7d15be-7f5d-4e39-837b-06d740685af3",
              "name": "Execute Workflow",
              "type": "n8n-nodes-base.executeWorkflow",
              "position": [
                1680,
                448
              ],
              "typeVersion": 1,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "resource": "file",
                "operation": "get",
                "owner": {
                  "__rl": true,
                  "value": "={{ $json.repo_owner }}",
                  "mode": ""
                },
                "repository": {
                  "__rl": true,
                  "value": "={{ $json.repo_name }}",
                  "mode": ""
                },
                "filePath": "={{ $json.repo_path }}{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
                "asBinaryProperty": false,
                "additionalParameters": {}
              },
              "id": "e4d70af5-5c21-4340-8054-7ba0203f3ee1",
              "name": "Get file data",
              "type": "n8n-nodes-base.github",
              "position": [
                608,
                800
              ],
              "typeVersion": 1,
              "alwaysOutputData": true,
              "webhookId": "9fac7e9b-374c-4cff-b3ee-3e7591376de9",
              "credentials": {
                "githubApi": {
                  "id": "DmjCnpqLzjNdBGl7",
                  "name": "GitHub account"
                }
              },
              "continueOnFail": true
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
                      "name": "repo_owner",
                      "type": "string",
                      "value": "=munishgandhi"
                    },
                    {
                      "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
                      "name": "repo_name",
                      "type": "string",
                      "value": "=n8n-hyly-ai-backup"
                    },
                    {
                      "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
                      "name": "repo_path",
                      "type": "string",
                      "value": "="
                    }
                  ]
                },
                "includeOtherFields": true,
                "options": {}
              },
              "id": "42ad4762-26fb-4686-9016-729e95c95324",
              "name": "Config",
              "type": "n8n-nodes-base.set",
              "position": [
                608,
                1088
              ],
              "typeVersion": 3.4
            },
            {
              "parameters": {
                "filters": {},
                "requestOptions": {}
              },
              "id": "2b1dd138-7872-42ea-9882-8750ef4cf227",
              "name": "Get many workflows",
              "type": "n8n-nodes-base.n8n",
              "position": [
                1248,
                432
              ],
              "typeVersion": 1,
              "credentials": {
                "n8nApi": {
                  "id": "g0QlnL61ygxuD1Gt",
                  "name": "n8n account"
                }
              }
            }
          ],
          "connections": {
            "Config": {
              "main": [
                [
                  {
                    "node": "Get file data",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Merge Items",
                    "type": "main",
                    "index": 1
                  }
                ]
              ]
            },
            "Get File": {
              "main": [
                [
                  {
                    "node": "Merge Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "File is new": {
              "main": [
                [
                  {
                    "node": "Create new file",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Merge Items": {
              "main": [
                [
                  {
                    "node": "isDiffOrNew",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "isDiffOrNew": {
              "main": [
                [
                  {
                    "node": "Create sub path",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Check Status": {
              "main": [
                [
                  {
                    "node": "Same file - Do nothing",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "File is different",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "File is new",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get file data": {
              "main": [
                [
                  {
                    "node": "If file too large",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Create new file": {
              "main": [
                [
                  {
                    "node": "Return",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Create sub path": {
              "main": [
                [
                  {
                    "node": "Check Status",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [],
                [
                  {
                    "node": "Execute Workflow",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Workflow": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "Get many workflows",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "File is different": {
              "main": [
                [
                  {
                    "node": "Edit existing file",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If file too large": {
              "main": [
                [
                  {
                    "node": "Get File",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Merge Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit existing file": {
              "main": [
                [
                  {
                    "node": "Return",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "On clicking 'execute'": {
              "main": [
                [
                  {
                    "node": "Get many workflows",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Same file - Do nothing": {
              "main": [
                [
                  {
                    "node": "Return",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Workflow Trigger": {
              "main": [
                [
                  {
                    "node": "Config",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get many workflows": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {},
          "staticData": {
            "node:Schedule Trigger": {
              "recurrenceRules": []
            }
          },
          "meta": {
            "templateId": "1534",
            "templateCredsSetupCompleted": true
          },
          "pinData": {
            "Execute Workflow Trigger": [
              {
                "json": {
                  "createdAt": "2025-07-18T23:11:21.258Z",
                  "updatedAt": "2025-07-31T03:21:24.000Z",
                  "id": "3soZAbHUm8vgIkXp",
                  "name": "Process Workflow v20250730-232124",
                  "active": false,
                  "isArchived": false,
                  "nodes": [
                    {
                      "parameters": {
                        "workflowInputs": {
                          "values": [
                            {
                              "name": "query",
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "id": "subworkflow-trigger",
                      "name": "N01: Subworkflow Start",
                      "type": "n8n-nodes-base.executeWorkflowTrigger",
                      "typeVersion": 1.1,
                      "position": [
                        208,
                        120
                      ]
                    },
                    {
                      "parameters": {
                        "jsCode": "// ALGORITHM: Determine Next Date to Process\n// Handle different input formats from n8n Notion node\nlet entries = [];\n\n// Try different ways to access the data\nif (Array.isArray($json)) {\n  entries = $json;\n} else if ($json.results && Array.isArray($json.results)) {\n  entries = $json.results;\n} else if ($input && $input.all) {\n  entries = $input.all().map(item => item.json);\n} else {\n  entries = [$json].filter(item => item && typeof item === 'object');\n}\n\nconsole.log(`📊 Found ${entries.length} backlog entries`);\nif (entries.length > 0) {\n  console.log(`📋 First entry structure:`, JSON.stringify(entries[0], null, 2));\n}\n\n// Helper function: get current Eastern time date\nfunction getEasternDate() {\n  const now = new Date();\n  // Eastern time is UTC-5 (standard) or UTC-4 (daylight), use UTC-4 for July\n  const easternOffset = -4 * 60; // minutes\n  const utc = now.getTime() + (now.getTimezoneOffset() * 60000);\n  const easternTime = new Date(utc + (easternOffset * 60000));\n  return easternTime;\n}\n\n// Helper function: format date to YYYY-MM-DD\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n// Helper function: get yesterday's date in Eastern time\nfunction getYesterday() {\n  const easternNow = getEasternDate();\n  const yesterday = new Date(easternNow);\n  yesterday.setDate(yesterday.getDate() - 1);\n  return formatDate(yesterday);\n}\n\n// Helper function: add days to date\nfunction addDays(dateStr, days) {\n  if (!dateStr || typeof dateStr !== 'string') {\n    console.log(`⚠️ Invalid date string: ${dateStr}`);\n    return null;\n  }\n  const date = new Date(dateStr + 'T12:00:00'); // Use noon to avoid timezone issues\n  if (isNaN(date.getTime())) {\n    console.log(`⚠️ Cannot parse date: ${dateStr}`);\n    return null;\n  }\n  date.setDate(date.getDate() + days);\n  return formatDate(date);\n}\n\n// Helper function: check if entry has valid data\nfunction isValidEntry(entry) {\n  if (!entry || typeof entry !== 'object') return false;\n  \n  // Check if it has any meaningful properties (specifically Gmail Date or Status)\n  const hasGmailDate = entry.property_gmail_date || \n                      entry.properties?.[\"Gmail Date\"] || \n                      entry.name;\n  const hasStatus = entry.property_status || \n                   entry.properties?.Status;\n  \n  return !!(hasGmailDate || hasStatus || entry.id);\n}\n\n// Filter out empty objects and invalid entries\nconst validEntries = entries.filter(isValidEntry);\n\nconsole.log(`📊 Valid entries after filtering: ${validEntries.length}`);\n\n// Log current Eastern time for debugging\nconst easternNow = getEasternDate();\nconst today = formatDate(easternNow);\nconst yesterday = getYesterday();\nconsole.log(`📅 Current Eastern time: ${easternNow.toISOString()}`);\nconsole.log(`📅 Today (Eastern): ${today}, Yesterday (Eastern): ${yesterday}`);\n\n// STEP 1: If no valid entries exist, return yesterday\nif (validEntries.length === 0) {\n  console.log(`✅ No valid entries found, creating entry for yesterday: ${yesterday}`);\n  return [{\n    json: {\n      action: 'create',\n      nextDate: yesterday,\n      reason: 'No entries exist - starting with yesterday'\n    }\n  }];\n}\n\n// STEP 2: Check ALL entries for incomplete status (CRITICAL FIX)\n// If ANY entry is not complete, block creation\nconst incompleteEntries = validEntries.filter(entry => {\n  const status = entry.property_status || \n                entry.properties?.Status?.select?.name;\n  const date = entry.property_gmail_date || \n              entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n              entry.name;\n  \n  console.log(`📋 Entry ${date}: status = ${status}`);\n  return status && status !== 'complete';\n});\n\nif (incompleteEntries.length > 0) {\n  const incompleteInfo = incompleteEntries.map(entry => {\n    const status = entry.property_status || \n                  entry.properties?.Status?.select?.name;\n    const date = entry.property_gmail_date || \n                entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n                entry.name;\n    return `${date}(${status})`;\n  }).join(', ');\n  \n  console.log(`⚠️  Found ${incompleteEntries.length} incomplete entries: ${incompleteInfo}`);\n  return [{\n    json: {\n      action: 'warning',\n      message: `Cannot create new entries - ${incompleteEntries.length} entries are not complete: ${incompleteInfo}`,\n      incompleteCount: incompleteEntries.length,\n      incompleteEntries: incompleteInfo\n    }\n  }];\n}\n\n// STEP 3: All entries are complete - proceed with date logic\nconsole.log(`✅ All entries are complete - proceeding with date logic`);\n\n// Get latest entry for date calculation\nconst latestEntry = validEntries[0];\nconst latestDate = latestEntry.property_gmail_date || \n                  latestEntry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n                  latestEntry.name;\n\nconsole.log(`📋 Latest complete entry: ${latestDate}`);\n\n// STEP 4: Find earliest missing date (gap finding)\n// Get all dates and sort them\nconst allDates = validEntries\n  .map(entry => {\n    return entry.property_gmail_date || \n           entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n           entry.name;\n  })\n  .filter(date => date && typeof date === 'string' && date.match(/^\\d{4}-\\d{2}-\\d{2}$/))\n  .sort();\n\nconsole.log(`📅 All valid dates: ${allDates.join(', ')}`);\n\n// Find the first gap\nfor (let i = 0; i < allDates.length - 1; i++) {\n  const currentDate = allDates[i];\n  const nextDate = allDates[i + 1];\n  \n  const expectedNext = addDays(currentDate, 1);\n  if (!expectedNext) continue;\n  \n  if (expectedNext !== nextDate) {\n    console.log(`🔍 Found gap: ${currentDate} -> ${nextDate}, missing: ${expectedNext}`);\n    return [{\n      json: {\n        action: 'create',\n        nextDate: expectedNext,\n        reason: `Found gap between ${currentDate} and ${nextDate}`\n      }\n    }];\n  }\n}\n\n// STEP 5: No gaps found, create entry for day before oldest (with existence check)\nconst oldestDate = allDates[allDates.length - 1]; // Since sorted ascending, last is oldest\nlet candidate = addDays(oldestDate, -1);\nif (!candidate) {\n  console.log(`❌ Cannot calculate day before oldest: ${oldestDate}`);\n  return [{\n    json: {\n      action: 'create',\n      nextDate: yesterday,\n      reason: 'Date calculation error - using yesterday'\n    }\n  }];\n}\n\n// Keep going back until we find a date that doesn't exist\nwhile (candidate && allDates.includes(candidate) && candidate >= '2020-01-01') {\n  console.log(`📋 Date ${candidate} already exists, trying day before`);\n  candidate = addDays(candidate, -1);\n}\n\n// Never create today or future dates\nconst nextDate = candidate > yesterday ? yesterday : candidate;\n\nconsole.log(`📆 No gaps found. Oldest: ${oldestDate}, candidate: ${candidate}, yesterday: ${yesterday}`);\nconsole.log(`✅ Creating entry for: ${nextDate}`);\n\nreturn [{\n  json: {\n    action: 'create',\n    nextDate: nextDate,\n    reason: `No gaps found, creating entry for earliest missing date before ${oldestDate}`\n  }\n}];"
                      },
                      "id": "determine-next-date",
                      "name": "N03: Determine Next Date Algorithm",
                      "type": "n8n-nodes-base.code",
                      "typeVersion": 2,
                      "position": [
                        656,
                        120
                      ]
                    },
                    {
                      "parameters": {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict",
                            "version": 1
                          },
                          "conditions": [
                            {
                              "id": "action_is_create",
                              "leftValue": "={{$json.action}}",
                              "rightValue": "create",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "options": {}
                      },
                      "id": "check-action",
                      "name": "N04: Create vs Warning",
                      "type": "n8n-nodes-base.if",
                      "typeVersion": 2,
                      "position": [
                        880,
                        120
                      ]
                    },
                    {
                      "parameters": {
                        "resource": "databasePage",
                        "databaseId": {
                          "__rl": true,
                          "value": "2231db9b-a441-8178-8957-f88a30b0cdba",
                          "mode": "list",
                          "cachedResultName": "vcdb.Backlog.vn8n",
                          "cachedResultUrl": "https://www.notion.so/2231db9ba44181788957f88a30b0cdba"
                        },
                        "title": "={{ $json.nextDate }}",
                        "simple": false,
                        "propertiesUi": {
                          "propertyValues": [
                            {
                              "key": "Date Started|date",
                              "date": "={{ $now }}",
                              "timezone": "US/Eastern"
                            },
                            {
                              "key": "Status|select",
                              "selectValue": "start"
                            }
                          ]
                        },
                        "options": {}
                      },
                      "id": "create-backlog-entry",
                      "name": "N05: Create New Backlog Entry",
                      "type": "n8n-nodes-base.notion",
                      "typeVersion": 2,
                      "position": [
                        1104,
                        48
                      ],
                      "credentials": {
                        "notionApi": {
                          "id": "MlSLKQmPnMyqW0ii",
                          "name": "Notion account"
                        }
                      }
                    },
                    {
                      "parameters": {
                        "resource": "databasePage",
                        "operation": "getAll",
                        "databaseId": {
                          "__rl": true,
                          "value": "2231db9b-a441-8178-8957-f88a30b0cdba",
                          "mode": "list",
                          "cachedResultName": "vcdb.Backlog.vn8n",
                          "cachedResultUrl": "https://www.notion.so/2231db9ba44181788957f88a30b0cdba"
                        },
                        "options": {
                          "sort": {
                            "sortValue": [
                              {
                                "key": "Gmail Date|title",
                                "direction": "descending"
                              }
                            ]
                          }
                        }
                      },
                      "type": "n8n-nodes-base.notion",
                      "typeVersion": 2.2,
                      "position": [
                        432,
                        120
                      ],
                      "id": "d62dc73a-6fdc-4450-b128-d6cb6d8c3fc5",
                      "name": "N02: Query Backlog Database",
                      "alwaysOutputData": true,
                      "credentials": {
                        "notionApi": {
                          "id": "MlSLKQmPnMyqW0ii",
                          "name": "Notion account"
                        }
                      }
                    },
                    {
                      "parameters": {
                        "jsCode": "// Extract backlog details and build Gmail query\nconst backlogEntry = $json;\nconst algorithmResult = $('N03: Determine Next Date Algorithm').first().json;\n\n// Get the date from algorithm result\nconst dateStr = algorithmResult.nextDate; // Format: YYYY-MM-DD\n\n// Parse date components\nconst [year, month, day] = dateStr.split('-');\nconst formattedDate = `${year}/${month}/${day}`;\n\n// Calculate next day for 'before' parameter\nconst dateObj = new Date(year, month - 1, day); // month is 0-indexed\nconst nextDay = new Date(dateObj);\nnextDay.setDate(dateObj.getDate() + 1);\n\nconst afterDate = formattedDate;\nconst beforeDate = `${nextDay.getFullYear()}/${String(nextDay.getMonth() + 1).padStart(2, '0')}/${String(nextDay.getDate()).padStart(2, '0')}`;\n\n// Build Gmail query with folder filter\nconst gmailQuery = `after:${afterDate} before:${beforeDate} in:\"--Watch/VC\"`;\n\nconsole.log(`📅 Backlog entry created for: ${dateStr}`);\nconsole.log(`📧 Gmail query: ${gmailQuery}`);\n\nreturn [{\n  json: {\n    backlogId: backlogEntry.id,\n    backlogDate: dateStr,\n    backlogUrl: backlogEntry.url,\n    gmailQuery: gmailQuery,\n    formattedDate: formattedDate\n  }\n}];"
                      },
                      "id": "extract-backlog-details",
                      "name": "N06: Extract Backlog Details & Build Query",
                      "type": "n8n-nodes-base.code",
                      "typeVersion": 2,
                      "position": [
                        1328,
                        48
                      ]
                    },
                    {
                      "parameters": {
                        "operation": "getAll",
                        "limit": 100,
                        "filters": {
                          "q": "={{ $json.gmailQuery }}"
                        }
                      },
                      "id": "search-gmail-messages",
                      "name": "N07: Search Gmail Messages",
                      "type": "n8n-nodes-base.gmail",
                      "typeVersion": 2,
                      "position": [
                        1552,
                        48
                      ],
                      "retryOnFail": true,
                      "maxTries": 3,
                      "waitBetweenTries": 2000,
                      "alwaysOutputData": true,
                      "webhookId": "e28ed83d-c45d-409e-b456-b054044a4220",
                      "credentials": {
                        "gmailOAuth2": {
                          "id": "pxtxj61wdCzGXITa",
                          "name": "Gmail account"
                        }
                      },
                      "onError": "continueErrorOutput"
                    },
                    {
                      "parameters": {
                        "jsCode": "// Process Gmail results and handle errors/empty results\nconst gmailMessages = $('N07: Search Gmail Messages').all();\nconst backlogDetails = $('N06: Extract Backlog Details & Build Query').first().json;\n\n// Handle Gmail API errors\nif (gmailMessages.length === 1 && gmailMessages[0].json.error) {\n  const error = gmailMessages[0].json.error;\n  console.error('❌ Gmail API error:', error);\n  \n  // Return empty array to trigger no emails path\n  return [];\n}\n\n// Check for empty results - FIXED to handle empty JSON objects\nif (!gmailMessages || gmailMessages.length === 0 || \n    (gmailMessages.length === 1 && !gmailMessages[0].json.id) ||\n    (gmailMessages.length === 1 && Object.keys(gmailMessages[0].json).length === 0)) {\n  console.log('ℹ️ No messages found for the specified date');\n  // Return empty array to trigger no emails path\n  return [];\n}\n\n// Process and format messages\nconsole.log(`📧 Processing ${gmailMessages.length} Gmail messages`);\n\n// Add backlogId to each message for subworkflow\nconst processedMessages = gmailMessages.map(item => {\n  const msg = item.json;\n  return {\n    messageId: msg.id,\n    threadId: msg.threadId,\n    from: msg.From || 'Unknown',\n    subject: msg.Subject || 'No Subject',\n    backlogId: backlogDetails.backlogId\n  };\n});\n\nreturn processedMessages.map(msg => ({ json: msg }));"
                      },
                      "id": "process-gmail-results",
                      "name": "N08: Process Gmail Results",
                      "type": "n8n-nodes-base.code",
                      "typeVersion": 2,
                      "position": [
                        1776,
                        48
                      ],
                      "alwaysOutputData": true
                    },
                    {
                      "parameters": {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "id": "has-messages",
                              "leftValue": "={{ $input.all().filter(item => item.json.messageId).length }}",
                              "rightValue": 0,
                              "operator": {
                                "type": "number",
                                "operation": "gt"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "options": {}
                      },
                      "id": "check-has-messages",
                      "name": "N09: Check Has Messages",
                      "type": "n8n-nodes-base.if",
                      "typeVersion": 2,
                      "position": [
                        2000,
                        48
                      ]
                    },
                    {
                      "parameters": {
                        "workflowId": {
                          "__rl": true,
                          "value": "7f3OziDCCYtWwM4W",
                          "mode": "list",
                          "cachedResultName": "Backlog2Planners v20250729-024811"
                        },
                        "workflowInputs": {
                          "mappingMode": "defineBelow",
                          "value": {
                            "query": {
                              "id": "={{ $json.messageId }}",
                              "backlogId": "={{ $json.backlogId }}"
                            }
                          },
                          "schema": [
                            {
                              "id": "query",
                              "displayName": "query",
                              "required": true,
                              "defaultMatch": false,
                              "display": true,
                              "type": "object",
                              "canBeUsedToMatch": true
                            }
                          ]
                        },
                        "mode": "each",
                        "options": {}
                      },
                      "id": "execute-backlog2planners",
                      "name": "N10: Execute Backlog2Planners",
                      "type": "n8n-nodes-base.executeWorkflow",
                      "typeVersion": 1.2,
                      "position": [
                        2224,
                        -48
                      ]
                    },
                    {
                      "parameters": {
                        "resource": "databasePage",
                        "operation": "update",
                        "pageId": {
                          "__rl": true,
                          "value": "={{ $('N06: Extract Backlog Details & Build Query').first().json.backlogId }}",
                          "mode": "id",
                          "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
                        },
                        "simple": false,
                        "propertiesUi": {
                          "propertyValues": [
                            {
                              "key": "Status|select",
                              "selectValue": "complete"
                            }
                          ]
                        },
                        "options": {}
                      },
                      "id": "update-backlog-status",
                      "name": "N12: Update Backlog Status",
                      "type": "n8n-nodes-base.notion",
                      "typeVersion": 2.2,
                      "position": [
                        2448,
                        -48
                      ],
                      "credentials": {
                        "notionApi": {
                          "id": "MlSLKQmPnMyqW0ii",
                          "name": "Notion account"
                        }
                      }
                    },
                    {
                      "parameters": {
                        "jsCode": "// Handle case where no Gmail messages found\nconst backlogDetails = $('N06: Extract Backlog Details & Build Query').first().json;\n\nconsole.log(`⚠️ No Gmail messages found for date: ${backlogDetails.backlogDate}`);\nconsole.log(`📧 Query used: ${backlogDetails.gmailQuery}`);\n\n// Still mark backlog as complete since we checked the date\nreturn [{\n  json: {\n    success: false,\n    action: 'no_emails_found',\n    backlogId: backlogDetails.backlogId,\n    backlogDate: backlogDetails.backlogDate,\n    message: 'No emails found in --Watch/VC folder for this date',\n    shouldUpdateStatus: true\n  }\n}];"
                      },
                      "id": "handle-no-gmail",
                      "name": "N11: Handle No Gmail Messages",
                      "type": "n8n-nodes-base.code",
                      "typeVersion": 2,
                      "position": [
                        2224,
                        144
                      ]
                    },
                    {
                      "parameters": {
                        "resource": "databasePage",
                        "operation": "update",
                        "pageId": {
                          "__rl": true,
                          "value": "={{ $('N06: Extract Backlog Details & Build Query').first().json.backlogId }}",
                          "mode": "id",
                          "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
                        },
                        "simple": false,
                        "propertiesUi": {
                          "propertyValues": [
                            {
                              "key": "Status|select",
                              "selectValue": "complete"
                            }
                          ]
                        },
                        "options": {}
                      },
                      "id": "update-backlog-no-emails",
                      "name": "N13: Update Backlog Status (No Emails)",
                      "type": "n8n-nodes-base.notion",
                      "typeVersion": 2.2,
                      "position": [
                        2448,
                        144
                      ],
                      "credentials": {
                        "notionApi": {
                          "id": "MlSLKQmPnMyqW0ii",
                          "name": "Notion account"
                        }
                      }
                    },
                    {
                      "parameters": {
                        "jsCode": "// Compile final result based on execution path\nlet algorithmResult = null;\nlet backlogDetails = null;\n\n// Try to get algorithm result\ntry {\n  algorithmResult = $('N03: Determine Next Date Algorithm').first().json;\n} catch (e) {\n  console.log('Could not get algorithm result');\n}\n\n// Try to get backlog details\ntry {\n  backlogDetails = $('N06: Extract Backlog Details & Build Query').first().json;\n} catch (e) {\n  console.log('Could not get backlog details');\n}\n\n// Check which path we came from\nlet processedMessages = [];\nlet executionResults = [];\nlet cameFromNoEmailPath = false;\nlet cameFromWarningPath = false;\nlet gmailError = null;\n\n// Check if we came from warning path (N02 false branch)\ntry {\n  const prevNode = $input.first().json;\n  if (prevNode && prevNode.action === 'warning') {\n    cameFromWarningPath = true;\n  }\n} catch (e) {\n  // Not from warning path\n}\n\n// Check if Gmail had an error\ntry {\n  const gmailData = $('N07: Search Gmail Messages').first();\n  if (gmailData.error) {\n    gmailError = gmailData.error;\n  }\n} catch (e) {\n  // No Gmail execution or error\n}\n\n// Try to get data from the Gmail processing path\nif (!cameFromWarningPath && !gmailError) {\n  try {\n    const n08Data = $('N08: Process Gmail Results');\n    if (n08Data && n08Data.all) {\n      processedMessages = n08Data.all();\n    }\n  } catch (e) {\n    // N08 didn't execute - we came from the no emails path\n    cameFromNoEmailPath = true;\n  }\n\n  try {\n    const n10Data = $('N10: Execute Backlog2Planners');\n    if (n10Data && n10Data.all) {\n      executionResults = n10Data.all();\n    }\n  } catch (e) {\n    // N10 didn't execute - confirming no emails path\n    cameFromNoEmailPath = true;\n  }\n}\n\n// If we came from no email path, check if we have the no email handler data\nif (cameFromNoEmailPath) {\n  try {\n    const noEmailData = $('N11: Handle No Gmail Messages').first().json;\n    console.log(`📧 No emails found for date: ${noEmailData.backlogDate}`);\n  } catch (e) {\n    console.log(`📧 No emails were processed`);\n  }\n}\n\n// Build result based on execution path\nlet result;\n\nif (cameFromWarningPath) {\n  // Warning path - incomplete entries exist\n  const warningData = $input.first().json;\n  result = {\n    success: false,\n    action: 'warning',\n    message: warningData.message,\n    details: warningData.details,\n    timestamp: new Date().toISOString()\n  };\n  console.log(`⚠️ Workflow Warning: ${result.message}`);\n} else if (gmailError) {\n  // Gmail error path\n  result = {\n    success: false,\n    action: 'gmail_error',\n    createdDate: algorithmResult?.nextDate,\n    reason: algorithmResult?.reason,\n    backlogEntryId: backlogDetails?.backlogId,\n    error: gmailError.message || 'Gmail search failed',\n    timestamp: new Date().toISOString()\n  };\n  console.log(`❌ Gmail Error: ${result.error}`);\n} else {\n  // Normal completion path\n  result = {\n    success: true,\n    action: 'completed',\n    createdDate: algorithmResult.nextDate,\n    reason: algorithmResult.reason,\n    backlogEntryId: backlogDetails.backlogId,\n    gmailMessagesProcessed: processedMessages.length,\n    plannerRecordsCreated: {\n      emails: executionResults.length,\n      persons: executionResults.filter(r => r.json && r.json.PlannerPerson).length,\n      firms: executionResults.filter(r => r.json && r.json.PlannerFirm).length\n    },\n    noEmailsFound: cameFromNoEmailPath,\n    timestamp: new Date().toISOString()\n  };\n  \n  console.log(`✅ Backlog Creator Success: Created and processed entry for ${result.createdDate}`);\n  console.log(`📝 Reason: ${result.reason}`);\n  console.log(`🆔 Entry ID: ${result.backlogEntryId}`);\n  console.log(`📧 Gmail messages processed: ${result.gmailMessagesProcessed}`);\n  if (result.noEmailsFound) {\n    console.log(`📭 No emails found for this date - backlog entry marked as complete`);\n  }\n}\n\nreturn [{ json: result }];"
                      },
                      "id": "final-success-result",
                      "name": "N14: Final Success Result",
                      "type": "n8n-nodes-base.code",
                      "typeVersion": 2,
                      "position": [
                        2672,
                        144
                      ]
                    }
                  ],
                  "connections": {
                    "N03: Determine Next Date Algorithm": {
                      "main": [
                        [
                          {
                            "node": "N04: Create vs Warning",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N05: Create New Backlog Entry": {
                      "main": [
                        [
                          {
                            "node": "N06: Extract Backlog Details & Build Query",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N04: Create vs Warning": {
                      "main": [
                        [
                          {
                            "node": "N05: Create New Backlog Entry",
                            "type": "main",
                            "index": 0
                          }
                        ],
                        [
                          {
                            "node": "N14: Final Success Result",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N08: Process Gmail Results": {
                      "main": [
                        [
                          {
                            "node": "N09: Check Has Messages",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N09: Check Has Messages": {
                      "main": [
                        [
                          {
                            "node": "N10: Execute Backlog2Planners",
                            "type": "main",
                            "index": 0
                          }
                        ],
                        [
                          {
                            "node": "N11: Handle No Gmail Messages",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N13: Update Backlog Status (No Emails)": {
                      "main": [
                        [
                          {
                            "node": "N14: Final Success Result",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N07: Search Gmail Messages": {
                      "main": [
                        [
                          {
                            "node": "N08: Process Gmail Results",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N11: Handle No Gmail Messages": {
                      "main": [
                        [
                          {
                            "node": "N13: Update Backlog Status (No Emails)",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N10: Execute Backlog2Planners": {
                      "main": [
                        [
                          {
                            "node": "N12: Update Backlog Status",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N06: Extract Backlog Details & Build Query": {
                      "main": [
                        [
                          {
                            "node": "N07: Search Gmail Messages",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N12: Update Backlog Status": {
                      "main": [
                        [
                          {
                            "node": "N14: Final Success Result",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N02: Query Backlog Database": {
                      "main": [
                        [
                          {
                            "node": "N03: Determine Next Date Algorithm",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "N01: Subworkflow Start": {
                      "main": [
                        [
                          {
                            "node": "N02: Query Backlog Database",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    }
                  },
                  "settings": {},
                  "staticData": null,
                  "meta": null,
                  "pinData": {
                    "N01: Subworkflow Start": [
                      {
                        "json": {}
                      }
                    ]
                  },
                  "versionId": "e484b1f7-4d89-44ac-bb1d-d1e9030f82db",
                  "triggerCount": 0,
                  "shared": [
                    {
                      "createdAt": "2025-07-18T23:11:21.261Z",
                      "updatedAt": "2025-07-18T23:11:21.261Z",
                      "role": "workflow:owner",
                      "workflowId": "3soZAbHUm8vgIkXp",
                      "projectId": "SdQUKp1z3ZZrGtB3",
                      "project": {
                        "createdAt": "2025-07-01T02:52:03.740Z",
                        "updatedAt": "2025-07-05T04:34:13.413Z",
                        "id": "SdQUKp1z3ZZrGtB3",
                        "name": "Munish Gandhi <mg@hy.ly>",
                        "type": "personal",
                        "icon": null,
                        "description": null,
                        "projectRelations": [
                          {
                            "createdAt": "2025-07-01T02:52:03.740Z",
                            "updatedAt": "2025-07-01T02:52:03.740Z",
                            "role": "project:personalOwner",
                            "userId": "9cfcc413-ffc4-42d0-8c34-fe942bbee9ba",
                            "projectId": "SdQUKp1z3ZZrGtB3",
                            "user": {
                              "createdAt": "2025-07-01T02:52:03.312Z",
                              "updatedAt": "2025-08-13T19:57:04.000Z",
                              "id": "9cfcc413-ffc4-42d0-8c34-fe942bbee9ba",
                              "email": "mg@hy.ly",
                              "firstName": "Munish",
                              "lastName": "Gandhi",
                              "personalizationAnswers": {
                                "version": "v4",
                                "personalization_survey_submitted_at": "2025-07-01T02:54:47.627Z",
                                "personalization_survey_n8n_version": "1.100.1",
                                "companySize": "personalUser",
                                "companyType": "saas",
                                "role": "business-owner",
                                "reportedSource": "google"
                              },
                              "settings": {
                                "userActivated": true,
                                "firstSuccessfulWorkflowId": "IdvDgcbfCEF7nh2j",
                                "userActivatedAt": 1751392519613,
                                "npsSurvey": {
                                  "responded": true,
                                  "lastShownAt": 1751675204125
                                },
                                "easyAIWorkflowOnboarded": true
                              },
                              "role": "global:owner",
                              "disabled": false,
                              "mfaEnabled": false,
                              "lastActiveAt": "2025-08-13",
                              "isPending": false
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "tags": []
                }
              }
            ]
          },
          "versionId": "1b08ea47-932d-4f8a-aeef-e8f746fa36f8",
          "triggerCount": 1,
          "tags": []
        }
      }
    ]
  },
  "repo_name": "n8n-hyly-ai-backup",
  "repo_owner": "munishgandhi",
  "repo_path": "",
  "settings": {},
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-08-14T02:49:12.000Z",
  "versionId": "63873927-29f0-41f9-8e59-6f0f6e2114c9"
}