{
  "active": false,
  "connections": {
    "N03: Determine Next Date Algorithm": {
      "main": [
        [
          {
            "node": "N04: Create vs Warning",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N05: Create New Backlog Entry": {
      "main": [
        [
          {
            "node": "N06: Extract Backlog Details & Build Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N04: Create vs Warning": {
      "main": [
        [
          {
            "node": "N05: Create New Backlog Entry",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "N14: Final Success Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N08: Process Gmail Results": {
      "main": [
        [
          {
            "node": "N09: Check Has Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N09: Check Has Messages": {
      "main": [
        [
          {
            "node": "N10: Execute Backlog2Planners",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "N11: Handle No Gmail Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N13: Update Backlog Status (No Emails)": {
      "main": [
        [
          {
            "node": "N14: Final Success Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N07: Search Gmail Messages": {
      "main": [
        [
          {
            "node": "N08: Process Gmail Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N11: Handle No Gmail Messages": {
      "main": [
        [
          {
            "node": "N13: Update Backlog Status (No Emails)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N10: Execute Backlog2Planners": {
      "main": [
        [
          {
            "node": "N12: Update Backlog Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N06: Extract Backlog Details & Build Query": {
      "main": [
        [
          {
            "node": "N07: Search Gmail Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N12: Update Backlog Status": {
      "main": [
        [
          {
            "node": "N14: Final Success Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N02: Query Backlog Database": {
      "main": [
        [
          {
            "node": "N03: Determine Next Date Algorithm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N01: Subworkflow Start": {
      "main": [
        [
          {
            "node": "N02: Query Backlog Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-18T23:11:21.258Z",
  "id": "3soZAbHUm8vgIkXp",
  "isArchived": false,
  "meta": null,
  "name": "Process Workflow v20250730-232124",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "query",
              "type": "object"
            }
          ]
        }
      },
      "id": "subworkflow-trigger",
      "name": "N01: Subworkflow Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        208,
        120
      ]
    },
    {
      "parameters": {
        "jsCode": "// ALGORITHM: Determine Next Date to Process\n// Handle different input formats from n8n Notion node\nlet entries = [];\n\n// Try different ways to access the data\nif (Array.isArray($json)) {\n  entries = $json;\n} else if ($json.results && Array.isArray($json.results)) {\n  entries = $json.results;\n} else if ($input && $input.all) {\n  entries = $input.all().map(item => item.json);\n} else {\n  entries = [$json].filter(item => item && typeof item === 'object');\n}\n\nconsole.log(`📊 Found ${entries.length} backlog entries`);\nif (entries.length > 0) {\n  console.log(`📋 First entry structure:`, JSON.stringify(entries[0], null, 2));\n}\n\n// Helper function: get current Eastern time date\nfunction getEasternDate() {\n  const now = new Date();\n  // Eastern time is UTC-5 (standard) or UTC-4 (daylight), use UTC-4 for July\n  const easternOffset = -4 * 60; // minutes\n  const utc = now.getTime() + (now.getTimezoneOffset() * 60000);\n  const easternTime = new Date(utc + (easternOffset * 60000));\n  return easternTime;\n}\n\n// Helper function: format date to YYYY-MM-DD\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n// Helper function: get yesterday's date in Eastern time\nfunction getYesterday() {\n  const easternNow = getEasternDate();\n  const yesterday = new Date(easternNow);\n  yesterday.setDate(yesterday.getDate() - 1);\n  return formatDate(yesterday);\n}\n\n// Helper function: add days to date\nfunction addDays(dateStr, days) {\n  if (!dateStr || typeof dateStr !== 'string') {\n    console.log(`⚠️ Invalid date string: ${dateStr}`);\n    return null;\n  }\n  const date = new Date(dateStr + 'T12:00:00'); // Use noon to avoid timezone issues\n  if (isNaN(date.getTime())) {\n    console.log(`⚠️ Cannot parse date: ${dateStr}`);\n    return null;\n  }\n  date.setDate(date.getDate() + days);\n  return formatDate(date);\n}\n\n// Helper function: check if entry has valid data\nfunction isValidEntry(entry) {\n  if (!entry || typeof entry !== 'object') return false;\n  \n  // Check if it has any meaningful properties (specifically Gmail Date or Status)\n  const hasGmailDate = entry.property_gmail_date || \n                      entry.properties?.[\"Gmail Date\"] || \n                      entry.name;\n  const hasStatus = entry.property_status || \n                   entry.properties?.Status;\n  \n  return !!(hasGmailDate || hasStatus || entry.id);\n}\n\n// Filter out empty objects and invalid entries\nconst validEntries = entries.filter(isValidEntry);\n\nconsole.log(`📊 Valid entries after filtering: ${validEntries.length}`);\n\n// Log current Eastern time for debugging\nconst easternNow = getEasternDate();\nconst today = formatDate(easternNow);\nconst yesterday = getYesterday();\nconsole.log(`📅 Current Eastern time: ${easternNow.toISOString()}`);\nconsole.log(`📅 Today (Eastern): ${today}, Yesterday (Eastern): ${yesterday}`);\n\n// STEP 1: If no valid entries exist, return yesterday\nif (validEntries.length === 0) {\n  console.log(`✅ No valid entries found, creating entry for yesterday: ${yesterday}`);\n  return [{\n    json: {\n      action: 'create',\n      nextDate: yesterday,\n      reason: 'No entries exist - starting with yesterday'\n    }\n  }];\n}\n\n// STEP 2: Check ALL entries for incomplete status (CRITICAL FIX)\n// If ANY entry is not complete, block creation\nconst incompleteEntries = validEntries.filter(entry => {\n  const status = entry.property_status || \n                entry.properties?.Status?.select?.name;\n  const date = entry.property_gmail_date || \n              entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n              entry.name;\n  \n  console.log(`📋 Entry ${date}: status = ${status}`);\n  return status && status !== 'complete';\n});\n\nif (incompleteEntries.length > 0) {\n  const incompleteInfo = incompleteEntries.map(entry => {\n    const status = entry.property_status || \n                  entry.properties?.Status?.select?.name;\n    const date = entry.property_gmail_date || \n                entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n                entry.name;\n    return `${date}(${status})`;\n  }).join(', ');\n  \n  console.log(`⚠️  Found ${incompleteEntries.length} incomplete entries: ${incompleteInfo}`);\n  return [{\n    json: {\n      action: 'warning',\n      message: `Cannot create new entries - ${incompleteEntries.length} entries are not complete: ${incompleteInfo}`,\n      incompleteCount: incompleteEntries.length,\n      incompleteEntries: incompleteInfo\n    }\n  }];\n}\n\n// STEP 3: All entries are complete - proceed with date logic\nconsole.log(`✅ All entries are complete - proceeding with date logic`);\n\n// Get latest entry for date calculation\nconst latestEntry = validEntries[0];\nconst latestDate = latestEntry.property_gmail_date || \n                  latestEntry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n                  latestEntry.name;\n\nconsole.log(`📋 Latest complete entry: ${latestDate}`);\n\n// STEP 4: Find earliest missing date (gap finding)\n// Get all dates and sort them\nconst allDates = validEntries\n  .map(entry => {\n    return entry.property_gmail_date || \n           entry.properties?.[\"Gmail Date\"]?.title?.[0]?.text?.content ||\n           entry.name;\n  })\n  .filter(date => date && typeof date === 'string' && date.match(/^\\d{4}-\\d{2}-\\d{2}$/))\n  .sort();\n\nconsole.log(`📅 All valid dates: ${allDates.join(', ')}`);\n\n// Find the first gap\nfor (let i = 0; i < allDates.length - 1; i++) {\n  const currentDate = allDates[i];\n  const nextDate = allDates[i + 1];\n  \n  const expectedNext = addDays(currentDate, 1);\n  if (!expectedNext) continue;\n  \n  if (expectedNext !== nextDate) {\n    console.log(`🔍 Found gap: ${currentDate} -> ${nextDate}, missing: ${expectedNext}`);\n    return [{\n      json: {\n        action: 'create',\n        nextDate: expectedNext,\n        reason: `Found gap between ${currentDate} and ${nextDate}`\n      }\n    }];\n  }\n}\n\n// STEP 5: No gaps found, create entry for day before oldest (with existence check)\nconst oldestDate = allDates[allDates.length - 1]; // Since sorted ascending, last is oldest\nlet candidate = addDays(oldestDate, -1);\nif (!candidate) {\n  console.log(`❌ Cannot calculate day before oldest: ${oldestDate}`);\n  return [{\n    json: {\n      action: 'create',\n      nextDate: yesterday,\n      reason: 'Date calculation error - using yesterday'\n    }\n  }];\n}\n\n// Keep going back until we find a date that doesn't exist\nwhile (candidate && allDates.includes(candidate) && candidate >= '2020-01-01') {\n  console.log(`📋 Date ${candidate} already exists, trying day before`);\n  candidate = addDays(candidate, -1);\n}\n\n// Never create today or future dates\nconst nextDate = candidate > yesterday ? yesterday : candidate;\n\nconsole.log(`📆 No gaps found. Oldest: ${oldestDate}, candidate: ${candidate}, yesterday: ${yesterday}`);\nconsole.log(`✅ Creating entry for: ${nextDate}`);\n\nreturn [{\n  json: {\n    action: 'create',\n    nextDate: nextDate,\n    reason: `No gaps found, creating entry for earliest missing date before ${oldestDate}`\n  }\n}];"
      },
      "id": "determine-next-date",
      "name": "N03: Determine Next Date Algorithm",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        656,
        120
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "action_is_create",
              "leftValue": "={{$json.action}}",
              "rightValue": "create",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-action",
      "name": "N04: Create vs Warning",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        880,
        120
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "2231db9b-a441-8178-8957-f88a30b0cdba",
          "mode": "list",
          "cachedResultName": "vcdb.Backlog.vn8n",
          "cachedResultUrl": "https://www.notion.so/2231db9ba44181788957f88a30b0cdba"
        },
        "title": "={{ $json.nextDate }}",
        "simple": false,
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Date Started|date",
              "date": "={{ $now }}",
              "timezone": "US/Eastern"
            },
            {
              "key": "Status|select",
              "selectValue": "start"
            }
          ]
        },
        "options": {}
      },
      "id": "create-backlog-entry",
      "name": "N05: Create New Backlog Entry",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        1104,
        48
      ],
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "2231db9b-a441-8178-8957-f88a30b0cdba",
          "mode": "list",
          "cachedResultName": "vcdb.Backlog.vn8n",
          "cachedResultUrl": "https://www.notion.so/2231db9ba44181788957f88a30b0cdba"
        },
        "options": {
          "sort": {
            "sortValue": [
              {
                "key": "Gmail Date|title",
                "direction": "descending"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        432,
        120
      ],
      "id": "d62dc73a-6fdc-4450-b128-d6cb6d8c3fc5",
      "name": "N02: Query Backlog Database",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract backlog details and build Gmail query\nconst backlogEntry = $json;\nconst algorithmResult = $('N03: Determine Next Date Algorithm').first().json;\n\n// Get the date from algorithm result\nconst dateStr = algorithmResult.nextDate; // Format: YYYY-MM-DD\n\n// Parse date components\nconst [year, month, day] = dateStr.split('-');\nconst formattedDate = `${year}/${month}/${day}`;\n\n// Calculate next day for 'before' parameter\nconst dateObj = new Date(year, month - 1, day); // month is 0-indexed\nconst nextDay = new Date(dateObj);\nnextDay.setDate(dateObj.getDate() + 1);\n\nconst afterDate = formattedDate;\nconst beforeDate = `${nextDay.getFullYear()}/${String(nextDay.getMonth() + 1).padStart(2, '0')}/${String(nextDay.getDate()).padStart(2, '0')}`;\n\n// Build Gmail query with folder filter\nconst gmailQuery = `after:${afterDate} before:${beforeDate} in:\"--Watch/VC\"`;\n\nconsole.log(`📅 Backlog entry created for: ${dateStr}`);\nconsole.log(`📧 Gmail query: ${gmailQuery}`);\n\nreturn [{\n  json: {\n    backlogId: backlogEntry.id,\n    backlogDate: dateStr,\n    backlogUrl: backlogEntry.url,\n    gmailQuery: gmailQuery,\n    formattedDate: formattedDate\n  }\n}];"
      },
      "id": "extract-backlog-details",
      "name": "N06: Extract Backlog Details & Build Query",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1328,
        48
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 100,
        "filters": {
          "q": "={{ $json.gmailQuery }}"
        }
      },
      "id": "search-gmail-messages",
      "name": "N07: Search Gmail Messages",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        1552,
        48
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 2000,
      "alwaysOutputData": true,
      "webhookId": "e28ed83d-c45d-409e-b456-b054044a4220",
      "credentials": {
        "gmailOAuth2": {
          "id": "pxtxj61wdCzGXITa",
          "name": "Gmail account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Process Gmail results and handle errors/empty results\nconst gmailMessages = $('N07: Search Gmail Messages').all();\nconst backlogDetails = $('N06: Extract Backlog Details & Build Query').first().json;\n\n// Handle Gmail API errors\nif (gmailMessages.length === 1 && gmailMessages[0].json.error) {\n  const error = gmailMessages[0].json.error;\n  console.error('❌ Gmail API error:', error);\n  \n  // Return empty array to trigger no emails path\n  return [];\n}\n\n// Check for empty results - FIXED to handle empty JSON objects\nif (!gmailMessages || gmailMessages.length === 0 || \n    (gmailMessages.length === 1 && !gmailMessages[0].json.id) ||\n    (gmailMessages.length === 1 && Object.keys(gmailMessages[0].json).length === 0)) {\n  console.log('ℹ️ No messages found for the specified date');\n  // Return empty array to trigger no emails path\n  return [];\n}\n\n// Process and format messages\nconsole.log(`📧 Processing ${gmailMessages.length} Gmail messages`);\n\n// Add backlogId to each message for subworkflow\nconst processedMessages = gmailMessages.map(item => {\n  const msg = item.json;\n  return {\n    messageId: msg.id,\n    threadId: msg.threadId,\n    from: msg.From || 'Unknown',\n    subject: msg.Subject || 'No Subject',\n    backlogId: backlogDetails.backlogId\n  };\n});\n\nreturn processedMessages.map(msg => ({ json: msg }));"
      },
      "id": "process-gmail-results",
      "name": "N08: Process Gmail Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        48
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-messages",
              "leftValue": "={{ $input.all().filter(item => item.json.messageId).length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-has-messages",
      "name": "N09: Check Has Messages",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2000,
        48
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "7f3OziDCCYtWwM4W",
          "mode": "list",
          "cachedResultName": "Backlog2Planners v20250729-024811"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": {
              "id": "={{ $json.messageId }}",
              "backlogId": "={{ $json.backlogId }}"
            }
          },
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ]
        },
        "mode": "each",
        "options": {}
      },
      "id": "execute-backlog2planners",
      "name": "N10: Execute Backlog2Planners",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2224,
        -48
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ $('N06: Extract Backlog Details & Build Query').first().json.backlogId }}",
          "mode": "id",
          "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
        },
        "simple": false,
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Status|select",
              "selectValue": "complete"
            }
          ]
        },
        "options": {}
      },
      "id": "update-backlog-status",
      "name": "N12: Update Backlog Status",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2448,
        -48
      ],
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Handle case where no Gmail messages found\nconst backlogDetails = $('N06: Extract Backlog Details & Build Query').first().json;\n\nconsole.log(`⚠️ No Gmail messages found for date: ${backlogDetails.backlogDate}`);\nconsole.log(`📧 Query used: ${backlogDetails.gmailQuery}`);\n\n// Still mark backlog as complete since we checked the date\nreturn [{\n  json: {\n    success: false,\n    action: 'no_emails_found',\n    backlogId: backlogDetails.backlogId,\n    backlogDate: backlogDetails.backlogDate,\n    message: 'No emails found in --Watch/VC folder for this date',\n    shouldUpdateStatus: true\n  }\n}];"
      },
      "id": "handle-no-gmail",
      "name": "N11: Handle No Gmail Messages",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2224,
        144
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ $('N06: Extract Backlog Details & Build Query').first().json.backlogId }}",
          "mode": "id",
          "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
        },
        "simple": false,
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Status|select",
              "selectValue": "complete"
            }
          ]
        },
        "options": {}
      },
      "id": "update-backlog-no-emails",
      "name": "N13: Update Backlog Status (No Emails)",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2448,
        144
      ],
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Compile final result based on execution path\nlet algorithmResult = null;\nlet backlogDetails = null;\n\n// Try to get algorithm result\ntry {\n  algorithmResult = $('N03: Determine Next Date Algorithm').first().json;\n} catch (e) {\n  console.log('Could not get algorithm result');\n}\n\n// Try to get backlog details\ntry {\n  backlogDetails = $('N06: Extract Backlog Details & Build Query').first().json;\n} catch (e) {\n  console.log('Could not get backlog details');\n}\n\n// Check which path we came from\nlet processedMessages = [];\nlet executionResults = [];\nlet cameFromNoEmailPath = false;\nlet cameFromWarningPath = false;\nlet gmailError = null;\n\n// Check if we came from warning path (N02 false branch)\ntry {\n  const prevNode = $input.first().json;\n  if (prevNode && prevNode.action === 'warning') {\n    cameFromWarningPath = true;\n  }\n} catch (e) {\n  // Not from warning path\n}\n\n// Check if Gmail had an error\ntry {\n  const gmailData = $('N07: Search Gmail Messages').first();\n  if (gmailData.error) {\n    gmailError = gmailData.error;\n  }\n} catch (e) {\n  // No Gmail execution or error\n}\n\n// Try to get data from the Gmail processing path\nif (!cameFromWarningPath && !gmailError) {\n  try {\n    const n08Data = $('N08: Process Gmail Results');\n    if (n08Data && n08Data.all) {\n      processedMessages = n08Data.all();\n    }\n  } catch (e) {\n    // N08 didn't execute - we came from the no emails path\n    cameFromNoEmailPath = true;\n  }\n\n  try {\n    const n10Data = $('N10: Execute Backlog2Planners');\n    if (n10Data && n10Data.all) {\n      executionResults = n10Data.all();\n    }\n  } catch (e) {\n    // N10 didn't execute - confirming no emails path\n    cameFromNoEmailPath = true;\n  }\n}\n\n// If we came from no email path, check if we have the no email handler data\nif (cameFromNoEmailPath) {\n  try {\n    const noEmailData = $('N11: Handle No Gmail Messages').first().json;\n    console.log(`📧 No emails found for date: ${noEmailData.backlogDate}`);\n  } catch (e) {\n    console.log(`📧 No emails were processed`);\n  }\n}\n\n// Build result based on execution path\nlet result;\n\nif (cameFromWarningPath) {\n  // Warning path - incomplete entries exist\n  const warningData = $input.first().json;\n  result = {\n    success: false,\n    action: 'warning',\n    message: warningData.message,\n    details: warningData.details,\n    timestamp: new Date().toISOString()\n  };\n  console.log(`⚠️ Workflow Warning: ${result.message}`);\n} else if (gmailError) {\n  // Gmail error path\n  result = {\n    success: false,\n    action: 'gmail_error',\n    createdDate: algorithmResult?.nextDate,\n    reason: algorithmResult?.reason,\n    backlogEntryId: backlogDetails?.backlogId,\n    error: gmailError.message || 'Gmail search failed',\n    timestamp: new Date().toISOString()\n  };\n  console.log(`❌ Gmail Error: ${result.error}`);\n} else {\n  // Normal completion path\n  result = {\n    success: true,\n    action: 'completed',\n    createdDate: algorithmResult.nextDate,\n    reason: algorithmResult.reason,\n    backlogEntryId: backlogDetails.backlogId,\n    gmailMessagesProcessed: processedMessages.length,\n    plannerRecordsCreated: {\n      emails: executionResults.length,\n      persons: executionResults.filter(r => r.json && r.json.PlannerPerson).length,\n      firms: executionResults.filter(r => r.json && r.json.PlannerFirm).length\n    },\n    noEmailsFound: cameFromNoEmailPath,\n    timestamp: new Date().toISOString()\n  };\n  \n  console.log(`✅ Backlog Creator Success: Created and processed entry for ${result.createdDate}`);\n  console.log(`📝 Reason: ${result.reason}`);\n  console.log(`🆔 Entry ID: ${result.backlogEntryId}`);\n  console.log(`📧 Gmail messages processed: ${result.gmailMessagesProcessed}`);\n  if (result.noEmailsFound) {\n    console.log(`📭 No emails found for this date - backlog entry marked as complete`);\n  }\n}\n\nreturn [{ json: result }];"
      },
      "id": "final-success-result",
      "name": "N14: Final Success Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2672,
        144
      ]
    }
  ],
  "pinData": {
    "N01: Subworkflow Start": [
      {
        "json": {}
      }
    ]
  },
  "repo_name": "n8n-hyly-ai-backup",
  "repo_owner": "munishgandhi",
  "repo_path": "",
  "settings": {},
  "shared": [
    {
      "createdAt": "2025-07-18T23:11:21.261Z",
      "updatedAt": "2025-07-18T23:11:21.261Z",
      "role": "workflow:owner",
      "workflowId": "3soZAbHUm8vgIkXp",
      "projectId": "SdQUKp1z3ZZrGtB3",
      "project": {
        "createdAt": "2025-07-01T02:52:03.740Z",
        "updatedAt": "2025-07-05T04:34:13.413Z",
        "id": "SdQUKp1z3ZZrGtB3",
        "name": "Munish Gandhi <mg@hy.ly>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-07-01T02:52:03.740Z",
            "updatedAt": "2025-07-01T02:52:03.740Z",
            "role": "project:personalOwner",
            "userId": "9cfcc413-ffc4-42d0-8c34-fe942bbee9ba",
            "projectId": "SdQUKp1z3ZZrGtB3",
            "user": {
              "createdAt": "2025-07-01T02:52:03.312Z",
              "updatedAt": "2025-08-13T19:57:04.000Z",
              "id": "9cfcc413-ffc4-42d0-8c34-fe942bbee9ba",
              "email": "mg@hy.ly",
              "firstName": "Munish",
              "lastName": "Gandhi",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-07-01T02:54:47.627Z",
                "personalization_survey_n8n_version": "1.100.1",
                "companySize": "personalUser",
                "companyType": "saas",
                "role": "business-owner",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "IdvDgcbfCEF7nh2j",
                "userActivatedAt": 1751392519613,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1751675204125
                },
                "easyAIWorkflowOnboarded": true
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-08-13",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-31T03:21:24.000Z",
  "versionId": "e484b1f7-4d89-44ac-bb1d-d1e9030f82db"
}