{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Validate Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Email": {
      "main": [
        [
          {
            "node": "Valid Email Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Valid Email Check": {
      "main": [
        [
          {
            "node": "Check Email Exists",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Email Exists": {
      "main": [
        [
          {
            "node": "Email Not Found Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Not Found Check": {
      "main": [
        [
          {
            "node": "Insert Person",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Person": {
      "main": [
        [
          {
            "node": "Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-18T23:13:10.305Z",
  "id": "BB9fhO5B95zudxJI",
  "isArchived": false,
  "meta": null,
  "name": "Prototype 2: Simple People Creation Route Fixed v20250718-191310",
  "nodes": [
    {
      "parameters": {
        "path": "simple-people-creation",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        19.999999999999957,
        150
      ],
      "id": "webhook-1",
      "webhookId": "602e3a70-8cdf-4b66-aae1-b75dc986be34"
    },
    {
      "parameters": {
        "jsCode": "// Validate email input\nconst email = $json.query?.email || $json.email;\n\nif (!email || email.trim() === '') {\n  return {\n    validEmail: false,\n    error: 'Invalid Email',\n    email: null\n  };\n}\n\n// Email format validation\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nif (!emailRegex.test(email.trim())) {\n  return {\n    validEmail: false,\n    error: 'Invalid Email',\n    email: email.trim()\n  };\n}\n\nreturn {\n  validEmail: true,\n  email: email.trim(),\n  error: null\n};"
      },
      "name": "Validate Email",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        239.99999999999994,
        150
      ],
      "id": "validate-email-1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.validEmail }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "Valid Email Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        459.99999999999994,
        150
      ],
      "id": "valid-email-check-1"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": "2231db9b-a441-815e-8f1b-c799b15513ff",
        "filterType": "manual",
        "filters": {
          "conditions": [
            {
              "key": "Email|title",
              "condition": "equals",
              "titleValue": "={{ $json.email }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Check Email Exists",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        680,
        75
      ],
      "id": "check-exists-1",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ Object.keys($json).length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "Email Not Found Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        900,
        75
      ],
      "id": "email-not-found-check-1"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": "2231db9b-a441-815e-8f1b-c799b15513ff",
        "title": "={{ $('Validate Email').first().json.email }}",
        "propertiesUi": {
          "propertyValues": []
        },
        "options": {}
      },
      "name": "Insert Person",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1120,
        0
      ],
      "id": "insert-person-1",
      "credentials": {
        "notionApi": {
          "id": "MlSLKQmPnMyqW0ii",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Determine final output based on workflow path\nconst validateResult = $('Validate Email').first().json;\n\n// If email validation failed\nif (!validateResult.validEmail) {\n  return {\n    success: false,\n    message: validateResult.error,\n    email: validateResult.email,\n    operation: 'validation_error'\n  };\n}\n\n// Check if we came from Check Email Exists (existing email path)\ntry {\n  const checkExistsResult = $('Check Email Exists').all();\n  if (checkExistsResult && checkExistsResult.length > 0) {\n    return {\n      success: true,\n      message: 'Record exists',\n      email: validateResult.email,\n      operation: 'already_exists'\n    };\n  }\n} catch (e) {\n  // Check Email Exists didn't run - this is the validation error path\n}\n\n// Check if we came from Insert Person (new email path)\ntry {\n  const insertResult = $('Insert Person').all();\n  if (insertResult && insertResult.length > 0 && insertResult[0].json?.id) {\n    return {\n      success: true,\n      message: `Record created for ${validateResult.email}`,\n      email: validateResult.email,\n      recordId: insertResult[0].json.id,\n      operation: 'create'\n    };\n  }\n} catch (e) {\n  // Insert Person didn't run\n}\n\n// Fallback - something went wrong\nreturn {\n  success: false,\n  message: 'ERROR: Unexpected workflow path',\n  email: validateResult.email,\n  operation: 'error'\n};"
      },
      "name": "Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        150
      ],
      "id": "output-1"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-hyly-ai-backup",
  "repo_owner": "munishgandhi",
  "repo_path": "",
  "settings": {
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": true
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-07-21T05:25:09.000Z",
  "versionId": "cf68aed3-743f-48b6-9bc6-b143b45978a8"
}